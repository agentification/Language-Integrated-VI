{
  "0": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 0,
    "query": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
    "turn_history": {
      "actions": [
        "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC"
      ],
      "observations": [
        "[('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "1": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1,
    "query": "Find the name of airports which do not have any flight in and out.",
    "turn_history": {
      "actions": [
        "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT DISTINCT SourceAirport FROM flights UNION SELECT DISTINCT DestAirport FROM flights)"
      ],
      "observations": [
        "[('Municipal ',), ('Municipal ',), ('Ambler ',), ('Municipal ',), ('Dougherty County ',), ('Arcata ',), ('Lenawee County ',), ('Adak Island Ns ',), ('Ada ',), ('Albert Lea ',), ('Municipal ',), ('Downtown ',), ('Municipal ',), ('Municipal ',), ('Alliance ',), ('Anita Bay ',), ('Municipal ',), ('Municipal ',), ('George Downer ',), ('Akhiok SPB ',), ('Colorado Plains Regional Airport ',), ('Anaktuvuk ',), ('Albany International ',), ('Municipal ',), ('Alton ',), ('Rick Husband Amarillo International ',), ('Gratiot Community ',), ('Orange County Steel Salvage Heliport ',), ('Anniston Metropolitan ',), ('Ted Stevens Anchorage International Airport ',), ('Aniak ',), ('Annette Island ',), ('Lee ',), ('Tri-State Steuben Cty ',), ('Anvik ',), ('Ainsworth ',), ('Alpena County Regional ',), ('Alyeska ',), ('Municipal ',), ('Arctic Village ',), ('Asbury Park ',), ('Aspen ',), ('Astoria ',), ('Antlers ',), ('Ohio University ',), ('Alakanuk ',), ('Algona ',), ('Akron/canton Regional ',), ('Dyess AFB ',), ('Esler Field ',), ('Holloman AFB ',), ('US Army Heliport ',), ('Spb ',), ('Akutan ',), ('Albany NAS ',), ('NAS ',), ('Rollang Field ',), ('Reilly AHP ',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "2": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 2,
    "query": "What is the average GNP and total population in all nations whose government is US territory?",
    "turn_history": {
      "actions": [
        "SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US Territory'"
      ],
      "observations": [
        "[(510.333333, Decimal('329000'))]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "3": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 3,
    "query": "Count the number of different nationalities of conductors.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Nationality) FROM conductor"
      ],
      "observations": [
        "[(3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "4": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 4,
    "query": "What are the ids, version numbers, and type codes for each template?",
    "turn_history": {
      "actions": [
        "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates"
      ],
      "observations": [
        "[(1, 5, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "5": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 5,
    "query": "What is the money rank of the tallest poker player?",
    "turn_history": {
      "actions": [
        "SELECT Money_Rank FROM poker_player  JOIN people ON poker_player.People_ID = people.People_ID  WHERE Height = (SELECT MAX(Height) FROM people)"
      ],
      "observations": [
        "[(68.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "6": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 6,
    "query": "For each hometown, how many teachers are there?",
    "turn_history": {
      "actions": [
        "SELECT Hometown, COUNT(*) AS Num_Teachers FROM teacher GROUP BY Hometown"
      ],
      "observations": [
        "[('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "7": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 7,
    "query": "What are the cities whose population is between 160000 and 900000?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000"
      ],
      "observations": [
        "[('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('S\u00e9tif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucum\u00e1n',), ('Lan\u00fas',), ('Merlo',), ('General San Mart\u00edn',), ('Salta',), ('Moreno',), ('Santa F\u00e9',), ('Avellaneda',), ('Tres de Febrero',), ('Mor\u00f3n',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente L\u00f3pez',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bah\u00eda Blanca',), ('Esteban Echeverr\u00eda',), ('Resistencia',), ('Jos\u00e9 C. Paz',), ('Paran\u00e1',), ('Godoy Cruz',), ('Posadas',), ('Guaymall\u00e9n',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuqu\u00e9n',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('G\u00e4nc\u00e4',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Li\u00e8ge',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('S\u00e3o Gon\u00e7alo',), ('Nova Igua\u00e7u',), ('S\u00e3o Lu\u00eds',), ('Macei\u00f3',), ('Duque de Caxias',), ('S\u00e3o Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo Andr\u00e9',), ('Jo\u00e3o Pessoa',), ('Jaboat\u00e3o dos Guararapes',), ('Contagem',), ('S\u00e3o Jos\u00e9 dos Campos',), ('Uberl\u00e2ndia',), ('Feira de Santana',), ('Ribeir\u00e3o Preto',), ('Sorocaba',), ('Niter\u00f3i',), ('Cuiab\u00e1',), ('Juiz de Fora',), ('Aracaju',), ('S\u00e3o Jo\u00e3o de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mau\u00e1',), ('Carapicu\u00edba',), ('Olinda',), ('Campina Grande',), ('S\u00e3o Jos\u00e9 do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goi\u00e2nia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jund\u00eda\u00ed',), ('Canoas',), ('Franca',), ('S\u00e3o Vicente',), ('Maring\u00e1',), ('Montes Claros',), ('An\u00e1polis',), ('Florian\u00f3polis',), ('Petr\u00f3polis',), ('Itaquaquecetuba',), ('Vit\u00f3ria',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Igua\u00e7u',), ('Macap\u00e1',), ('Ilh\u00e9us',), ('Vit\u00f3ria da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santar\u00e9m',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guaruj\u00e1',), ('Ribeir\u00e3o das Neves',), ('Governador Valadares',), ('Taubat\u00e9',), ('Imperatriz',), ('Gravata\u00ed',), ('Embu',), ('Mossor\u00f3',), ('V\u00e1rzea Grande',), ('Petrolina',), ('Barueri',), ('Viam\u00e3o',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Tabo\u00e3o da Serra',), ('S\u00e3o Jos\u00e9 dos Pinhais',), ('Mag\u00e9',), ('Suzano',), ('S\u00e3o Leopoldo',), ('Mar\u00edlia',), ('S\u00e3o Carlos',), ('Sumar\u00e9',), ('Presidente Prudente',), ('Divin\u00f3polis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequi\u00e9',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itabora\u00ed',), ('Santa B\u00e1rbara d\u00b4Oeste',), ('Nova Friburgo',), ('Jacare\u00ed',), ('Ara\u00e7atuba',), ('Barra Mansa',), ('Praia Grande',), ('Marab\u00e1',), ('Crici\u00fama',), ('Boa Vista',), ('Passo Fundo',), ('Dourados',), ('Santa Luzia',), ('Rio Claro',), ('Maracana\u00fa',), ('Guarapuava',), ('Glasgow',), ('Liverpool',), ('Edinburgh',), ('Sheffield',), ('Manchester',), ('Leeds',), ('Bristol',), ('Cardiff',), ('Coventry',), ('Leicester',), ('Bradford',), ('Belfast',), ('Nottingham',), ('Kingston upon Hull',), ('Plymouth',), ('Stoke-on-Trent',), ('Wolverhampton',), ('Derby',), ('Swansea',), ('Southampton',), ('Aberdeen',), ('Northampton',), ('Dudley',), ('Portsmouth',), ('Newcastle upon Tyne',), ('Sunderland',), ('Luton',), ('Swindon',), ('Southend-on-Sea',), ('Walsall',), ('Bournemouth',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Ouagadougou',), ('Bobo-Dioulasso',), ('Bujumbura',), ('Puente Alto',), ('Vi\u00f1a del Mar',), ('Valpara\u00edso',), ('Talcahuano',), ('Antofagasta',), ('San Bernardo',), ('Temuco',), ('Concepci\u00f3n',), ('Rancagua',), ('Arica',), ('Talca',), ('Chill\u00e1n',), ('Iquique',), ('San Jos\u00e9',), ('Djibouti',), ('Santiago de los Caballeros',), ('Cuenca',), ('Machala',), ('Santo Domingo de los Colorados',), ('Portoviejo',), ('Ambato',), ('Manta',), ('Shubra al-Khayma',), ('Port Said',), ('Suez',), ('al-Mahallat al-Kubra',), ('Tanta',), ('al-Mansura',), ('Luxor',), ('Asyut',), ('Bahtim',), ('Zagazig',), ('al-Faiyum',), ('Ismailia',), ('Kafr al-Dawwar',), ('Assuan',), ('Damanhur',), ('al-Minya',), ('Bani Suwayf',), ('Qina',), ('Sawhaj',), ('San Salvador',), ('Asmara',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('M\u00e1laga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('C\u00f3rdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gij\u00f3n',), ('L\u00b4Hospitalet de Llobregat',), ('Granada',), ('A Coru\u00f1a (La Coru\u00f1a)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('M\u00f3stoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iru\u00f1a]',), ('Donostia-San Sebasti\u00e1n',), ('Cartagena',), ('Legan\u00e9s',), ('Fuenlabrada',), ('Almer\u00eda',), ('Terrassa',), ('Alcal\u00e1 de Henares',), ('Burgos',), ('Johannesburg',), ('Port Elizabeth',), ('Pretoria',), ('Inanda',), ('Durban',), ('Vanderbijlpark',), ('Kempton Park',), ('Alberton',), ('Pinetown',), ('Pietermaritzburg',), ('Benoni',), ('Randburg',), ('Umlazi',), ('Bloemfontein',), ('Vereeniging',), ('Wonderboom',), ('Roodepoort',), ('Boksburg',), ('Klerksdorp',), ('Soshanguve',), ('Newcastle',), ('East London',), ('Welkom',), ('Kimberley',), ('Uitenhage',), ('Chatsworth',), ('Mdantsane',), ('Krugersdorp',), ('Botshabelo',), ('Brakpan',), ('Witbank',), ('Oberholzer',), ('Germiston',), ('Springs',), ('Dire Dawa',), ('Cebu',), ('Zamboanga',), ('Pasig',), ('Valenzuela',), ('Las Pi\u00f1as',), ('Antipolo',), ('Taguig',), ('Cagayan de Oro',), ('Para\u00f1aque',), ('Makati',), ('Bacolod',), ('General Santos',), ('Marikina',), ('Dasmari\u00f1as',), ('Muntinlupa',), ('Iloilo',), ('Pasay',), ('Malabon',), ('San Jos\u00e9 del Monte',), ('Bacoor',), ('Iligan',), ('Calamba',), ('Mandaluyong',), ('Butuan',), ('Angeles',), ('Tarlac',), ('Mandaue',), ('Baguio',), ('Batangas',), ('Cainta',), ('San Pedro',), ('Navotas',), ('Cabanatuan',), ('San Fernando',), ('Lipa',), ('Lapu-Lapu',), ('San Pablo',), ('Bi\u00f1an',), ('Taytay',), ('Lucena',), ('Imus',), ('Olongapo',), ('Binangonan',), ('Santa Rosa',), ('Tagum',), ('Tacloban',), ('Malolos',), ('Mabalacat',), ('Cotabato',), ('Meycauayan',), ('Puerto Princesa',), ('Libreville',), ('Kutaisi',), ('Kumasi',), ('Ciudad de Guatemala',), ('Mixco',), ('Bissau',), ('Georgetown',), ('Port-au-Prince',), ('Carrefour',), ('Delmas',), ('Tegucigalpa',), ('San Pedro Sula',), ('Malang',), ('Bandar Lampung',), ('Bekasi',), ('Padang',), ('Surakarta',), ('Banjarmasin',), ('Pekan Baru',), ('Denpasar',), ('Yogyakarta',), ('Pontianak',), ('Samarinda',), ('Jambi',), ('Depok',), ('Cimahi',), ('Balikpapan',), ('Manado',), ('Mataram',), ('Pekalongan',), ('Tegal',), ('Bogor',), ('Ciputat',), ('Pondokgede',), ('Cirebon',), ('Kediri',), ('Ambon',), ('Jember',), ('Cilacap',), ('Cimanggis',), ('Pematang Siantar',), ('Purwokerto',), ('Ciomas',), ('Tasikmalaya',), ('Madiun',), ('Srinagar',), ('Agra',), ('Coimbatore',), ('Thane (Thana)',), ('Allahabad',), ('Meerut',), ('Vishakhapatnam',), ('Jabalpur',), ('Amritsar',), ('Faridabad',), ('Vijayawada',), ('Gwalior',), ('Jodhpur',), ('Nashik (Nasik)',), ('Hubli-Dharwad',), ('Solapur (Sholapur)',), ('Ranchi',), ('Bareilly',), ('Guwahati (Gauhati)',), ('Shambajinagar (Aurangabad)',), ('Cochin (Kochi)',), ('Rajkot',), ('Kota',), ('Thiruvananthapuram (Trivandrum',), ('Pimpri-Chinchwad',), ('Jalandhar (Jullundur)',), ('Gorakhpur',), ('Chandigarh',), ('Mysore',), ('Aligarh',), ('Guntur',), ('Jamshedpur',), ('Ghaziabad',), ('Warangal',), ('Raipur',), ('Moradabad',), ('Durgapur',), ('Amravati',), ('Calicut (Kozhikode)',), ('Bikaner',), ('Bhubaneswar',), ('Kolhapur',), ('Kataka (Cuttack)',), ('Ajmer',), ('Bhavnagar',), ('Tiruchirapalli',), ('Bhilai',), ('Bhiwandi',), ('Saharanpur',), ('Ulhasnagar',), ('Salem',), ('Ujjain',), ('Malegaon',), ('Jamnagar',), ('Bokaro Steel City',), ('Akola',), ('Belgaum',), ('Rajahmundry',), ('Nellore',), ('Udaipur',), ('New Bombay',), ('Bhatpara',), ('Gulbarga',), ('New Delhi',), ('Jhansi',), ('Gaya',), ('Kakinada',), ('Dhule (Dhulia)',), ('Panihati',), ('Nanded (Nander)',), ('Mangalore',), ('Dehra Dun',), ('Kamarhati',), ('Davangere',), ('Asansol',), ('Bhagalpur',), ('Bellary',), ('Barddhaman (Burdwan)',), ('Rampur',), ('Jalgaon',), ('Muzaffarpur',), ('Nizamabad',), ('Muzaffarnagar',), ('Patiala',), ('Shahjahanpur',), ('Kurnool',), ('Tiruppur (Tirupper)',), ('Rohtak',), ('South Dum Dum',), ('Mathura',), ('Chandrapur',), ('Barahanagar (Baranagar)',), ('Darbhanga',), ('Siliguri (Shiliguri)',), ('Raurkela',), ('Ambattur',), ('Panipat',), ('Firozabad',), ('Ichalkaranji',), ('Jammu',), ('Ramagundam',), ('Eluru',), ('Brahmapur',), ('Alwar',), ('Pondicherry',), ('Thanjavur',), ('Bihar Sharif',), ('Tuticorin',), ('Imphal',), ('Latur',), ('Sagar',), ('Farrukhabad-cum-Fatehgarh',), ('Sangli',), ('Parbhani',), ('Nagar Coil',), ('Bijapur',), ('Kukatpalle',), ('Bally',), ('Bhilwara',), ('Ratlam',), ('Avadi',), ('Dindigul',), ('Ahmadnagar',), ('Bilaspur',), ('Shimoga',), ('Kharagpur',), ('Mira Bhayandar',), ('Vellore',), ('Jalna',), ('Burnpur',), ('Anantapur',), ('Allappuzha (Alleppey)',), ('Tirupati',), ('Karnal',), ('Burhanpur',), ('Hisar (Hissar)',), ('Tiruvottiyur',), ('Mirzapur-cum-Vindhyachal',), ('Secunderabad',), ('Nadiad',), ('Dewas',), ('Murwara (Katni)',), ('Ganganagar',), ('Vizianagaram',), ('Mosul',), ('Irbil',), ('Kirkuk',), ('Basra',), ('al-Sulaymaniya',), ('al-Najaf',), ('Karbala',), ('al-Hilla',), ('al-Nasiriya',), ('al-Amara',), ('al-Diwaniya',), ('al-Ramadi',), ('al-Kut',), ('Ahvaz',), ('Qom',), ('Kermanshah',), ('Urmia',), ('Zahedan',), ('Rasht',), ('Hamadan',), ('Kerman',), ('Arak',), ('Ardebil',), ('Yazd',), ('Qazvin',), ('Zanjan',), ('Sanandaj',), ('Bandar-e-Abbas',), ('Khorramabad',), ('Eslamshahr',), ('Borujerd',), ('Abadan',), ('Dezful',), ('Kashan',), ('Sari',), ('Gorgan',), ('Najafabad',), ('Sabzevar',), ('Khomeynishahr',), ('Dublin',), ('Jerusalem',), ('Tel Aviv-Jaffa',), ('Haifa',), ('Rishon Le Ziyyon',), ('Beerseba',), ('Holon',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Graz',), ('Linz',), ('Chiba',), ('Sakai',), ('Kumamoto',), ('Okayama',), ('Sagamihara',), ('Hamamatsu',), ('Kagoshima',), ('Funabashi',), ('Higashiosaka',), ('Hachioji',), ('Niigata',), ('Amagasaki',), ('Himeji',), ('Shizuoka',), ('Urawa',), ('Matsuyama',), ('Matsudo',), ('Kanazawa',), ('Kawaguchi',), ('Ichikawa',), ('Omiya',), ('Utsunomiya',), ('Oita',), ('Nagasaki',), ('Yokosuka',), ('Kurashiki',), ('Gifu',), ('Hirakata',), ('Nishinomiya',), ('Toyonaka',), ('Wakayama',), ('Fukuyama',), ('Fujisawa',), ('Asahikawa',), ('Machida',), ('Nara',), ('Takatsuki',), ('Iwaki',), ('Nagano',), ('Toyohashi',), ('Toyota',), ('Suita',), ('Takamatsu',), ('Koriyama',), ('Okazaki',), ('Kawagoe',), ('Tokorozawa',), ('Toyama',), ('Kochi',), ('Kashiwa',), ('Akita',), ('Miyazaki',), ('Koshigaya',), ('Naha',), ('Aomori',), ('Hakodate',), ('Akashi',), ('Yokkaichi',), ('Fukushima',), ('Morioka',), ('Maebashi',), ('Kasugai',), ('Otsu',), ('Ichihara',), ('Yao',), ('Ichinomiya',), ('Tokushima',), ('Kakogawa',), ('Ibaraki',), ('Neyagawa',), ('Shimonoseki',), ('Yamagata',), ('Fukui',), ('Hiratsuka',), ('Mito',), ('Sasebo',), ('Hachinohe',), ('Takasaki',), ('Shimizu',), ('Kurume',), ('Fuji',), ('Soka',), ('Fuchu',), ('Chigasaki',), ('Atsugi',), ('Numazu',), ('Ageo',), ('Yamato',), ('Matsumoto',), ('Kure',), ('Takarazuka',), ('Kasukabe',), ('Chofu',), ('Odawara',), ('Kofu',), ('Kushiro',), ('Kishiwada',), ('Hitachi',), ('Nagaoka',), ('Itami',), ('Uji',), ('Suzuka',), ('Hirosaki',), ('Ube',), ('Kodaira',), ('Takaoka',), ('Obihiro',), ('Tomakomai',), ('Saga',), ('Sakura',), ('Kamakura',), ('Mitaka',), ('Izumi',), ('Hino',), ('Hadano',), ('Ashikaga',), ('Tsu',), ('Sayama',), ('Yachiyo',), ('Tsukuba',), ('Sanaa',), ('Aden',), ('Taizz',), ('Hodeida',), ('al-Zarqa',), ('Irbid',), ('Novi Sad',), ('Ni\u0161',), ('Phnom Penh',), ('Garoua',), ('Calgary',), ('Toronto',), ('North York',), ('Winnipeg',), ('Edmonton',), ('Mississauga',), ('Scarborough',), ('Vancouver',), ('Etobicoke',), ('London',), ('Hamilton',), ('Ottawa',), ('Laval',), ('Surrey',), ('Brampton',), ('Windsor',), ('Saskatoon',), ('Kitchener',), ('Markham',), ('Regina',), ('Burnaby',), ('Qu\u00e9bec',), ('Qaraghandy',), ('Shymkent',), ('Taraz',), ('Astana',), ('\u00d6skemen',), ('Pavlodar',), ('Semey',), ('Aqt\u00f6be',), ('Qostanay',), ('Petropavl',), ('Oral',), ('Temirtau',), ('Mombasa',), ('Kisumu',), ('Nakuru',), ('Bangui',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai\u00b4an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma\u00b4anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei\u00b4an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Jining',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Bishkek',), ('Osh',), ('Cartagena',), ('C\u00facuta',), ('Bucaramanga',), ('Ibagu\u00e9',), ('Pereira',), ('Santa Marta',), ('Manizales',), ('Bello',), ('Pasto',), ('Neiva',), ('Soledad',), ('Armenia',), ('Villavicencio',), ('Soacha',), ('Valledupar',), ('Monter\u00eda',), ('Itag\u00fc\u00ed',), ('Palmira',), ('Buenaventura',), ('Floridablanca',), ('Sincelejo',), ('Popay\u00e1n',), ('Barrancabermeja',), ('Pointe-Noire',), ('Lubumbashi',), ('Mbuji-Mayi',), ('Kolwezi',), ('Kisangani',), ('Kananga',), ('Likasi',), ('Bukavu',), ('Kikwit',), ('Tshikapa',), ('Matadi',), ('Mbandaka',), ('Hamhung',), ('Chongjin',), ('Nampo',), ('Sinuiju',), ('Wonsan',), ('Phyongsong',), ('Sariwon',), ('Haeju',), ('Kanggye',), ('Kimchaek',), ('Hyesan',), ('Kaesong',), ('Songnam',), ('Puchon',), ('Suwon',), ('Anyang',), ('Chonju',), ('Chongju',), ('Koyang',), ('Ansan',), ('Pohang',), ('Chang-won',), ('Masan',), ('Kwangmyong',), ('Chonan',), ('Chinju',), ('Iksan',), ('Pyongtaek',), ('Kumi',), ('Uijongbu',), ('Kyongju',), ('Kunsan',), ('Cheju',), ('Kimhae',), ('Sunchon',), ('Mokpo',), ('Yong-in',), ('Wonju',), ('Kunpo',), ('Chunchon',), ('Namyangju',), ('Kangnung',), ('Chungju',), ('Andong',), ('Yosu',), ('Kyongsan',), ('Paju',), ('Yangsan',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Zagreb',), ('Split',), ('Rijeka',), ('Santiago de Cuba',), ('Camag\u00fcey',), ('Holgu\u00edn',), ('Santa Clara',), ('Guant\u00e1namo',), ('Nicosia',), ('Vientiane',), ('Riga',), ('Maseru',), ('Tripoli',), ('Monrovia',), ('Bengasi',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('El-Aai\u00fan',), ('Macao',), ('Antananarivo',), ('Skopje',), ('Blantyre',), ('Lilongwe',), ('Ipoh',), ('Johor Baharu',), ('Petaling Jaya',), ('Kelang',), ('Kuala Terengganu',), ('Pinang',), ('Kota Bharu',), ('Kuantan',), ('Taiping',), ('Seremban',), ('Bamako',), ('Rabat',), ('Marrakech',), ('F\u00e8s',), ('Tanger',), ('Sal\u00e9',), ('Mekn\u00e8s',), ('Oujda',), ('K\u00e9nitra',), ('T\u00e9touan',), ('Safi',), ('Nouakchott',), ('Naucalpan de Ju\u00e1rez',), ('Mexicali',), ('Culiac\u00e1n',), ('Acapulco de Ju\u00e1rez',), ('Tlalnepantla de Baz',), ('M\u00e9rida',), ('Chihuahua',), ('San Luis Potos\u00ed',), ('Guadalupe',), ('Toluca',), ('Aguascalientes',), ('Quer\u00e9taro',), ('Morelia',), ('Hermosillo',), ('Saltillo',), ('Torre\u00f3n',), ('Centro (Villahermosa)',), ('San Nicol\u00e1s de los Garza',), ('Durango',), ('Chimalhuac\u00e1n',), ('Tlaquepaque',), ('Atizap\u00e1n de Zaragoza',), ('Veracruz',), ('Cuautitl\u00e1n Izcalli',), ('Irapuato',), ('Tuxtla Guti\u00e9rrez',), ('Tultitl\u00e1n',), ('Reynosa',), ('Benito Ju\u00e1rez',), ('Matamoros',), ('Xalapa',), ('Celaya',), ('Mazatl\u00e1n',), ('Ensenada',), ('Ahome',), ('Cajeme',), ('Cuernavaca',), ('Tonal\u00e1',), ('Valle de Chalco Solidaridad',), ('Nuevo Laredo',), ('Tepic',), ('Tampico',), ('Ixtapaluca',), ('Apodaca',), ('Guasave',), ('G\u00f3mez Palacio',), ('Tapachula',), ('Nicol\u00e1s Romero',), ('Coatzacoalcos',), ('Uruapan',), ('Victoria',), ('Oaxaca de Ju\u00e1rez',), ('Coacalco de Berrioz\u00e1bal',), ('Pachuca de Soto',), ('General Escobedo',), ('Salamanca',), ('Santa Catarina',), ('Tehuac\u00e1n',), ('Chalco',), ('C\u00e1rdenas',), ('Campeche',), ('La Paz',), ('Oth\u00f3n P. Blanco (Chetumal)',), ('Texcoco',), ('La Paz',), ('Metepec',), ('Monclova',), ('Huixquilucan',), ('Chilpancingo de los Bravo',), ('Puerto Vallarta',), ('Fresnillo',), ('Ciudad Madero',), ('Soledad de Graciano S\u00e1nchez',), ('San Juan del R\u00edo',), ('San Felipe del Progreso',), ('C\u00f3rdoba',), ('Tec\u00e1mac',), ('Ocosingo',), ('Carmen',), ('L\u00e1zaro C\u00e1rdenas',), ('Jiutepec',), ('Papantla',), ('Comalcalco',), ('Zamora',), ('Chisinau',), ('Tiraspol',), ('Ulan Bator',), ('Matola',), ('Beira',), ('Nampula',), ('Chimoio',), ('Mandalay',), ('Moulmein (Mawlamyine)',), ('Pegu (Bago)',), ('Bassein (Pathein)',), ('Windhoek',), ('Kathmandu',), ('Niamey',), ('Ogbomosho',), ('Kano',), ('Oshogbo',), ('Ilorin',), ('Abeokuta',), ('Port Harcourt',), ('Zaria',), ('Ilesha',), ('Onitsha',), ('Iwo',), ('Ado-Ekiti',), ('Abuja',), ('Kaduna',), ('Mushin',), ('Maiduguri',), ('Enugu',), ('Ede',), ('Aba',), ('Ife',), ('Ila',), ('Oyo',), ('Ikerre',), ('Benin City',), ('Iseyin',), ('Katsina',), ('Jos',), ('Sokoto',), ('Ilobu',), ('Offa',), ('Ikorodu',), ('Ilawe-Ekiti',), ('Owo',), ('Ikirun',), ('Shaki',), ('Calabar',), ('Ondo',), ('Akure',), ('Oslo',), ('Bergen',), ('Bouak\u00e9',), ('Quetta',), ('Islamabad',), ('Sargodha',), ('Sialkot',), ('Bahawalpur',), ('Sukkur',), ('Jhang',), ('Sheikhupura',), ('Larkana',), ('Gujrat',), ('Mardan',), ('Kasur',), ('Rahim Yar Khan',), ('Sahiwal',), ('Okara',), ('Wah',), ('Dera Ghazi Khan',), ('Mirpur Khas',), ('Nawabshah',), ('Mingora',), ('Chiniot',), ('Ciudad de Panam\u00e1',), ('San Miguelito',), ('Port Moresby',), ('Asunci\u00f3n',), ('Arequipa',), ('Trujillo',), ('Chiclayo',), ('Callao',), ('Iquitos',), ('Chimbote',), ('Huancayo',), ('Piura',), ('Cusco',), ('Pucallpa',), ('Tacna',), ('Ica',), ('Lisboa',), ('Porto',), ('San Juan',), ('Bayam\u00f3n',), ('Ponce',), ('Carolina',), ('L\u00f3dz',), ('Krak\u00f3w',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzesz\u00f3w',), ('Doha',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-\u00c9tienne',), ('Toulon',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('T\u00e2rgu Mures',), ('Kigali',), ('Stockholm',), ('Gothenburg [G\u00f6teborg]',), ('Malm\u00f6',), ('Uppsala',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('D\u00fcsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('N\u00fcrnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('M\u00fcnster',), ('M\u00f6nchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('L\u00fcbeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbr\u00fccken',), ('Mainz',), ('Hamm',), ('Herne',), ('M\u00fclheim an der Ruhr',), ('Solingen',), ('Osnabr\u00fcck',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Ndola',), ('Kitwe',), ('Medina',), ('al-Dammam',), ('al-Taif',), ('Tabuk',), ('Burayda',), ('al-Hufuf',), ('al-Mubarraz',), ('Khamis Mushayt',), ('Hail',), ('Pikine',), ('Dakar',), ('Thi\u00e8s',), ('Kaolack',), ('Ziguinchor',), ('Freetown',), ('Bratislava',), ('Ko\u0161ice',), ('Ljubljana',), ('Colombo',), ('Dehiwala',), ('Moratuwa',), ('Sharq al-Nil',), ('Port Sudan',), ('Kassala',), ('Obeid',), ('Nyala',), ('Wad Madani',), ('al-Qadarif',), ('Kusti',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [\u00c5bo]',), ('Z\u00fcrich',), ('Geneve',), ('Basel',), ('Hims',), ('Hama',), ('Latakia',), ('Dushanbe',), ('Khujand',), ('Tainan',), ('Panchiao',), ('Chungho',), ('Keelung (Chilung)',), ('Sanchung',), ('Hsinchuang',), ('Hsinchu',), ('Chungli',), ('Fengshan',), ('Taoyuan',), ('Chiayi',), ('Hsintien',), ('Changhwa',), ('Yungho',), ('Tucheng',), ('Pingtung',), ('Yungkang',), ('Pingchen',), ('Tali',), ('Taiping',), ('Pate',), ('Fengyuan',), ('Luchou',), ('Dodoma',), ('Mwanza',), ('K\u00f8benhavn',), ('\u00c5rhus',), ('Odense',), ('Aalborg',), ('Nonthaburi',), ('Nakhon Ratchasima',), ('Chiang Mai',), ('Lom\u00e9',), ('N\u00b4Djam\u00e9na',), ('Brno',), ('Ostrava',), ('Plzen',), ('Tunis',), ('Sfax',), ('Ariana',), ('Ettadhamen',), ('Gaziantep',), ('Konya',), ('Mersin (I\u00e7el)',), ('Antalya',), ('Diyarbakir',), ('Kayseri',), ('Eskisehir',), ('Sanliurfa',), ('Samsun',), ('Malatya',), ('Gebze',), ('Denizli',), ('Sivas',), ('Erzurum',), ('Tarsus',), ('Kahramanmaras',), ('El\u00e2zig',), ('Van',), ('Sultanbeyli',), ('Izmit (Kocaeli)',), ('Manisa',), ('Batman',), ('Balikesir',), ('Sakarya (Adapazari)',), ('Ashgabat',), ('Ch\u00e4rjew',), ('Kampala',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('T\u0161ernigiv',), ('T\u0161erkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('T\u0161ernivtsi',), ('Rivne',), ('Krement\u0161uk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kert\u0161',), ('Debrecen',), ('Miskolc',), ('Auckland',), ('Christchurch',), ('Manukau',), ('North Shore',), ('Waitakere',), ('Wellington',), ('Namangan',), ('Samarkand',), ('Andijon',), ('Buhoro',), ('Karsi',), ('Nukus',), ('K\u00fckon',), ('Fargona',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovit\u0161i',), ('Barquisimeto',), ('Valencia',), ('Ciudad Guayana',), ('Petare',), ('Maracay',), ('Barcelona',), ('Matur\u00edn',), ('San Crist\u00f3bal',), ('Ciudad Bol\u00edvar',), ('Cuman\u00e1',), ('M\u00e9rida',), ('Cabimas',), ('Barinas',), ('Turmero',), ('Baruta',), ('Puerto Cabello',), ('Santa Ana de Coro',), ('Los Teques',), ('Punto Fijo',), ('Guarenas',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje T\u0161elny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('T\u0161eboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sot\u0161i',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahat\u0161kala',), ('T\u0161erepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('T\u0161ita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Jo\u0161kar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Nalt\u0161ik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagove\u0161t\u0161ensk',), ('\u0160ahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamt\u0161atski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novot\u0161erkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Haiphong',), ('Da Nang',), ('Bi\u00ean Hoa',), ('Nha Trang',), ('Hue',), ('Can Tho',), ('Cam Pha',), ('Nam Dinh',), ('Quy Nhon',), ('Tallinn',), ('San Jose',), ('Indianapolis',), ('San Francisco',), ('Jacksonville',), ('Columbus',), ('Austin',), ('Baltimore',), ('Memphis',), ('Milwaukee',), ('Boston',), ('Washington',), ('Nashville-Davidson',), ('El Paso',), ('Seattle',), ('Denver',), ('Charlotte',), ('Fort Worth',), ('Portland',), ('Oklahoma City',), ('Tucson',), ('New Orleans',), ('Las Vegas',), ('Cleveland',), ('Long Beach',), ('Albuquerque',), ('Kansas City',), ('Fresno',), ('Virginia Beach',), ('Atlanta',), ('Sacramento',), ('Oakland',), ('Mesa',), ('Tulsa',), ('Omaha',), ('Minneapolis',), ('Honolulu',), ('Miami',), ('Colorado Springs',), ('Saint Louis',), ('Wichita',), ('Santa Ana',), ('Pittsburgh',), ('Arlington',), ('Cincinnati',), ('Anaheim',), ('Toledo',), ('Tampa',), ('Buffalo',), ('Saint Paul',), ('Corpus Christi',), ('Aurora',), ('Raleigh',), ('Newark',), ('Lexington-Fayette',), ('Anchorage',), ('Louisville',), ('Riverside',), ('Saint Petersburg',), ('Bakersfield',), ('Stockton',), ('Birmingham',), ('Jersey City',), ('Norfolk',), ('Baton Rouge',), ('Hialeah',), ('Lincoln',), ('Greensboro',), ('Plano',), ('Rochester',), ('Glendale',), ('Akron',), ('Garland',), ('Madison',), ('Fort Wayne',), ('Fremont',), ('Scottsdale',), ('Montgomery',), ('Shreveport',), ('Augusta-Richmond County',), ('Lubbock',), ('Chesapeake',), ('Mobile',), ('Des Moines',), ('Grand Rapids',), ('Richmond',), ('Yonkers',), ('Spokane',), ('Glendale',), ('Tacoma',), ('Irving',), ('Huntington Beach',), ('Modesto',), ('Durham',), ('Columbus',), ('Orlando',), ('Boise City',), ('Winston-Salem',), ('San Bernardino',), ('Jackson',), ('Little Rock',), ('Salt Lake City',), ('Reno',), ('Newport News',), ('Chandler',), ('Laredo',), ('Henderson',), ('Arlington',), ('Knoxville',), ('Amarillo',), ('Providence',), ('Chula Vista',), ('Worcester',), ('Oxnard',), ('Dayton',), ('Garden Grove',), ('Oceanside',), ('Bulawayo',), ('Chitungwiza',), ('Mount Darwin',), ('Gaza',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "8": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 8,
    "query": "Count the number of paragraphs.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Paragraphs"
      ],
      "observations": [
        "[(15,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "9": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 9,
    "query": "Find the average age of losers and winners of all matches.",
    "turn_history": {
      "actions": [
        "SELECT AVG(DATEDIFF(CURRENT_DATE, birth_date)/365) AS avg_age FROM players WHERE player_id IN (SELECT winner_id FROM matches UNION SELECT loser_id FROM matches)"
      ],
      "observations": [
        "[(None,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "10": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 10,
    "query": "List the title of all cartoons in alphabetical order.",
    "turn_history": {
      "actions": [
        "SELECT Title FROM Cartoon ORDER BY Title ASC"
      ],
      "observations": [
        "[('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "11": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 11,
    "query": "Which countries in europe have at least 3 car manufacturers?",
    "turn_history": {
      "actions": [
        "SELECT countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryName = car_makers.Country WHERE countries.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Maker) >= 3"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "12": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 12,
    "query": "Please show the record formats of orchestras in ascending order of count.",
    "turn_history": {
      "actions": [
        "SELECT Major_Record_Format, COUNT(*) AS count FROM orchestra GROUP BY Major_Record_Format ORDER BY count ASC"
      ],
      "observations": [
        "[('CD / LP', 1), ('DVD', 1), ('CD', 10)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "13": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 13,
    "query": "How many people live in Asia, and what is the largest GNP among them?",
    "turn_history": {
      "actions": [
        "SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'"
      ],
      "observations": [
        "[(Decimal('3705025700'), 3787042.0)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "14": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 14,
    "query": "What is the maximum and minimum share for the TV series?",
    "turn_history": {
      "actions": [
        "SELECT MAX(Share), MIN(Share) FROM TV_series"
      ],
      "observations": [
        "[(9.0, 5.0)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "15": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 15,
    "query": "What are the names of the teachers ordered by ascending age?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM teacher ORDER BY Age ASC"
      ],
      "observations": [
        "[('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "16": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 16,
    "query": "Please show the most common citizenship of singers.",
    "turn_history": {
      "actions": [
        "SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1"
      ],
      "observations": [
        "[('United States', 4)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "17": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 17,
    "query": "What is the accelerate of the car make amc hornet sportabout (sw)?",
    "turn_history": {
      "actions": [
        "SELECT Accelerate FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  JOIN car_makers ON model_list.Maker = car_makers.Maker  WHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "18": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 18,
    "query": "What are the date and the operating professional's first name of each treatment?",
    "turn_history": {
      "actions": [
        "SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id"
      ],
      "observations": [
        "[(datetime.datetime(2018, 3, 19, 4, 39, 54), 'Monte'), (datetime.datetime(2018, 3, 15, 20, 25, 34), 'Domenica'), (datetime.datetime(2018, 3, 8, 5, 26, 23), 'Vernice'), (datetime.datetime(2018, 3, 1, 4, 14, 46), 'Karley'), (datetime.datetime(2018, 3, 23, 13, 52, 10), 'Sigurd'), (datetime.datetime(2018, 3, 11, 4, 23, 15), 'Vernice'), (datetime.datetime(2018, 3, 10, 11, 45, 58), 'Sigurd'), (datetime.datetime(2018, 3, 24, 22, 25, 58), 'Ruben'), (datetime.datetime(2018, 3, 14, 19, 10, 40), 'Domenica'), (datetime.datetime(2018, 2, 28, 17, 9, 43), 'Velva'), (datetime.datetime(2018, 3, 13, 12, 22, 58), 'Danny'), (datetime.datetime(2018, 3, 16, 10, 27, 36), 'Monte'), (datetime.datetime(2018, 2, 26, 9, 8, 53), 'Karley'), (datetime.datetime(2018, 3, 4, 20, 33, 43), 'Monte'), (datetime.datetime(2018, 3, 15, 19, 10, 2), 'Ruben')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "19": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 19,
    "query": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
    "turn_history": {
      "actions": [
        "SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "20": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 20,
    "query": "What are the names of all the countries that became independent after 1950?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE IndepYear > 1950"
      ],
      "observations": [
        "[('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('C\u00f4te d\u2019Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "21": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 21,
    "query": "What are all the possible breed type and size type combinations?",
    "turn_history": {
      "actions": [
        "SELECT breed_name, size_description FROM Breeds, Sizes"
      ],
      "observations": [
        "[('Husky', 'Large'), ('Eskimo', 'Large'), ('Bulldog', 'Large'), ('Husky', 'Medium'), ('Eskimo', 'Medium'), ('Bulldog', 'Medium'), ('Husky', 'Small'), ('Eskimo', 'Small'), ('Bulldog', 'Small')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "22": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 22,
    "query": "What are the minimum and maximum number of products across all the shops?",
    "turn_history": {
      "actions": [
        "SELECT MIN(Number_products), MAX(Number_products) FROM shop"
      ],
      "observations": [
        "[(1600, 15000)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "23": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 23,
    "query": "How many pets are owned by students that have an age greater than 20?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Has_Pet  INNER JOIN Student ON Has_Pet.StuID = Student.StuID  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Student.Age > 20"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "24": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 24,
    "query": "Give the names of poker players who have earnings above 300000.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Earnings > 300000"
      ],
      "observations": [
        "[('Aleksey Ostapenko',), ('Maksim Botin',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "25": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 25,
    "query": "What is the horsepower of the car with the largest accelerate?",
    "turn_history": {
      "actions": [
        "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)"
      ],
      "observations": [
        "[('65.0',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "26": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 26,
    "query": "Give the mean GNP and total population of nations which are considered US territory.",
    "turn_history": {
      "actions": [
        "SELECT AVG(GNP), SUM(Population) FROM country WHERE Continent = 'North America' AND Region = 'Central America' AND GovernmentForm LIKE '%US%'"
      ],
      "observations": [
        "[(None, None)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "27": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 27,
    "query": "How many players are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM players"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "28": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 28,
    "query": "Which abbreviation corresponds to Jetblue Airways?",
    "turn_history": {
      "actions": [
        "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'"
      ],
      "observations": [
        "[('JetBlue',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "29": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 29,
    "query": "What is the average horsepower of the cars before 1980?",
    "turn_history": {
      "actions": [
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980"
      ],
      "observations": [
        "[(147.34615384615384,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "30": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 30,
    "query": "What is the ship id and name that caused most total injuries?",
    "turn_history": {
      "actions": [
        "SELECT caused_by_ship_id, name FROM ship INNER JOIN death ON ship.id = death.caused_by_ship_id GROUP BY caused_by_ship_id, name ORDER BY SUM(injured) DESC LIMIT 1"
      ],
      "observations": [
        "[(4, 'HMS Avon')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "31": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 31,
    "query": "How many flights arriving in Aberdeen city?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "32": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 32,
    "query": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
    "turn_history": {
      "actions": [
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC"
      ],
      "observations": [
        "[('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kentt\u00e4'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wikl\u00f6f Holding Arena')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "33": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 33,
    "query": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
    "turn_history": {
      "actions": [
        "SELECT student_course_id, COUNT(transcript_id) AS num_transcripts FROM Transcript_Contents GROUP BY student_course_id HAVING num_transcripts = (SELECT COUNT(DISTINCT transcript_id) FROM Transcript_Contents)"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "34": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 34,
    "query": "Show the names of high schoolers who have likes, and numbers of likes for each.",
    "turn_history": {
      "actions": [
        "SELECT Highschooler.name, COUNT(Likes.liked_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(Likes.liked_id) > 0"
      ],
      "observations": [
        "[('John', 1), ('Gabriel', 1), ('Austin', 1), ('Alexis', 1), ('Brittany', 1), ('Kyle', 1), ('Cassandra', 1), ('Gabriel', 1), ('Andrew', 1), ('Jessica', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "35": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 35,
    "query": "Show the names of high school students and their corresponding number of friends.",
    "turn_history": {
      "actions": [
        "SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_of_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY Highschooler.name"
      ],
      "observations": [
        "[('Alexis', 2), ('Andrew', 3), ('Austin', 1), ('Brittany', 0), ('Cassandra', 1), ('Gabriel', 2), ('Gabriel', 1), ('Haley', 1), ('Jessica', 1), ('John', 0), ('Jordan', 1), ('Jordan', 2), ('Kris', 2), ('Kyle', 1), ('Logan', 1), ('Tiffany', 1)]"
      ],
      "rewards": [
        0.875
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.875,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "36": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 36,
    "query": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
    "turn_history": {
      "actions": [
        "SELECT first_name FROM Students  INNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id  WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'"
      ],
      "observations": [
        "[('Hobart',), ('Warren',), ('Jarvis',), ('Delaney',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "37": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 37,
    "query": "What is the average weight for each type of pet?",
    "turn_history": {
      "actions": [
        "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType"
      ],
      "observations": [
        "[('cat', 12.0), ('dog', 11.350000000000001)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "38": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 38,
    "query": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
    "turn_history": {
      "actions": [
        "SELECT battle.name, battle.date FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta')"
      ],
      "observations": [
        "[('Siege of Constantinople', '1235'), ('Siege of Constantinople', '1235')]"
      ],
      "rewards": [
        0.5
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.5,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "39": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 39,
    "query": "List all singer names in concerts in year 2014.",
    "turn_history": {
      "actions": [
        "SELECT singer.Name FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID INNER JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.Year = 2014"
      ],
      "observations": [
        "[('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "40": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 40,
    "query": "What are the different first names and ages of the students who do have pets?",
    "turn_history": {
      "actions": [
        "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) ORDER BY Fname"
      ],
      "observations": [
        "[('Linda', 18), ('Tracy', 19)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "41": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 41,
    "query": "What is the horsepower of the car with the greatest accelerate?",
    "turn_history": {
      "actions": [
        "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)"
      ],
      "observations": [
        "[('65.0',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "42": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 42,
    "query": "What country is Jetblue Airways affiliated with?",
    "turn_history": {
      "actions": [
        "SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'"
      ],
      "observations": [
        "[('USA',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "43": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 43,
    "query": "How many car models were produced by the maker with full name American Motor Company?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM model_list WHERE Maker = 'American Motor Company'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "44": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 44,
    "query": "Find the first name and gender of student who have more than one pet.",
    "turn_history": {
      "actions": [
        "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)"
      ],
      "observations": [
        "[('Tracy', 'F')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "45": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 45,
    "query": "Find the number of pets whose weight is heavier than 10.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Pets WHERE weight > 10"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "46": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 46,
    "query": "What is the description of the treatment type that costs the least money in total?",
    "turn_history": {
      "actions": [
        "SELECT treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1"
      ],
      "observations": [
        "[('Take for a Walk',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "47": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 47,
    "query": "How many battles did not lose any ship with tonnage '225'?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT DISTINCT lost_in_battle FROM ship WHERE tonnage = 225)"
      ],
      "observations": [
        "[(7,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "48": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 48,
    "query": "Show the names of all high schoolers in grade 10.",
    "turn_history": {
      "actions": [
        "SELECT name FROM Highschooler WHERE grade = 10"
      ],
      "observations": [
        "[('Haley',), ('Kris',), ('Brittany',), ('Andrew',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "49": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 49,
    "query": "list all cartoon titles and their directors ordered by their air date",
    "turn_history": {
      "actions": [
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date"
      ],
      "observations": [
        "[('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "50": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 50,
    "query": "What is the area code in which the most voters voted?",
    "turn_history": {
      "actions": [
        "SELECT state, COUNT(*) AS vote_count FROM VOTES GROUP BY state ORDER BY vote_count DESC LIMIT 1"
      ],
      "observations": [
        "[('NY', 2)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "51": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 51,
    "query": "For each citizenship, what is the maximum net worth?",
    "turn_history": {
      "actions": [
        "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
      ],
      "observations": [
        "[('France', 30.0), ('United States', 28.8), ('Chile', 17.4), ('Australia', 17.0), ('Germany', 14.3)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "52": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 52,
    "query": "What are the names of all cartoons directed by Ben Jones?",
    "turn_history": {
      "actions": [
        "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'"
      ],
      "observations": [
        "[('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "53": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 53,
    "query": "Find the weight of the youngest dog.",
    "turn_history": {
      "actions": [
        "SELECT MIN(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')"
      ],
      "observations": [
        "[(9.3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "54": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 54,
    "query": "What the smallest version number and its template type code?",
    "turn_history": {
      "actions": [
        "SELECT MIN(Version_Number), Template_Type_Code FROM Templates"
      ],
      "observations": [
        "Error executing query: In aggregated query without GROUP BY, expression #2 of SELECT list contains nonaggregated column 'cre_doc_template_mgt.Templates.Template_Type_Code'; this is incompatible with sql_mode=only_full_group_by"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "55": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 55,
    "query": "How many departments offer any degree?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs"
      ],
      "observations": [
        "[(10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "56": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 56,
    "query": "What is the template type descriptions for template type code \"AD\".",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'"
      ],
      "observations": [
        "[('Advertisement',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "57": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 57,
    "query": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
    "turn_history": {
      "actions": [
        "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'"
      ],
      "observations": [
        "[('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "58": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 58,
    "query": "Find the first name and age of students who have a pet.",
    "turn_history": {
      "actions": [
        "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)"
      ],
      "observations": [
        "[('Linda', 18), ('Tracy', 19)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "59": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 59,
    "query": "Show the student IDs and numbers of friends corresponding to each.",
    "turn_history": {
      "actions": [
        "SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id ORDER BY student_id"
      ],
      "observations": [
        "[(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "60": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 60,
    "query": "What are the distinct template type descriptions for the templates ever used by any document?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID"
      ],
      "observations": [
        "[('Advertisement',), ('Book',), ('Paper',), ('Presentation',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "61": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 61,
    "query": "What is the average edispl of the cars of model volvo?",
    "turn_history": {
      "actions": [
        "SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT Id FROM car_names WHERE Make = 'volvo')"
      ],
      "observations": [
        "[(None,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "62": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 62,
    "query": "Find the name of the shops that do not hire any employee.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)"
      ],
      "observations": [
        "[('FC Honka',), ('KuPS',), ('IFK Mariehamn',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "63": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 63,
    "query": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
    "turn_history": {
      "actions": [
        "SELECT Country, COUNT(*) AS Num_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Num_of_Channels DESC LIMIT 1"
      ],
      "observations": [
        "[('Italy', 12)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "64": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 64,
    "query": "Show all template ids and number of documents using each template.",
    "turn_history": {
      "actions": [
        "SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Num_Documents FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID"
      ],
      "observations": [
        "[(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (9, 0), (10, 1), (11, 2), (14, 2), (15, 0), (16, 0), (18, 0), (19, 0), (20, 1), (21, 1), (22, 1), (23, 0), (24, 0), (25, 1)]"
      ],
      "rewards": [
        0.631578947368421
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.631578947368421,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "65": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 65,
    "query": "What are the names of the singers who performed in a concert in 2014?",
    "turn_history": {
      "actions": [
        "SELECT singer.Name  FROM singer  JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID  WHERE concert.Year = 2014"
      ],
      "observations": [
        "[('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "66": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 66,
    "query": "Show the stadium name and the number of concerts in each stadium.",
    "turn_history": {
      "actions": [
        "SELECT stadium.Name, COUNT(concert.concert_ID) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name"
      ],
      "observations": [
        "[(\"Stark's Park\", 1), ('Somerset Park', 2), ('Bayview Stadium', 0), ('Hampden Park', 0), ('Forthbank Stadium', 0), ('Gayfield Park', 0), ('Recreation Park', 1), ('Balmoor', 1), ('Glebe Park', 1)]"
      ],
      "rewards": [
        0.5555555555555556
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.5555555555555556,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "67": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 67,
    "query": "What are the orchestras that do not have any performances?",
    "turn_history": {
      "actions": [
        "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
      ],
      "observations": [
        "[('San Francisco Symphony Orchestra',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "68": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 68,
    "query": "What are the type codes and descriptions for all template types?",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types"
      ],
      "observations": [
        "[('AD', 'Advertisement'), ('BK', 'Book'), ('CV', 'CV'), ('PP', 'Paper'), ('PPT', 'Presentation')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "69": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 69,
    "query": "What are the names of the teachers who teach at least two courses?",
    "turn_history": {
      "actions": [
        "SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2"
      ],
      "observations": [
        "[('Anne Walker',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "70": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 70,
    "query": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
    "turn_history": {
      "actions": [
        "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number = (     SELECT contestant_number     FROM VOTES     GROUP BY contestant_number     ORDER BY COUNT(*) ASC     LIMIT 1 )"
      ],
      "observations": [
        "[(2, 'Tabatha Gehling')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "71": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 71,
    "query": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
    "turn_history": {
      "actions": [
        "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955"
      ],
      "observations": [
        "[('France',), ('Chile',), ('United States',), ('Germany',), ('United States',)]"
      ],
      "rewards": [
        0.2
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.2,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "72": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 72,
    "query": "What is the average, minimum, and maximum age of all singers from France?",
    "turn_history": {
      "actions": [
        "SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'"
      ],
      "observations": [
        "[(Decimal('34.5000'), 25, 43)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "73": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 73,
    "query": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "74": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 74,
    "query": "What are years of founding for orchestras that have had more than a single performance?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT orchestra.Year_of_Founded FROM orchestra INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Orchestra_ID HAVING COUNT(DISTINCT performance.Performance_ID) > 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "75": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 75,
    "query": "What are the names of tournaments that have more than 10 matches?",
    "turn_history": {
      "actions": [
        "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "76": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 76,
    "query": "How many orchestras does each record company manage?",
    "turn_history": {
      "actions": [
        "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Num_Orchestras FROM orchestra GROUP BY Record_Company"
      ],
      "observations": [
        "[('Columbia Masterworks', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Koch Records / Naxos Records', 1), ('Kultur', 1), ('Mercury Records', 1), ('Philips', 1), ('Philips Classics Records', 1), ('RCA', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "77": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 77,
    "query": "What are different nationalities of people and the corresponding number of people from each nation?",
    "turn_history": {
      "actions": [
        "SELECT Nationality, COUNT(*) as Number_of_People FROM people GROUP BY Nationality"
      ],
      "observations": [
        "[('Russia', 6), ('Bulgaria', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "78": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 78,
    "query": "In 1980, how many cars were made?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM cars_data WHERE Year = 1980"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "79": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 79,
    "query": "How many countries have governments that are republics?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'"
      ],
      "observations": [
        "[(143,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "80": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 80,
    "query": "What are the first names of all players, and their average rankings?",
    "turn_history": {
      "actions": [
        "SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "81": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 81,
    "query": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
    "turn_history": {
      "actions": [
        "SELECT Airline FROM airlines WHERE Airline IN (     SELECT Airline FROM flights     WHERE SourceAirport = 'APG' ) AND Airline IN (     SELECT Airline FROM flights     WHERE SourceAirport = 'CVO' )"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "82": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 82,
    "query": "Please show the different record companies and the corresponding number of orchestras.",
    "turn_history": {
      "actions": [
        "SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company"
      ],
      "observations": [
        "[('Mercury Records', 1), ('Columbia Masterworks', 1), ('Philips', 1), ('Kultur', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('Philips Classics Records', 1), ('Koch Records / Naxos Records', 1), ('EMI', 1), ('RCA', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "83": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 83,
    "query": "Find the abbreviation and country of the airline that has fewest number of flights?",
    "turn_history": {
      "actions": [
        "SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)"
      ],
      "observations": [
        "[('UAL', 'USA')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "84": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 84,
    "query": "List the language used least number of TV Channel. List language and number of TV Channel.",
    "turn_history": {
      "actions": [
        "SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1"
      ],
      "observations": [
        "[('English', 3)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "85": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 85,
    "query": "Return the codes of countries for which Spanish is the predominantly spoken language.",
    "turn_history": {
      "actions": [
        "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'"
      ],
      "observations": [
        "[('ARG',), ('BOL',), ('CHL',), ('COL',), ('CRI',), ('CUB',), ('DOM',), ('ECU',), ('ESP',), ('GTM',), ('HND',), ('MEX',), ('NIC',), ('PAN',), ('PER',), ('PRI',), ('PRY',), ('SLV',), ('URY',), ('VEN',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "86": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 86,
    "query": "What are the names of conductors, ordered by age?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM conductor ORDER BY Age"
      ],
      "observations": [
        "[('Antal Dor\u00e1ti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "87": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 87,
    "query": "What is the total count of teachers?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM teacher"
      ],
      "observations": [
        "[(7,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "88": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 88,
    "query": "Find the number of professionals who have ever treated dogs.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT professional_id) FROM Treatments"
      ],
      "observations": [
        "[(8,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "89": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 89,
    "query": "how many cars were produced in 1980?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM cars_data WHERE Year = 1980"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "90": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 90,
    "query": "What are all the makers and models?",
    "turn_history": {
      "actions": [
        "SELECT Maker, Model FROM model_list"
      ],
      "observations": [
        "[(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "91": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 91,
    "query": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
    "turn_history": {
      "actions": [
        "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'"
      ],
      "observations": [
        "[('Sky Famiglia + Sky HD', 'MTV Live HD')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "92": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 92,
    "query": "What is the average miles per gallon of all the cards with 4 cylinders?",
    "turn_history": {
      "actions": [
        "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4"
      ],
      "observations": [
        "[(27.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "93": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 93,
    "query": "How many continents are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Continent) FROM continents"
      ],
      "observations": [
        "[(5,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "94": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 94,
    "query": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "turn_history": {
      "actions": [
        "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open') LIMIT 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "95": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 95,
    "query": "List all document ids with at least two paragraphs.",
    "turn_history": {
      "actions": [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2"
      ],
      "observations": [
        "[(80,), (2394,), (651512,), (16514113,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "96": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 96,
    "query": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
    "turn_history": {
      "actions": [
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
      ],
      "observations": [
        "[('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "97": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 97,
    "query": "What is the name of the museum that had no visitor yet?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)"
      ],
      "observations": [
        "[('Jefferson Development Museum',), ('RiverPark Museum',), ('Place Tower Museum',), ('Central City District Residential Museum',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "98": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 98,
    "query": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
    "turn_history": {
      "actions": [
        "SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')"
      ],
      "observations": [
        "[('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "99": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 99,
    "query": "What are the song titles and singer names?",
    "turn_history": {
      "actions": [
        "SELECT song.Title, singer.Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID"
      ],
      "observations": [
        "[(\"Do They Know It's Christmas\", 'Liliane Bettencourt'), (\"F**k It (I Don't Want You Back)\", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "100": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 100,
    "query": "Return the id of the document with the fewest paragraphs.",
    "turn_history": {
      "actions": [
        "SELECT Document_ID FROM Documents ORDER BY (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) ASC LIMIT 1"
      ],
      "observations": [
        "[(1,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "101": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 101,
    "query": "How many dogs went through any treatments?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT dog_id) FROM Treatments"
      ],
      "observations": [
        "[(9,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "102": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 102,
    "query": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
    "turn_history": {
      "actions": [
        "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND GovernmentForm <> 'Republic'"
      ],
      "observations": [
        "[('ABW',), ('AFG',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BEL',), ('BHR',), ('BHS',), ('BIH',), ('BRA',), ('BRN',), ('BTN',), ('BVT',), ('CHE',), ('CHN',), ('COK',), ('CUB',), ('DEU',), ('DNK',), ('ESH',), ('ESP',), ('FRO',), ('FSM',), ('GLP',), ('GRD',), ('GRL',), ('GUF',), ('HMD',), ('IND',), ('IOT',), ('IRN',), ('JAM',), ('JOR',), ('JPN',), ('KHM',), ('KWT',), ('LBY',), ('LIE',), ('LUX',), ('MAC',), ('MAR',), ('MCO',), ('MDG',), ('MEX',), ('MTQ',), ('MYS',), ('MYT',), ('NCL',), ('NGA',), ('NLD',), ('NOR',), ('NPL',), ('OMN',), ('PCN',), ('PNG',), ('PRI',), ('PRK',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('RUS',), ('SAU',), ('SDN',), ('SGS',), ('SJM',), ('SLB',), ('SPM',), ('SWE',), ('SWZ',), ('THA',), ('TMP',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YUG',)]"
      ],
      "rewards": [
        0.8414634146341463
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.8414634146341463,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "103": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 103,
    "query": "List the cost of each treatment and the corresponding treatment type description.",
    "turn_history": {
      "actions": [
        "SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
      ],
      "observations": [
        "[(Decimal('429.0000'), 'Physical examination'), (Decimal('313.0000'), 'Physical examination'), (Decimal('852.0000'), 'Physical examination'), (Decimal('407.0000'), 'Physical examination'), (Decimal('428.0000'), 'Physical examination'), (Decimal('147.0000'), 'Vaccination'), (Decimal('266.0000'), 'Vaccination'), (Decimal('668.0000'), 'Vaccination'), (Decimal('514.0000'), 'Vaccination'), (Decimal('945.0000'), 'Vaccination'), (Decimal('567.0000'), 'Take for a Walk'), (Decimal('139.0000'), 'Take for a Walk'), (Decimal('681.0000'), 'Take for a Walk'), (Decimal('349.0000'), 'Take for a Walk'), (Decimal('656.0000'), 'Take for a Walk')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "104": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 104,
    "query": "What is the average transcript date?",
    "turn_history": {
      "actions": [
        "SELECT AVG(transcript_date) FROM Transcripts"
      ],
      "observations": [
        "[(Decimal('19900005640986.8000'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "105": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 105,
    "query": "What is the number of the cars with horsepower more than 150?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150"
      ],
      "observations": [
        "[(10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "106": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 106,
    "query": "List the first and last name of all players who are left / L hand in the order of birth date.",
    "turn_history": {
      "actions": [
        "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "107": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 107,
    "query": "What is the degree summary name that has the most number of students enrolled?",
    "turn_history": {
      "actions": [
        "SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1"
      ],
      "observations": [
        "[('Bachelor',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "108": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 108,
    "query": "What are the names of people who are not from Russia?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM people WHERE Nationality <> 'Russia'"
      ],
      "observations": [
        "[('Teodor Salparov',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "109": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 109,
    "query": "Find the first name of students who have both cat and dog pets .",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND StuID IN (     SELECT StuID FROM Has_Pet     INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'dog' )"
      ],
      "observations": [
        "Error executing query: Column 'StuID' in IN/ALL/ANY subquery is ambiguous"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "110": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 110,
    "query": "What is the name of the conductor who has conducted the most orchestras?",
    "turn_history": {
      "actions": [
        "SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1"
      ],
      "observations": [
        "[('Antal Dor\u00e1ti',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "111": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 111,
    "query": "How many countries has more than 2 car makers ?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 2"
      ],
      "observations": [
        "[(1,), (1,), (1,), (1,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "112": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 112,
    "query": "Which language is spoken by the largest number of countries?",
    "turn_history": {
      "actions": [
        "SELECT Language, COUNT(DISTINCT CountryCode) AS NumCountries FROM countrylanguage GROUP BY Language ORDER BY NumCountries DESC LIMIT 1"
      ],
      "observations": [
        "[('English', 60)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "113": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 113,
    "query": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
    "turn_history": {
      "actions": [
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC"
      ],
      "observations": [
        "[('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "114": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 114,
    "query": "For all of the 4 cylinder cars, which model has the most horsepower?",
    "turn_history": {
      "actions": [
        "SELECT Model, MAX(Horsepower) FROM cars_data WHERE Cylinders = 4"
      ],
      "observations": [
        "Error executing query: Unknown column 'Model' in 'field list'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "115": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 115,
    "query": "Give the names of countries that are in Europe and have a population equal to 80000.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "116": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 116,
    "query": "How many dog pets are raised by female students?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'Dog'"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "117": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 117,
    "query": "Which airlines have less than 200 flights?",
    "turn_history": {
      "actions": [
        "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200"
      ],
      "observations": [
        "[(1,), (2,), (3,), (4,), (5,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "118": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 118,
    "query": "Count the number of dogs that went through a treatment.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT dog_id) FROM Treatments"
      ],
      "observations": [
        "[(9,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "119": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 119,
    "query": "Find the distinct breed type and size type combinations for dogs.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs"
      ],
      "observations": [
        "[('ESK', 'LGE'), ('BUL', 'LGE'), ('BUL', 'MED'), ('HUS', 'MED'), ('ESK', 'SML'), ('HUS', 'SML'), ('ESK', 'MED')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "120": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 120,
    "query": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
    "turn_history": {
      "actions": [
        "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'"
      ],
      "observations": [
        "[('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "121": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 121,
    "query": "How many official languages are spoken in Afghanistan?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "122": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 122,
    "query": "List the first name of all the professionals along with the description of the treatment they have done.",
    "turn_history": {
      "actions": [
        "SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
      ],
      "observations": [
        "[('Vernice', 'Physical examination'), ('Vernice', 'Physical examination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Monte', 'Physical examination'), ('Domenica', 'Vaccination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Danny', 'Vaccination'), ('Karley', 'Vaccination'), ('Monte', 'Take for a Walk'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Monte', 'Take for a Walk'), ('Ruben', 'Take for a Walk')]"
      ],
      "rewards": [
        0.8
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.8,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "123": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 123,
    "query": "How many high schoolers are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Highschooler"
      ],
      "observations": [
        "[(16,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "124": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 124,
    "query": "What is the continent name which Anguilla belongs to?",
    "turn_history": {
      "actions": [
        "SELECT Continent FROM country WHERE Code = 'AIA'"
      ],
      "observations": [
        "[('North America',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "125": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 125,
    "query": "What other details can you tell me about students in reverse alphabetical order?",
    "turn_history": {
      "actions": [
        "SELECT * FROM Students ORDER BY last_name DESC"
      ],
      "observations": [
        "[(13, 9, 8, 'Deon', 'Brooklyn', 'Weimann', '(213)445-0399x85208', 'jhuel@example.com', '68095', datetime.datetime(1986, 2, 24, 21, 12, 23), datetime.datetime(2014, 5, 30, 23, 32, 2), 'assumenda'), (1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', datetime.datetime(1971, 2, 5, 7, 28, 23), datetime.datetime(1971, 5, 17, 19, 28, 49), 'quia'), (11, 14, 4, 'Gregg', 'Mossie', 'Schuppe', '(462)246-7921', 'nbruen@example.org', '494', datetime.datetime(1989, 5, 24, 23, 31, 29), datetime.datetime(1975, 10, 9, 0, 49, 27), 'omnis'), (6, 6, 3, 'Stanford', 'Mona', 'Rogahn', '436.613.7683', 'skassulke@example.net', '248', datetime.datetime(1997, 3, 20, 16, 47, 25), datetime.datetime(2016, 4, 9, 12, 27, 4), 'qui'), (14, 12, 11, 'Jordy', 'Osborne', 'Rempel', '(605)919-3594x3661', 'gracie29@example.com', '34458427', datetime.datetime(2004, 12, 24, 12, 36, 46), datetime.datetime(1999, 8, 24, 0, 7, 10), 'et'), (9, 2, 15, 'Reva', 'Golda', 'Osinski', '(507)365-8405', \"qo'kon@example.com\", '39', datetime.datetime(2017, 1, 4, 8, 10, 25), datetime.datetime(1990, 9, 1, 5, 3, 27), 'nesciunt'), (10, 15, 14, 'Helga', 'Cleve', 'Mohr', '677.401.9382', 'nya.lesch@example.net', '43', datetime.datetime(2009, 9, 25, 0, 14, 25), datetime.datetime(2017, 7, 9, 21, 38, 43), 'rerum'), (12, 14, 9, 'Orrin', 'Neal', 'Kemmer', '(982)153-1469x1733', 'beth42@example.org', '6274274', datetime.datetime(2005, 12, 15, 8, 42, 10), datetime.datetime(2006, 8, 4, 17, 26, 49), 'non'), (15, 2, 9, 'Jett', 'Alberta', 'Jaskolski', '877.549.9067x8723', 'mya88@example.org', '156', datetime.datetime(1982, 6, 19, 13, 15, 18), datetime.datetime(1982, 6, 11, 0, 25, 39), 'omnis'), (7, 15, 3, 'Frida', 'Aisha', 'Huel', '1-879-796-8987x164', 'baumbach.lucious@example.org', '668', datetime.datetime(2018, 3, 13, 9, 56, 22), datetime.datetime(1997, 11, 16, 8, 54, 33), 'dolorum'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', datetime.datetime(2007, 8, 29, 23, 25, 41), datetime.datetime(2007, 3, 31, 9, 53, 19), 'facilis'), (5, 9, 9, 'Milton', 'Vaughn', 'Christiansen', '171-642-5684', 'lhartmann@example.org', '', datetime.datetime(1973, 5, 19, 19, 12, 46), datetime.datetime(2007, 11, 28, 12, 50, 21), 'laborum'), (4, 7, 11, 'Jarvis', 'Aaliyah', 'Carroll', '09700166582', 'jillian26@example.net', '141072406', datetime.datetime(2014, 3, 28, 5, 48, 23), datetime.datetime(2007, 8, 2, 4, 12, 58), 'atque'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', datetime.datetime(1976, 10, 26, 2, 33, 6), datetime.datetime(2013, 10, 5, 17, 41, 28), 'autem'), (8, 1, 5, 'Delaney', 'Judd', 'Ankunding', '03174364122', 'dell43@example.net', '402', datetime.datetime(1982, 2, 14, 8, 46, 35), datetime.datetime(2004, 12, 8, 5, 29, 11), 'voluptatem')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "126": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 126,
    "query": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage >= (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "127": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 127,
    "query": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
    "turn_history": {
      "actions": [
        "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM concert WHERE Year > 2013 GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1)"
      ],
      "observations": [
        "[('Somerset Park', 11998)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "128": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 128,
    "query": "Which continent is Anguilla in?",
    "turn_history": {
      "actions": [
        "SELECT Continent FROM country WHERE Name = 'Anguilla'"
      ],
      "observations": [
        "[('North America',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "129": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 129,
    "query": "What's the name of the course with most number of enrollments?",
    "turn_history": {
      "actions": [
        "SELECT Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC LIMIT 1"
      ],
      "observations": [
        "[('pl',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "130": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 130,
    "query": "What is the count of the car models produced in the United States?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM model_list WHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'United States')"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "131": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 131,
    "query": "Find the number of cartoons directed by each of the listed directors.",
    "turn_history": {
      "actions": [
        "SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by"
      ],
      "observations": [
        "[('Ben Jones', 4), ('Brandon Vietti', 4), ('Michael Chang', 4)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "132": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 132,
    "query": "List the names of employees and sort in ascending order of age.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM employee ORDER BY Age ASC"
      ],
      "observations": [
        "[('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "133": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 133,
    "query": "What are the names and areas of countries with the top 5 largest area?",
    "turn_history": {
      "actions": [
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
      ],
      "observations": [
        "[('Russian Federation', 17075400.0), ('Antarctica', 13120000.0), ('Canada', 9970610.0), ('China', 9572900.0), ('United States', 9363520.0)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "134": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 134,
    "query": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
    "turn_history": {
      "actions": [
        "SELECT country.Name, COUNT(countrylanguage.Language) AS num_languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING num_languages > 2 ORDER BY num_languages DESC"
      ],
      "observations": [
        "[('Canada', 12), ('China', 12), ('India', 12), ('Russian Federation', 12), ('United States', 12), ('Tanzania', 11), ('South Africa', 11), ('Congo, The Democratic Republic of the', 10), ('Iran', 10), ('Kenya', 10), ('Mozambique', 10), ('Nigeria', 10), ('Philippines', 10), ('Sudan', 10), ('Uganda', 10), ('Angola', 9), ('Indonesia', 9), ('Vietnam', 9), ('Australia', 8), ('Austria', 8), ('Cameroon', 8), ('Czech Republic', 8), ('Italy', 8), ('Liberia', 8), ('Myanmar', 8), ('Namibia', 8), ('Pakistan', 8), ('Sierra Leone', 8), ('Chad', 8), ('Togo', 8), ('Benin', 7), ('Bangladesh', 7), ('Denmark', 7), ('Ethiopia', 7), ('Guinea', 7), ('Kyrgyzstan', 7), ('Nepal', 7), ('Ukraine', 7), ('Belgium', 6), ('Burkina Faso', 6), ('Central African Republic', 6), ('Congo', 6), ('Germany', 6), ('Eritrea', 6), ('France', 6), ('Micronesia, Federated States of', 6), ('Georgia', 6), ('Ghana', 6), ('Guinea-Bissau', 6), ('Hungary', 6), ('Japan', 6), ('Kazakstan', 6), ('Latvia', 6), ('Mexico', 6), ('Mali', 6), ('Mongolia', 6), ('Northern Mariana Islands', 6), ('Mauritania', 6), ('Mauritius', 6), ('Malaysia', 6), ('Panama', 6), ('Romania', 6), ('Senegal', 6), ('Sweden', 6), ('Thailand', 6), ('Taiwan', 6), ('Uzbekistan', 6), ('Yugoslavia', 6), ('Zambia', 6), ('Afghanistan', 5), ('Brazil', 5), ('Botswana', 5), ('C\u00f4te d\u2019Ivoire', 5), ('Colombia', 5), ('Comoros', 5), ('Estonia', 5), ('Finland', 5), ('Gambia', 5), ('Guatemala', 5), ('Guam', 5), ('Hong Kong', 5), ('Iraq', 5), ('Lithuania', 5), ('Luxembourg', 5), ('Moldova', 5), ('Macedonia', 5), ('Niger', 5), ('Norway', 5), ('Nauru', 5), ('R\u00e9union', 5), ('Slovakia', 5), ('Aruba', 4), ('Andorra', 4), ('Azerbaijan', 4), ('Bulgaria', 4), ('Belarus', 4), ('Belize', 4), ('Bolivia', 4), ('Brunei', 4), ('Switzerland', 4), ('Chile', 4), ('Costa Rica', 4), ('Spain', 4), ('Gabon', 4), ('Honduras', 4), ('Cambodia', 4), ('Laos', 4), ('Macao', 4), ('Monaco', 4), ('Malawi', 4), ('Nicaragua', 4), ('Netherlands', 4), ('Palau', 4), ('Poland', 4), ('Paraguay', 4), ('Turkmenistan', 4), ('Zimbabwe', 4), ('Albania', 3), ('Netherlands Antilles', 3), ('Argentina', 3), ('American Samoa', 3), ('Burundi', 3), ('Bhutan', 3), ('Djibouti', 3), ('United Kingdom', 3), ('Guyana', 3), ('Israel', 3), ('Jordan', 3), ('Lebanon', 3), ('Liechtenstein', 3), ('Sri Lanka', 3), ('Lesotho', 3), ('Mayotte', 3), ('New Caledonia', 3), ('Peru', 3), ('French Polynesia', 3), ('Singapore', 3), ('Solomon Islands', 3), ('Slovenia', 3), ('Seychelles', 3), ('Tajikistan', 3), ('Trinidad and Tobago', 3), ('Tunisia', 3), ('Turkey', 3), ('Tuvalu', 3), ('Venezuela', 3), ('Virgin Islands, U.S.', 3), ('Vanuatu', 3), ('Samoa', 3)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "135": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 135,
    "query": "Return the names of the 3 most populated countries.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
      ],
      "observations": [
        "[('China',), ('India',), ('United States',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "136": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 136,
    "query": "What is the total surface area of the countries in the Caribbean region?",
    "turn_history": {
      "actions": [
        "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'"
      ],
      "observations": [
        "[(234423.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "137": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 137,
    "query": "Show names of all high school students who do not have any friends.",
    "turn_history": {
      "actions": [
        "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) ORDER BY name ASC"
      ],
      "observations": [
        "[('Brittany',), ('John',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "138": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 138,
    "query": "How many different winners both participated in the WTA Championships and were left handed?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "139": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 139,
    "query": "What is the age and hometown of every teacher?",
    "turn_history": {
      "actions": [
        "SELECT Age, Hometown FROM teacher"
      ],
      "observations": [
        "[('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "140": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 140,
    "query": "What is the department description for the one whose name has the word computer?",
    "turn_history": {
      "actions": [
        "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
      ],
      "observations": [
        "[('error',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "141": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 141,
    "query": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
    "turn_history": {
      "actions": [
        "SELECT PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE LName = 'Smith'"
      ],
      "observations": [
        "Error executing query: Column 'PetID' in field list is ambiguous"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "142": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 142,
    "query": "What is the name and directors of all the cartoons that are ordered by air date?",
    "turn_history": {
      "actions": [
        "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date"
      ],
      "observations": [
        "[('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "143": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 143,
    "query": "How many documents are using the template with type code 'PPT'?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')"
      ],
      "observations": [
        "[(3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "144": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 144,
    "query": "Which city is the most frequent source airport?",
    "turn_history": {
      "actions": [
        "SELECT SourceAirport, COUNT(*) AS Frequency FROM flights GROUP BY SourceAirport ORDER BY Frequency DESC LIMIT 1"
      ],
      "observations": [
        "[('OTS', 3)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "145": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 145,
    "query": "Show the number of high schoolers for each grade.",
    "turn_history": {
      "actions": [
        "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade"
      ],
      "observations": [
        "[(12, 4), (10, 4), (11, 4), (9, 4)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "146": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 146,
    "query": "What is the name and capacity for the stadium with the highest average attendance?",
    "turn_history": {
      "actions": [
        "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)"
      ],
      "observations": [
        "[(\"Stark's Park\", 10104)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "147": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 147,
    "query": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
    "turn_history": {
      "actions": [
        "SELECT Cartoon.Title FROM Cartoon INNER JOIN TV_series ON Cartoon.Channel = TV_series.Channel INNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'"
      ],
      "observations": [
        "[('The Rise of the Blue Beetle!',), ('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',), ('Return of the Fearsome Fangs!',)]"
      ],
      "rewards": [
        0.5
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.5,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "148": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 148,
    "query": "What are the opening year and staff number of the museum named Plaza Museum?",
    "turn_history": {
      "actions": [
        "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'"
      ],
      "observations": [
        "[('2000', 62)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "149": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 149,
    "query": "What is the first, middle, and last name of the earliest school graduate?",
    "turn_history": {
      "actions": [
        "SELECT first_name, middle_name, last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Transcript_Contents ON Student_Enrolment.student_enrolment_id = Transcript_Contents.student_enrolment_id INNER JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id ORDER BY transcript_date ASC LIMIT 1"
      ],
      "observations": [
        "Error executing query: Unknown column 'Transcript_Contents.student_enrolment_id' in 'on clause'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "150": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 150,
    "query": "How many cars have more than 4 cylinders?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4"
      ],
      "observations": [
        "[(22,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "151": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 151,
    "query": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
    "turn_history": {
      "actions": [
        "SELECT t.owner_id, o.last_name FROM treatments t JOIN dogs d ON t.dog_id = d.dog_id JOIN owners o ON d.owner_id = o.owner_id GROUP BY t.owner_id ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1"
      ],
      "observations": [
        "Error executing query: Unknown column 't.owner_id' in 'field list'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "152": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 152,
    "query": "What are the countries having at least one car maker? List name and id.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryName = car_makers.Country"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "153": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 153,
    "query": "Which makers designed more than 3 car models? List full name and the id.",
    "turn_history": {
      "actions": [
        "SELECT Id, FullName FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)"
      ],
      "observations": [
        "[(4, 'General Motors'), (6, 'Chrysler')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "154": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 154,
    "query": "Show paragraph details for paragraph with text 'Korea ' .",
    "turn_history": {
      "actions": [
        "SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'"
      ],
      "observations": [
        "[(7, 2394, 'Korea', None), (510442723, 2394, 'Korea', None)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "155": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 155,
    "query": "How many countries have a republic as their form of government?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'"
      ],
      "observations": [
        "[(122,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "156": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 156,
    "query": "How many different degrees are offered?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs"
      ],
      "observations": [
        "[(15,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "157": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 157,
    "query": "Count the number of poker players.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM poker_player"
      ],
      "observations": [
        "[(5,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "158": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 158,
    "query": "How many different forms of governments are there in Africa?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'"
      ],
      "observations": [
        "[(10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "159": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 159,
    "query": "What are the name, population, and life expectancy of the largest Asian country by land?",
    "turn_history": {
      "actions": [
        "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1"
      ],
      "observations": [
        "[('China', 1277558000, 71.4)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "160": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 160,
    "query": "Which employee received the most awards in evaluations? Give me the employee name.",
    "turn_history": {
      "actions": [
        "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[('George Chuter',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "161": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 161,
    "query": "How many different types of pet are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT PetType) FROM Pets"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "162": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 162,
    "query": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL"
      ],
      "observations": [
        "[('700',), ('701',), ('703',), ('705',), ('706',), ('707',), ('708',), ('709',), ('713',), ('714',), ('715',), ('717',), ('719',)]"
      ],
      "rewards": [
        0.8461538461538461
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.8461538461538461,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "163": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 163,
    "query": "Which city has most number of arriving flights?",
    "turn_history": {
      "actions": [
        "SELECT airports.City, COUNT(flights.DestAirport) AS NumArrivals FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY NumArrivals DESC LIMIT 1"
      ],
      "observations": [
        "[('Anchorage ', 4)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "164": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 164,
    "query": "Return the average attendance across all shows.",
    "turn_history": {
      "actions": [
        "SELECT AVG(Attendance) FROM show"
      ],
      "observations": [
        "Error executing query: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'show' at line 1"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "165": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 165,
    "query": "What major is every student who does not own a cat as a pet, and also how old are they?",
    "turn_history": {
      "actions": [
        "SELECT s.Major, s.Age FROM Student s WHERE s.StuID NOT IN (     SELECT hp.StuID     FROM Has_Pet hp     JOIN Pets p ON hp.PetID = p.PetID     WHERE p.PetType = 'Cat' )"
      ],
      "observations": [
        "[(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "166": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 166,
    "query": "How many matches were played in 2013 or 2016?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "167": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 167,
    "query": "Return the names of friends of the high school student Kyle.",
    "turn_history": {
      "actions": [
        "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')"
      ],
      "observations": [
        "[('Jordan',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "168": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 168,
    "query": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Country FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'"
      ],
      "observations": [
        "[('United Kingdom',), ('Italy',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "169": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 169,
    "query": "What is the average grade of students who have friends?",
    "turn_history": {
      "actions": [
        "SELECT AVG(H.grade)  FROM Highschooler H  JOIN Friend F ON H.ID = F.student_id"
      ],
      "observations": [
        "[(Decimal('10.2500'),)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "170": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 170,
    "query": "What is the name of the conductor who has worked the greatest number of years?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
      ],
      "observations": [
        "[('Robert Craft',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "171": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 171,
    "query": "How many degrees does the engineering department offer?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "172": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 172,
    "query": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
    "turn_history": {
      "actions": [
        "SELECT Fname, Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog' AND StuID NOT IN (     SELECT StuID     FROM Has_Pet     JOIN Pets ON Has_Pet.PetID = Pets.PetID     WHERE PetType = 'cat' )"
      ],
      "observations": [
        "Error executing query: Column 'StuID' in IN/ALL/ANY subquery is ambiguous"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "173": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 173,
    "query": "What is the average and maximum age for each pet type?",
    "turn_history": {
      "actions": [
        "SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType"
      ],
      "observations": [
        "[('cat', Decimal('3.0000'), 3), ('dog', Decimal('1.5000'), 2)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "174": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 174,
    "query": "Which distinct car models are the produced after 1980?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Model FROM model_list  INNER JOIN cars_data ON model_list.ModelId = cars_data.Id  WHERE Year > 1980"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "175": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 175,
    "query": "What are each professional's first name and description of the treatment they have performed?",
    "turn_history": {
      "actions": [
        "SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
      ],
      "observations": [
        "[('Vernice', 'Physical examination'), ('Vernice', 'Physical examination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Monte', 'Physical examination'), ('Domenica', 'Vaccination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Danny', 'Vaccination'), ('Karley', 'Vaccination'), ('Monte', 'Take for a Walk'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Monte', 'Take for a Walk'), ('Ruben', 'Take for a Walk')]"
      ],
      "rewards": [
        0.8
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.8,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "176": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 176,
    "query": "What is the average horsepower for all cars produced before 1980 ?",
    "turn_history": {
      "actions": [
        "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980"
      ],
      "observations": [
        "[(147.34615384615384,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "177": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 177,
    "query": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
    "turn_history": {
      "actions": [
        "SELECT last_name FROM Students  WHERE current_address_id IN  (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina')  AND student_id NOT IN  (SELECT student_id FROM Student_Enrolment)"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "178": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 178,
    "query": "How many countries speak both English and Dutch?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T' GROUP BY CountryCode HAVING COUNT(*) = 2"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "179": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 179,
    "query": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
    "turn_history": {
      "actions": [
        "SELECT last_name FROM Students  WHERE state_province_county = 'North Carolina'  AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)"
      ],
      "observations": [
        "Error executing query: Unknown column 'state_province_county' in 'where clause'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "180": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 180,
    "query": "Count the number of different templates used for documents.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Template_ID) FROM Documents"
      ],
      "observations": [
        "[(12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "181": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 181,
    "query": "Which city has the most frequent destination airport?",
    "turn_history": {
      "actions": [
        "SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[('Anchorage ',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "182": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 182,
    "query": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "turn_history": {
      "actions": [
        "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor'"
      ],
      "observations": [
        "[('Reva', 'Golda', 'Osinski'), ('Reva', 'Golda', 'Osinski'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Milton', 'Vaughn', 'Christiansen'), ('Stanford', 'Mona', 'Rogahn'), ('Frida', 'Aisha', 'Huel'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Frida', 'Aisha', 'Huel')]"
      ],
      "rewards": [
        0.625
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.625,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "183": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 183,
    "query": "Give the language that is spoken in the most countries.",
    "turn_history": {
      "actions": [
        "SELECT Language, COUNT(DISTINCT CountryCode) AS NumCountries FROM countrylanguage GROUP BY Language ORDER BY NumCountries DESC LIMIT 1"
      ],
      "observations": [
        "[('English', 60)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "184": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 184,
    "query": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
    "turn_history": {
      "actions": [
        "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 3) OR CountryId IN (SELECT DISTINCT Country FROM car_makers WHERE Maker = 'Fiat')"
      ],
      "observations": [
        "[(1, 'usa'), (2, 'germany'), (4, 'japan'), (5, 'italy')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "185": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 185,
    "query": "What are the death and injury situations caused by the ship with tonnage 't'?",
    "turn_history": {
      "actions": [
        "SELECT * FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')"
      ],
      "observations": [
        "[(1, 1, 'Dantewada, Chhattisgarh', 8, 0), (1, 9, 'Dantewada, Chhattisgarh', 29, 0), (2, 2, 'Dantewada, Chhattisgarh', 3, 0), (2, 11, 'Bastar, Chattisgarh', 0, 0), (3, 3, 'East Champaran, Bihar', 2, 0), (3, 10, 'WestMidnapore, West Bengal', 0, 0), (3, 13, 'Erraboru, Chhattisgarh', 25, 0), (5, 6, 'Dantewada, Chhattisgarh', 0, 0), (5, 7, 'Dantewada, Chhattisgarh', 4, 5), (5, 12, 'Bokaro, Jharkhand', 14, 0), (6, 8, 'Kanker, Chhattisgarh', 0, 0)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "186": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 186,
    "query": "How many flights does airline 'JetBlue Airways' have?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "187": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 187,
    "query": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
    "turn_history": {
      "actions": [
        "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)"
      ],
      "observations": [
        "[(6, '139-321-7313'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]"
      ],
      "rewards": [
        0.6666666666666666
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.6666666666666666,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "188": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 188,
    "query": "How many pets have a greater weight than 10?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Pets WHERE weight > 10"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "189": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 189,
    "query": "Show the names of high schoolers who have at least 3 friends.",
    "turn_history": {
      "actions": [
        "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(DISTINCT f.friend_id) >= 3"
      ],
      "observations": [
        "[('Andrew',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "190": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 190,
    "query": "What are the languages used by the least number of TV Channels and how many channels use it?",
    "turn_history": {
      "actions": [
        "SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language ORDER BY Num_Channels ASC LIMIT 1"
      ],
      "observations": [
        "[('English', 3)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "191": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 191,
    "query": "Find the average age of students who do not have any pet .",
    "turn_history": {
      "actions": [
        "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)"
      ],
      "observations": [
        "[(Decimal('19.6250'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "192": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 192,
    "query": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
    "turn_history": {
      "actions": [
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'"
      ],
      "observations": [
        "[('Employee', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "193": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 193,
    "query": "List each language and the number of TV Channels using it.",
    "turn_history": {
      "actions": [
        "SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language"
      ],
      "observations": [
        "[('Italian', 12), ('English', 3)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "194": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 194,
    "query": "Show names of teachers and the courses they are arranged to teach.",
    "turn_history": {
      "actions": [
        "SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID"
      ],
      "observations": [
        "[('Gustaaf Deloor', 'Science'), ('Vicente Carretero', 'Math'), ('Kearsley Brown', 'Math'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "195": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 195,
    "query": "Give the name, population, and head of state for the country that has the largest area.",
    "turn_history": {
      "actions": [
        "SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
      ],
      "observations": [
        "[('Russian Federation', 146934000, 'Vladimir Putin')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "196": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 196,
    "query": "What is the sname of every sing that does not have any song?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
      ],
      "observations": [
        "[('Alice Walton',), ('Abigail Johnson',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "197": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 197,
    "query": "What is the name of the singer who is worth the most?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
      ],
      "observations": [
        "[('Liliane Bettencourt',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "198": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 198,
    "query": "Return the id and type code of the template that is used for the greatest number of documents.",
    "turn_history": {
      "actions": [
        "SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID = (     SELECT Template_ID     FROM Documents     GROUP BY Template_ID     ORDER BY COUNT(*) DESC     LIMIT 1 )"
      ],
      "observations": [
        "[(11, 'BK')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "199": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 199,
    "query": "Find the highest rank of losers in all matches.",
    "turn_history": {
      "actions": [
        "SELECT MAX(loser_rank) FROM matches"
      ],
      "observations": [
        "[(None,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "200": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 200,
    "query": "How many 'United Airlines' flights depart from Airport 'AHD'?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "201": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 201,
    "query": "What is the name of the shop that is hiring the largest number of employees?",
    "turn_history": {
      "actions": [
        "SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1"
      ],
      "observations": [
        "[('FC Haka',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "202": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 202,
    "query": "For the countries founded before 1930, what is the total number of distinct official languages?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (   SELECT Code FROM country   WHERE IndepYear < 1930 ) AND IsOfficial = 'T'"
      ],
      "observations": [
        "[(40,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "203": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 203,
    "query": "What are the names of the singers whose birth years are either 1948 or 1949?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)"
      ],
      "observations": [
        "[('Christy Walton',), ('Alice Walton',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "204": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 204,
    "query": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')"
      ],
      "observations": [
        "[('Italy',), ('United Kingdom',), ('Poland',)]"
      ],
      "rewards": [
        0.3333333333333333
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.3333333333333333,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "205": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 205,
    "query": "How many flights land in Aberdeen or Abilene?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene')"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "206": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 206,
    "query": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "207": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 207,
    "query": "What are the names of high schoolers who have 3 or more friends?",
    "turn_history": {
      "actions": [
        "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) >= 3"
      ],
      "observations": [
        "[('Andrew',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "208": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 208,
    "query": "What are the names of the teachers whose courses have not been arranged?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)"
      ],
      "observations": [
        "[('Joseph Huts',), ('John Deloor',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "209": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 209,
    "query": "What are the regions that use English or Dutch?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch')"
      ],
      "observations": [
        "[('Caribbean',), ('Polynesia',), ('Australia and New Zealand',), ('Western Europe',), ('Middle East',), ('Central America',), ('North America',), ('Southeast Asia',), ('Nordic Countries',), ('South America',), ('British Islands',), ('Southern Europe',), ('Micronesia',), ('Eastern Asia',), ('Southern Africa',), ('Southern and Central Asia',), ('Western Africa',), ('Eastern Africa',), ('Micronesia/Caribbean',), ('Melanesia',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "210": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 210,
    "query": "Find the number of players for each hand type.",
    "turn_history": {
      "actions": [
        "SELECT hand, COUNT(*) as num_players FROM players GROUP BY hand"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "211": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 211,
    "query": "Find the model of the car whose weight is below the average weight.",
    "turn_history": {
      "actions": [
        "SELECT Model FROM model_list WHERE ModelId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data))"
      ],
      "observations": [
        "[('amc',), ('audi',), ('bmw',), ('buick',), ('cadillac',), ('dodge',)]"
      ],
      "rewards": [
        0.125
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.125,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "212": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 212,
    "query": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT model_list.Model FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Maker INNER JOIN cars_data ON car_makers.Id = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "213": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 213,
    "query": "Give the city and country for the Alton airport.",
    "turn_history": {
      "actions": [
        "SELECT City, Country FROM airports WHERE AirportName = 'Alton'"
      ],
      "observations": [
        "[('Alton ', 'United States ')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "214": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 214,
    "query": "How many car models are produced by each maker ? Only list the count and the maker full name .",
    "turn_history": {
      "actions": [
        "SELECT car_makers.FullName, COUNT(model_list.ModelId) AS ModelCount FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName"
      ],
      "observations": [
        "[('American Motor Company', 1), ('Volkswagen', 2), ('BMW', 1), ('General Motors', 5), ('Ford Motor Company', 3), ('Chrysler', 4), ('Citroen', 1), ('Nissan Motors', 2), ('Fiat', 1), ('hi', 1), ('Honda', 1), ('Mazda', 1), ('Daimler Benz', 2), ('Opel', 1), ('Peugeaut', 1), ('Renault', 1), ('Saab', 1), ('Subaru', 1), ('Toyota', 2), ('Triumph', 1), ('Volvo', 1), ('Kia Motors', 1), ('Hyundai', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "215": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 215,
    "query": "What are the maximum and minimum values of area codes?",
    "turn_history": {
      "actions": [
        "SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE"
      ],
      "observations": [
        "[(989, 201)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "216": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 216,
    "query": "List the arrival date and the departure date for all the dogs.",
    "turn_history": {
      "actions": [
        "SELECT date_arrived, date_departed FROM Dogs"
      ],
      "observations": [
        "[(datetime.datetime(2017, 9, 8, 20, 10, 13), datetime.datetime(2018, 3, 25, 6, 58, 44)), (datetime.datetime(2017, 12, 22, 5, 2, 2), datetime.datetime(2018, 3, 25, 2, 11, 32)), (datetime.datetime(2017, 6, 25, 10, 14, 5), datetime.datetime(2018, 3, 25, 10, 25, 46)), (datetime.datetime(2017, 4, 20, 0, 58, 55), datetime.datetime(2018, 3, 24, 19, 12, 22)), (datetime.datetime(2017, 10, 25, 0, 55, 34), datetime.datetime(2018, 3, 25, 4, 50, 22)), (datetime.datetime(2017, 4, 15, 9, 25, 31), datetime.datetime(2018, 3, 25, 13, 7, 4)), (datetime.datetime(2017, 5, 6, 8, 3, 52), datetime.datetime(2018, 3, 25, 6, 29, 10)), (datetime.datetime(2017, 10, 16, 20, 6, 21), datetime.datetime(2018, 3, 25, 2, 47, 40)), (datetime.datetime(2018, 1, 17, 11, 44, 16), datetime.datetime(2018, 3, 25, 6, 46, 7)), (datetime.datetime(2017, 12, 29, 6, 8, 26), datetime.datetime(2018, 3, 25, 4, 42, 14)), (datetime.datetime(2017, 7, 25, 15, 19, 7), datetime.datetime(2018, 3, 25, 15, 5, 16)), (datetime.datetime(2017, 10, 24, 4, 45, 13), datetime.datetime(2018, 3, 25, 14, 15, 41)), (datetime.datetime(2018, 1, 2, 3, 15, 29), datetime.datetime(2018, 3, 25, 5, 7, 47)), (datetime.datetime(2017, 6, 18, 19, 45, 38), datetime.datetime(2018, 3, 24, 23, 48, 59)), (datetime.datetime(2017, 12, 29, 23, 24, 13), datetime.datetime(2018, 3, 24, 19, 36, 59))]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "217": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 217,
    "query": "What are the contestant numbers and names of the contestants who had at least two votes?",
    "turn_history": {
      "actions": [
        "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (     SELECT contestant_number     FROM VOTES     GROUP BY contestant_number     HAVING COUNT(*) >= 2 )"
      ],
      "observations": [
        "[(3, 'Kelly Clauss')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "218": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 218,
    "query": "Show the names of conductors and the orchestras they have conducted.",
    "turn_history": {
      "actions": [
        "SELECT conductor.Name, orchestra.Orchestra FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID"
      ],
      "observations": [
        "[('Antal Dor\u00e1ti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "219": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 219,
    "query": "How many paragraphs in total?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Paragraphs"
      ],
      "observations": [
        "[(15,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "220": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 220,
    "query": "What is the most common singer citizenship ?",
    "turn_history": {
      "actions": [
        "SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1"
      ],
      "observations": [
        "[('United States', 4)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "221": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 221,
    "query": "What is the most populace city that speaks English?",
    "turn_history": {
      "actions": [
        "SELECT city.Name  FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode  WHERE countrylanguage.Language = 'English'  ORDER BY city.Population DESC  LIMIT 1"
      ],
      "observations": [
        "[('New York',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "222": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 222,
    "query": "Find the total number of players.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM players"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "223": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 223,
    "query": "How many different series and contents are listed in the TV Channel table?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel"
      ],
      "observations": [
        "[(15, 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "224": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 224,
    "query": "List the names of teachers in ascending order of age.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM teacher ORDER BY Age ASC"
      ],
      "observations": [
        "[('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "225": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 225,
    "query": "What is the number of nations that use English and Dutch?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T'"
      ],
      "observations": [
        "[(48,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "226": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 226,
    "query": "How many airlines are from USA?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'"
      ],
      "observations": [
        "[(12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "227": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 227,
    "query": "Find the make and production time of the cars that were produced in the earliest year?",
    "turn_history": {
      "actions": [
        "SELECT Maker, MIN(Year) AS ProductionTime FROM cars_data JOIN car_makers ON cars_data.Id = car_makers.Id GROUP BY Maker"
      ],
      "observations": [
        "[('amc', 1970), ('volkswagen', 1970), ('bmw', 1970), ('gm', 1970), ('ford', 1970), ('chrysler', 1970), ('citroen', 1970), ('nissan', 1970), ('fiat', 1970), ('hi', 1970), ('honda', 1970), ('mazda', 1970), ('daimler benz', 1970), ('opel', 1970), ('peugeaut', 1970)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "228": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 228,
    "query": "How many different templates do all document use?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Template_ID) FROM Documents"
      ],
      "observations": [
        "[(12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "229": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 229,
    "query": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
    "turn_history": {
      "actions": [
        "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')"
      ],
      "observations": [
        "[('701',), ('703',), ('705',), ('706',), ('708',), ('709',), ('713',), ('714',), ('715',), ('717',), ('719',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "230": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 230,
    "query": "What are the ids, names, and descriptions for all documents?",
    "turn_history": {
      "actions": [
        "SELECT Document_ID, Document_Name, Document_Description FROM Documents"
      ],
      "observations": [
        "[(1, 'Introduction of OS', 'n'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "231": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 231,
    "query": "What are the ids of templates with template type code PP or PPT?",
    "turn_history": {
      "actions": [
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')"
      ],
      "observations": [
        "[(1,), (18,), (22,), (24,), (25,), (6,), (7,), (10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "232": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 232,
    "query": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
    "turn_history": {
      "actions": [
        "SELECT d.owner_id, o.zip_code FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id JOIN (     SELECT owner_id, SUM(charge_amount) AS total_spent     FROM Dogs     JOIN Charges ON Dogs.size_code = Charges.charge_type     GROUP BY owner_id     ORDER BY total_spent DESC     LIMIT 1 ) t ON d.owner_id = t.owner_id"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "233": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 233,
    "query": "How many countries exist?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM countries"
      ],
      "observations": [
        "[(15,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "234": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 234,
    "query": "Count the number of paragraphs in the document named 'Summer Show'.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'"
      ],
      "observations": [
        "[(1,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "235": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 235,
    "query": "Which template type code is used by most number of documents?",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code FROM Templates WHERE Template_Type_Code IN (     SELECT Template_Type_Code     FROM Documents     GROUP BY Template_Type_Code     ORDER BY COUNT(*) DESC     LIMIT 1 )"
      ],
      "observations": [
        "Error executing query: This version of MySQL doesn't yet support 'LIMIT & IN/ALL/ANY/SOME subquery'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "236": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 236,
    "query": "How many singers are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM singer"
      ],
      "observations": [
        "[(8,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "237": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 237,
    "query": "Tell me the number of dogs that have not received any treatment .",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments) AND abandoned_yn = 'N'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "238": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 238,
    "query": "What are the names of all high schoolers in grade 10?",
    "turn_history": {
      "actions": [
        "SELECT name FROM Highschooler WHERE grade = 10"
      ],
      "observations": [
        "[('Haley',), ('Kris',), ('Brittany',), ('Andrew',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "239": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 239,
    "query": "Show names of people whose nationality is not \"Russia\".",
    "turn_history": {
      "actions": [
        "SELECT Name FROM people WHERE Nationality <> 'Russia'"
      ],
      "observations": [
        "[('Teodor Salparov',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "240": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 240,
    "query": "Show the years in which orchestras that have given more than one performance are founded.",
    "turn_history": {
      "actions": [
        "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (     SELECT Orchestra_ID FROM performance     GROUP BY Orchestra_ID     HAVING COUNT(*) > 1 )"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "241": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 241,
    "query": "How much does the youngest dog weigh?",
    "turn_history": {
      "actions": [
        "SELECT MIN(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')"
      ],
      "observations": [
        "[(9.3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "242": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 242,
    "query": "What is the average and maximum capacities for all stadiums ?",
    "turn_history": {
      "actions": [
        "SELECT AVG(Capacity), MAX(Capacity) FROM stadium"
      ],
      "observations": [
        "[(Decimal('10621.6667'), 52500)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "243": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 243,
    "query": "Give the nationality that is most common across all people.",
    "turn_history": {
      "actions": [
        "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[('Russia',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "244": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 244,
    "query": "Return the money rank of the player with the greatest earnings.",
    "turn_history": {
      "actions": [
        "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
      ],
      "observations": [
        "[(58.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "245": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 245,
    "query": "What airline serves the most flights?",
    "turn_history": {
      "actions": [
        "SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights DESC LIMIT 1"
      ],
      "observations": [
        "[(4, 18)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "246": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 246,
    "query": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT airlines.Airline FROM airlines INNER JOIN flights ON airlines.Abbreviation = flights.Airline WHERE flights.SourceAirport = 'CVO' AND flights.Airline NOT IN (   SELECT DISTINCT airlines.Abbreviation   FROM airlines   INNER JOIN flights ON airlines.Abbreviation = flights.Airline   WHERE flights.SourceAirport = 'APG' )"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "247": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 247,
    "query": "What are each owner's first name, last name, and the size of their dog?",
    "turn_history": {
      "actions": [
        "SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code"
      ],
      "observations": [
        "[('Jaclyn', 'Stoltenberg', 'Large'), ('Gay', 'Feil', 'Large'), ('Rachelle', 'Funk', 'Large'), ('Cindy', 'Schmitt', 'Large'), ('Nora', 'Haley', 'Medium'), ('Emelie', 'Mertz', 'Medium'), ('Johann', 'Fisher', 'Medium'), ('Jaclyn', 'Stoltenberg', 'Medium'), ('Melisa', 'DuBuque', 'Medium'), ('Kade', 'Rippin', 'Medium'), ('Orlando', 'Price', 'Medium'), ('Rachelle', 'Funk', 'Medium'), ('Lorenz', 'Nicolas', 'Medium'), ('Rachelle', 'Funk', 'Small'), ('Rolando', 'Prohaska', 'Small')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "248": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 248,
    "query": "How many museums were opened after 2013 or before 2008?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008"
      ],
      "observations": [
        "[(1,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "249": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 249,
    "query": "Find the number of shops in each location.",
    "turn_history": {
      "actions": [
        "SELECT Location, COUNT(*) AS Num_Shops FROM shop GROUP BY Location"
      ],
      "observations": [
        "[('Valkeakoski', 1), ('Helsinki', 1), ('Espoo', 1), ('Turku', 1), ('Jakobstad', 1), ('Kotka', 1), ('Kuopio', 1), ('Lahti', 1), ('Mariehamn', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "250": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 250,
    "query": "Give the total surface area covered by countries in Asia or Europe.",
    "turn_history": {
      "actions": [
        "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')"
      ],
      "observations": [
        "[(54930138.9,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "251": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 251,
    "query": "What is the average age of the visitors whose membership level is not higher than 4?",
    "turn_history": {
      "actions": [
        "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4"
      ],
      "observations": [
        "[(Decimal('36.0000'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "252": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 252,
    "query": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
    "turn_history": {
      "actions": [
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'"
      ],
      "observations": [
        "[('September 24, 2007',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "253": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 253,
    "query": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "turn_history": {
      "actions": [
        "SELECT se.semester_id FROM Student_Enrolment se INNER JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY se.semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "254": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 254,
    "query": "Compute the average age of all the dogs.",
    "turn_history": {
      "actions": [
        "SELECT AVG(age) FROM Dogs"
      ],
      "observations": [
        "[(5.066666666666666,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "255": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 255,
    "query": "Give the flight numbers of flights landing at APG.",
    "turn_history": {
      "actions": [
        "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "256": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 256,
    "query": "How many type of governments are in Africa?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'"
      ],
      "observations": [
        "[(10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "257": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 257,
    "query": "What is the money rank of the poker player with the highest earnings?",
    "turn_history": {
      "actions": [
        "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player) LIMIT 1"
      ],
      "observations": [
        "[(58.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "258": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 258,
    "query": "Find the total number of tours for each ranking date.",
    "turn_history": {
      "actions": [
        "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "259": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 259,
    "query": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
    "turn_history": {
      "actions": [
        "SELECT first_name FROM Students WHERE country = 'Haiti' OR cell_mobile_number = '09700166582'"
      ],
      "observations": [
        "Error executing query: Unknown column 'country' in 'where clause'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "260": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 260,
    "query": "List the maximum weight and type for each type of pet.",
    "turn_history": {
      "actions": [
        "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType"
      ],
      "observations": [
        "[('cat', 12.0), ('dog', 13.4)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "261": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 261,
    "query": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
    "turn_history": {
      "actions": [
        "SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC"
      ],
      "observations": [
        "[('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "262": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 262,
    "query": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "263": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 263,
    "query": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
    "turn_history": {
      "actions": [
        "SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland')"
      ],
      "observations": [
        "[(16514113,), (16514113,)]"
      ],
      "rewards": [
        0.5
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.5,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "264": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 264,
    "query": "What is the average, minimum, and maximum age for all French singers?",
    "turn_history": {
      "actions": [
        "SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'"
      ],
      "observations": [
        "[(Decimal('34.5000'), 25, 43)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "265": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 265,
    "query": "Return the code of the template type that is most commonly used in documents.",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[('BK',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "266": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 266,
    "query": "What are the names of poker players?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID"
      ],
      "observations": [
        "[('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "267": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 267,
    "query": "List all song names by singers above the average age.",
    "turn_history": {
      "actions": [
        "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)"
      ],
      "observations": [
        "[('You',), ('Sun',), ('Gentleman',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "268": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 268,
    "query": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (   SELECT Code FROM country WHERE IndepYear < 1930 )"
      ],
      "observations": [
        "[(40,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "269": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 269,
    "query": "What is the template type code for template type description \"Book\".",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'"
      ],
      "observations": [
        "[('BK',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "270": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 270,
    "query": "What is the average life expectancy in African countries that are republics?",
    "turn_history": {
      "actions": [
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'"
      ],
      "observations": [
        "[(51.06122,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "271": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 271,
    "query": "Find the name and rank points of the winner who won the most times.",
    "turn_history": {
      "actions": [
        "SELECT winner_name, MAX(winner_rank_points) FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "272": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 272,
    "query": "What is the date and id of the transcript with at least 2 courses listed?",
    "turn_history": {
      "actions": [
        "SELECT transcript_id, transcript_date FROM Transcripts INNER JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2"
      ],
      "observations": [
        "Error executing query: Column 'transcript_id' in field list is ambiguous"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "273": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 273,
    "query": "What are the ids of documents that have 2 or more paragraphs?",
    "turn_history": {
      "actions": [
        "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING COUNT(*) >= 2"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "274": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 274,
    "query": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
    "turn_history": {
      "actions": [
        "SELECT governmentform, SUM(population) AS total_population FROM country WHERE governmentform IS NOT NULL AND governmentform != '' GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72"
      ],
      "observations": [
        "[('Nonmetropolitan Territory of The Netherlands', Decimal('320000')), ('Dependent Territory of the UK', Decimal('193050')), ('Parliamentary Coprincipality', Decimal('78000')), ('Emirate Federation', Decimal('2441000')), ('US Territory', Decimal('329000')), ('Nonmetropolitan Territory of France', Decimal('464000')), ('Constitutional Monarchy, Federation', Decimal('82516000')), ('Monarchy (Emirate)', Decimal('617000')), ('Monarchy (Sultanate)', Decimal('2870000')), ('Federation', Decimal('7160400')), ('Socialistic Republic', Decimal('115072000')), ('Part of Denmark', Decimal('99000')), ('Overseas Department of France', Decimal('1731000')), ('Special Administrative Region of China', Decimal('7255000')), ('Constitutional Monarchy (Emirate)', Decimal('1972000')), ('Socialistic State', Decimal('5605000')), ('Commonwealth of the US', Decimal('3947000'))]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "275": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 275,
    "query": "What languages are only used by a single country with a republic government?",
    "turn_history": {
      "actions": [
        "SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(*) = 1"
      ],
      "observations": [
        "[('Ambo',), ('Luchazi',), ('Luimbe-nganguela',), ('Luvale',), ('Mbundu',), ('Nyaneka-nkhumbi',), ('Ovimbundu',), ('Kirundi',), ('Adja',), ('Aizo',), ('Bariba',), ('Fon',), ('Somba',), ('Busansi',), ('Dagara',), ('Dyula',), ('Bengali',), ('Chakma',), ('Garo',), ('Khasi',), ('Marma',), ('Santhali',), ('Tripuri',), ('Khoekhoe',), ('Banda',), ('Gbaya',), ('Mandjia',), ('Mbum',), ('Ngbaka',), ('Araucan',), ('Rapa nui',), ('Gur',), ('[South]Mande',), ('Bamileke-bamum',), ('Duala',), ('Maka',), ('Mandara',), ('Masana',), ('Tikar',), ('Boa',), ('Luba',), ('Mongo',), ('Ngala and Bangi',), ('Rundi',), ('Zande',), ('Mboshi',), ('Punu',), ('Sango',), ('Comorian',), ('Comorian-Arabic',), ('Comorian-French',), ('Comorian-madagassi',), ('Comorian-Swahili',), ('Czech',), ('Moravian',), ('Silesiana',), ('Berberi',), ('Sinaberberi',), ('Bilin',), ('Hadareb',), ('Saho',), ('Tigre',), ('Amhara',), ('Gurage',), ('Oromo',), ('Sidamo',), ('Walaita',), ('Saame',), ('Swedish',), ('Fijian',), ('Mpongwe',), ('Punu-sira-nzebi',), ('Abhyasi',), ('Georgiana',), ('Osseetti',), ('Ga-adangme',), ('Kissi',), ('Susu',), ('Balante',), ('Mandyako',), ('Bubi',), ('Cakchiquel',), ('Kekch\u00ed',), ('Mam',), ('Quich\u00e9',), ('Garifuna',), ('Haiti Creole',), ('Bali',), ('Banja',), ('Batakki',), ('Bugi',), ('Javanese',), ('Madura',), ('Minangkabau',), ('Sunda',), ('Irish',), ('Assyrian',), ('Persian',), ('Icelandic',), ('Hebrew',), ('Friuli',), ('Sardinian',), ('Gusii',), ('Kalenjin',), ('Kamba',), ('Kikuyu',), ('Luhya',), ('Luo',), ('Masai',), ('Meru',), ('Nyika',), ('Turkana',), ('Kirgiz',), ('Korean',), ('Lao',), ('Lao-Soung',), ('Mon-khmer',), ('Thai',), ('Bassa',), ('Gio',), ('Grebo',), ('Mano',), ('Mixed Languages',), ('Singali',), ('Latvian',), ('Gagauzi',), ('Dhivehi',), ('Marshallese',), ('Bambara',), ('Senufo and Minianka',), ('Songhai',), ('Maltese',), ('Burmese',), ('Chin',), ('Kachin',), ('Karen',), ('Kayah',), ('Mon',), ('Rakhine',), ('Shan',), ('Bajad',), ('Buryat',), ('Dariganga',), ('Dorbet',), ('Mongolian',), ('Chuabo',), ('Makua',), ('Marendje',), ('Ronga',), ('Sena',), ('Tswa',), ('Hassaniya',), ('Tukulor',), ('Zenaga',), ('Bhojpuri',), ('Marathi',), ('Chichewa',), ('Ngoni',), ('Yao',), ('Caprivi',), ('Herero',), ('Kavango',), ('Nama',), ('Ovambo',), ('Hausa',), ('Kanuri',), ('Songhai-zerma',), ('Sumo',), ('Nauru',), ('Balochi',), ('Brahui',), ('Hindko',), ('Pashto',), ('Punjabi',), ('Saraiki',), ('Sindhi',), ('Urdu',), ('Cuna',), ('Embera',), ('Guaym\u00ed',), ('Bicol',), ('Cebuano',), ('Hiligaynon',), ('Ilocano',), ('Maguindanao',), ('Maranao',), ('Pampango',), ('Pangasinan',), ('Pilipino',), ('Waray-waray',), ('Palau',), ('Philippene Languages',), ('Serer',), ('Bullom-sherbro',), ('Kono-vai',), ('Kuranko',), ('Limba',), ('Mende',), ('Temne',), ('Nahua',), ('Sranantonga',), ('Czech and Moravian',), ('Ukrainian and Russian',), ('Seselwa',), ('Gorane',), ('Hadjarai',), ('Kanem-bornu',), ('Mayo-kebbi',), ('Ouaddai',), ('Tandjile',), ('Ane',), ('Kaby\u00e9',), ('Kotokoli',), ('Moba',), ('Naudemba',), ('Watyi',), ('Turkmenian',), ('Arabic-French',), ('Arabic-French-English',), ('Ami',), ('Atayal',), ('Hakka',), ('Mandarin Chinese',), ('Min',), ('Paiwan',), ('Chaga and Pare',), ('Gogo',), ('Ha',), ('Haya',), ('Hehet',), ('Luguru',), ('Makonde',), ('Nyakusa',), ('Nyamwesi',), ('Shambala',), ('Acholi',), ('Ganda',), ('Gisu',), ('Kiga',), ('Lango',), ('Lugbara',), ('Nkole',), ('Soga',), ('Teso',), ('Karakalpak',), ('Bislama',), ('Soqutri',), ('Northsotho',), ('Southsotho',), ('Swazi',), ('Venda',), ('Xhosa',), ('Zulu',), ('Bemba',), ('Chewa',), ('Lozi',), ('Nsenga',), ('Tongan',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "276": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 276,
    "query": "How many languages are spoken in Aruba?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW'"
      ],
      "observations": [
        "[(4,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "277": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 277,
    "query": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
    "turn_history": {
      "actions": [
        "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)"
      ],
      "observations": [
        "[(1, 'Braun', '(275)939-2435x80863'), (8, 'Hyatt', '328.842.3792'), (9, 'Kshlerin', '962-983-8109x3509')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "278": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 278,
    "query": "What are the arriving date and the departing date of all the dogs?",
    "turn_history": {
      "actions": [
        "SELECT date_arrived, date_departed FROM Dogs"
      ],
      "observations": [
        "[(datetime.datetime(2017, 9, 8, 20, 10, 13), datetime.datetime(2018, 3, 25, 6, 58, 44)), (datetime.datetime(2017, 12, 22, 5, 2, 2), datetime.datetime(2018, 3, 25, 2, 11, 32)), (datetime.datetime(2017, 6, 25, 10, 14, 5), datetime.datetime(2018, 3, 25, 10, 25, 46)), (datetime.datetime(2017, 4, 20, 0, 58, 55), datetime.datetime(2018, 3, 24, 19, 12, 22)), (datetime.datetime(2017, 10, 25, 0, 55, 34), datetime.datetime(2018, 3, 25, 4, 50, 22)), (datetime.datetime(2017, 4, 15, 9, 25, 31), datetime.datetime(2018, 3, 25, 13, 7, 4)), (datetime.datetime(2017, 5, 6, 8, 3, 52), datetime.datetime(2018, 3, 25, 6, 29, 10)), (datetime.datetime(2017, 10, 16, 20, 6, 21), datetime.datetime(2018, 3, 25, 2, 47, 40)), (datetime.datetime(2018, 1, 17, 11, 44, 16), datetime.datetime(2018, 3, 25, 6, 46, 7)), (datetime.datetime(2017, 12, 29, 6, 8, 26), datetime.datetime(2018, 3, 25, 4, 42, 14)), (datetime.datetime(2017, 7, 25, 15, 19, 7), datetime.datetime(2018, 3, 25, 15, 5, 16)), (datetime.datetime(2017, 10, 24, 4, 45, 13), datetime.datetime(2018, 3, 25, 14, 15, 41)), (datetime.datetime(2018, 1, 2, 3, 15, 29), datetime.datetime(2018, 3, 25, 5, 7, 47)), (datetime.datetime(2017, 6, 18, 19, 45, 38), datetime.datetime(2018, 3, 24, 23, 48, 59)), (datetime.datetime(2017, 12, 29, 23, 24, 13), datetime.datetime(2018, 3, 24, 19, 36, 59))]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "279": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 279,
    "query": "Which airlines have a flight with destination airport AHD?",
    "turn_history": {
      "actions": [
        "SELECT Airline FROM flights WHERE DestAirport = 'AHD'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "280": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 280,
    "query": "What are the names of the singers and number of concerts for each person?",
    "turn_history": {
      "actions": [
        "SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name"
      ],
      "observations": [
        "[('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "281": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 281,
    "query": "When was the last transcript released?",
    "turn_history": {
      "actions": [
        "SELECT MAX(transcript_date) FROM Transcripts"
      ],
      "observations": [
        "[(datetime.datetime(2013, 6, 30, 13, 1, 40),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "282": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 282,
    "query": "Give the flight numbers of flights arriving in Aberdeen.",
    "turn_history": {
      "actions": [
        "SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "283": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 283,
    "query": "What is the total number of airlines?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM airlines"
      ],
      "observations": [
        "[(12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "284": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 284,
    "query": "How many flights fly from Aberdeen to Ashley?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "285": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 285,
    "query": "What is the airport code of the airport with the most flights?",
    "turn_history": {
      "actions": [
        "SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights DESC LIMIT 1"
      ],
      "observations": [
        "[('OTS', 3)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "286": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 286,
    "query": "What language is predominantly spoken in Aruba?",
    "turn_history": {
      "actions": [
        "SELECT Language FROM countrylanguage WHERE CountryCode='ABW' AND IsOfficial='T'"
      ],
      "observations": [
        "[('Dutch',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "287": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 287,
    "query": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
    "turn_history": {
      "actions": [
        "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!')"
      ],
      "observations": [
        "[('Sky Radio',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "288": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 288,
    "query": "Which airlines have departing flights from both APG and CVO airports?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT airlines.Airline FROM airlines INNER JOIN flights ON airlines.Airline = flights.Airline WHERE flights.SourceAirport IN ('APG', 'CVO') AND flights.DestAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "289": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 289,
    "query": "Sort employee names by their age in ascending order.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM employee ORDER BY Age ASC"
      ],
      "observations": [
        "[('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "290": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 290,
    "query": "List the names of poker players ordered by the final tables made in ascending order.",
    "turn_history": {
      "actions": [
        "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC"
      ],
      "observations": [
        "[('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "291": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 291,
    "query": "Describe the section h.",
    "turn_history": {
      "actions": [
        "DESCRIBE Sections"
      ],
      "observations": [
        "[('section_id', 'int', 'NO', 'PRI', None, 'auto_increment'), ('course_id', 'int', 'NO', 'MUL', None, ''), ('section_name', 'varchar(255)', 'YES', '', None, ''), ('section_description', 'varchar(255)', 'YES', '', None, ''), ('other_details', 'varchar(255)', 'YES', '', None, '')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "292": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 292,
    "query": "What is the description of the department whose name has the substring the computer?",
    "turn_history": {
      "actions": [
        "SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "293": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 293,
    "query": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
    "turn_history": {
      "actions": [
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'"
      ],
      "observations": [
        "[('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "294": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 294,
    "query": "What are the manager name and district of the shop that sells the largest number of products?",
    "turn_history": {
      "actions": [
        "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)"
      ],
      "observations": [
        "[('Ilkka M\u00e4kel\u00e4', 'Lahden Stadion')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "295": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 295,
    "query": "What are the first name and last name of the professionals who have done treatment with cost below average?",
    "turn_history": {
      "actions": [
        "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))"
      ],
      "observations": [
        "[('Domenica', 'Jacobs'), ('Vernice', 'Tillman'), ('Karley', 'Hyatt'), ('Ruben', \"O'Reilly\"), ('Monte', 'Kshlerin')]"
      ],
      "rewards": [
        0.3333333333333333
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.3333333333333333,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "296": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 296,
    "query": "Find the id and name of the museum that has the most staff members?",
    "turn_history": {
      "actions": [
        "SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1"
      ],
      "observations": [
        "[(1, 'Plaza Museum')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "297": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 297,
    "query": "How many singers do we have?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM singer"
      ],
      "observations": [
        "[(6,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "298": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 298,
    "query": "Show countries where a singer above age 40 and a singer below 30 are from.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Country FROM singer WHERE Age > 40 OR Age < 30"
      ],
      "observations": [
        "[('Netherlands',), ('France',)]"
      ],
      "rewards": [
        0.5
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.5,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "299": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 299,
    "query": "What are airlines that have flights arriving at airport 'AHD'?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT airlines.Airline FROM airlines INNER JOIN flights ON airlines.Airline = flights.Airline WHERE flights.DestAirport = 'AHD'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "300": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 300,
    "query": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "turn_history": {
      "actions": [
        "SELECT first_name, middle_name, last_name FROM Students WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name LIKE '%Bachelor%' )"
      ],
      "observations": [
        "Error executing query: Unknown column 'degree_program_id' in 'IN/ALL/ANY subquery'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "301": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 301,
    "query": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "turn_history": {
      "actions": [
        "SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights              GROUP BY Airline              ORDER BY COUNT(*) ASC              LIMIT 1)"
      ],
      "observations": [
        "[('UAL', 'USA')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "302": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 302,
    "query": "How many different results are there for the battles?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT result) FROM battle"
      ],
      "observations": [
        "[(3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "303": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 303,
    "query": "Whose permanent address is different from his or her current address? List his or her first name.",
    "turn_history": {
      "actions": [
        "SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id"
      ],
      "observations": [
        "[('Timmothy',), ('Hobart',), ('Warren',), ('Jarvis',), ('Stanford',), ('Frida',), ('Delaney',), ('Reva',), ('Helga',), ('Gregg',), ('Orrin',), ('Deon',), ('Jordy',), ('Jett',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "304": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 304,
    "query": "What is the number of continents?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM continents"
      ],
      "observations": [
        "[(5,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "305": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 305,
    "query": "Which address holds the most number of students currently? List the address id and all lines.",
    "turn_history": {
      "actions": [
        "SELECT address_id, line_1, line_2, line_3 FROM Addresses WHERE address_id = (     SELECT current_address_id     FROM Students     GROUP BY current_address_id     ORDER BY COUNT(*) DESC     LIMIT 1 )"
      ],
      "observations": [
        "[(9, '0643 Muller Vista', 'Suite 383', None)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "306": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 306,
    "query": "What are the full names of all left handed players, in order of birth date?",
    "turn_history": {
      "actions": [
        "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "307": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 307,
    "query": "Show ids of all students who do not have any friends.",
    "turn_history": {
      "actions": [
        "SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (     SELECT Friend.student_id     FROM Friend )"
      ],
      "observations": [
        "[(1025,), (1641,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "308": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 308,
    "query": "Show the ids of high schoolers who have friends and are also liked by someone else.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT h.ID FROM Highschooler h, Friend f, Likes l WHERE h.ID = f.student_id AND h.ID = l.student_id AND f.friend_id = l.liked_id"
      ],
      "observations": [
        "[(1689,), (1501,)]"
      ],
      "rewards": [
        0.25
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.25,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "309": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 309,
    "query": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT orchestra.Record_Company FROM orchestra WHERE orchestra.Year_of_Founded < 2003 OR orchestra.Year_of_Founded > 2003"
      ],
      "observations": [
        "[('Columbia Masterworks',), ('Philips',), ('Kultur',), ('Decca Records',), ('Delos Records',), ('Philips Classics Records',), ('Koch Records / Naxos Records',), ('EMI',), ('RCA',)]"
      ],
      "rewards": [
        0.1111111111111111
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.1111111111111111,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "310": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 310,
    "query": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
    "turn_history": {
      "actions": [
        "SELECT series_name FROM TV_Channel WHERE Content = 'A Love of a Lifetime'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "311": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 311,
    "query": "List the name of singers that do not have any song.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
      ],
      "observations": [
        "[('Alice Walton',), ('Abigail Johnson',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "312": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 312,
    "query": "List document IDs, document names, and document descriptions for all documents.",
    "turn_history": {
      "actions": [
        "SELECT Document_ID, Document_Name, Document_Description FROM Documents"
      ],
      "observations": [
        "[(1, 'Introduction of OS', 'n'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "313": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 313,
    "query": "What are the different models for the cards produced after 1980?",
    "turn_history": {
      "actions": [
        "SELECT Model FROM model_list WHERE Maker IN (SELECT Maker FROM car_makers WHERE Id IN (SELECT Id FROM cars_data WHERE Year > 1980))"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "314": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 314,
    "query": "What is the content of TV Channel with serial name \"Sky Radio\"?",
    "turn_history": {
      "actions": [
        "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'"
      ],
      "observations": [
        "[('music',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "315": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 315,
    "query": "What are each owner's first name and their dogs's name?",
    "turn_history": {
      "actions": [
        "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id"
      ],
      "observations": [
        "[('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "316": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 316,
    "query": "What is the id, line 1, and line 2 of the address with the most students?",
    "turn_history": {
      "actions": [
        "SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id IN (     SELECT current_address_id     FROM Students     GROUP BY current_address_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) OR address_id IN (     SELECT permanent_address_id     FROM Students     GROUP BY permanent_address_id     ORDER BY COUNT(*) DESC     LIMIT 1 )"
      ],
      "observations": [
        "Error executing query: This version of MySQL doesn't yet support 'LIMIT & IN/ALL/ANY/SOME subquery'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "317": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 317,
    "query": "How many friends does the high school student Kyle have?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle'"
      ],
      "observations": [
        "[(1,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "318": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 318,
    "query": "What is the country with the most number of TV Channels and how many does it have?",
    "turn_history": {
      "actions": [
        "SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1"
      ],
      "observations": [
        "[('Italy', 12)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "319": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 319,
    "query": "Show me the cost of the most recently performed treatment.",
    "turn_history": {
      "actions": [
        "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
      ],
      "observations": [
        "[(Decimal('407.0000'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "320": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 320,
    "query": "Return the birth date of the poker player with the lowest earnings.",
    "turn_history": {
      "actions": [
        "SELECT Birth_Date FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID ORDER BY Earnings ASC LIMIT 1"
      ],
      "observations": [
        "[('August 8, 1986',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "321": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 321,
    "query": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "turn_history": {
      "actions": [
        "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (     SELECT Document_ID FROM Documents     WHERE Document_Name = 'Welcome to NY' )"
      ],
      "observations": [
        "[(16615, 'Japan'), (608931827, 'Micronesia')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "322": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 322,
    "query": "Find the number of flights landing in the city of Aberdeen or Abilene.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene')"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "323": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 323,
    "query": "Show the stadium names without any concert.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)"
      ],
      "observations": [
        "[('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "324": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 324,
    "query": "What is the first name and gender of the all the students who have more than one pet?",
    "turn_history": {
      "actions": [
        "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)"
      ],
      "observations": [
        "[('Tracy', 'F')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "325": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 325,
    "query": "How many visitors below age 30 are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM visitor WHERE Age < 30"
      ],
      "observations": [
        "[(3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "326": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 326,
    "query": "Which continent speaks the most languages?",
    "turn_history": {
      "actions": [
        "SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY NumLanguages DESC LIMIT 1"
      ],
      "observations": [
        "[('Africa', 215)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "327": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 327,
    "query": "What is the charge amount of the most expensive charge type?",
    "turn_history": {
      "actions": [
        "SELECT MAX(charge_amount) FROM Charges"
      ],
      "observations": [
        "[(Decimal('640.0000'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "328": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 328,
    "query": "Return the nationalities for which there are two or more people.",
    "turn_history": {
      "actions": [
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2"
      ],
      "observations": [
        "[('Russia',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "329": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 329,
    "query": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
    "turn_history": {
      "actions": [
        "SELECT Episode FROM TV_series WHERE Channel = 'Sky Radio' AND series_name = 'Sky Radio'"
      ],
      "observations": [
        "Error executing query: Unknown column 'series_name' in 'where clause'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "330": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 330,
    "query": "What is the maximum accelerate for different number of cylinders?",
    "turn_history": {
      "actions": [
        "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders"
      ],
      "observations": [
        "[(8, 16.0), (4, 21.0), (6, 18.0)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "331": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 331,
    "query": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
    "turn_history": {
      "actions": [
        "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) >= 2 )"
      ],
      "observations": [
        "[(4, 'Veterenari', 'Vernice'), (6, 'Veterenari', 'Ruben'), (8, 'Employee', 'Karley'), (9, 'Veterenari', 'Monte'), (10, 'Employee', 'Domenica'), (14, 'Employee', 'Sigurd')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "332": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 332,
    "query": "What are the names of all European countries with at least 3 manufacturers?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryName = car_makers.Country WHERE countries.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Maker) >= 3"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "333": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 333,
    "query": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
    "turn_history": {
      "actions": [
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980"
      ],
      "observations": [
        "[('32.0',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "334": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 334,
    "query": "Return the money rank of the poker player with the greatest height.",
    "turn_history": {
      "actions": [
        "SELECT Money_Rank FROM poker_player  INNER JOIN people ON poker_player.People_ID = people.People_ID  ORDER BY Height DESC LIMIT 1"
      ],
      "observations": [
        "[(68.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "335": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 335,
    "query": "Return the owner id, first name and last name of the owner who has the most dogs.",
    "turn_history": {
      "actions": [
        "SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (     SELECT owner_id     FROM Dogs     GROUP BY owner_id     ORDER BY COUNT(*) DESC     LIMIT 1 )"
      ],
      "observations": [
        "[(14, 'Rachelle', 'Funk')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "336": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 336,
    "query": "What are the names of all courses that have some students enrolled?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Courses.course_name FROM Courses INNER JOIN Sections ON Courses.course_id = Sections.course_id INNER JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id"
      ],
      "observations": [
        "[('math',), ('nlp',), ('ds',), ('cal',), ('pl',), ('en',), ('fr',), ('la',)]"
      ],
      "rewards": [
        0.38461538461538464
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.38461538461538464,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "337": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 337,
    "query": "What are names of countries with the top 3 largest population?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
      ],
      "observations": [
        "[('China',), ('India',), ('United States',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "338": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 338,
    "query": "Find the minimum grade of students who have no friends.",
    "turn_history": {
      "actions": [
        "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)"
      ],
      "observations": [
        "[(10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "339": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 339,
    "query": "How many ships ended up being 'Captured'?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'"
      ],
      "observations": [
        "[(4,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "340": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 340,
    "query": "What is the code of airport that has the highest number of flights?",
    "turn_history": {
      "actions": [
        "SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights DESC LIMIT 1"
      ],
      "observations": [
        "[('OTS', 3)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "341": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 341,
    "query": "How many continents speak Chinese?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Chinese'"
      ],
      "observations": [
        "[(19,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "342": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 342,
    "query": "Return the template type code of the template that is used by a document named Data base.",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code FROM Templates WHERE Template_ID = (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base')"
      ],
      "observations": [
        "[('BK',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "343": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 343,
    "query": "Give average earnings of poker players who are taller than 200.",
    "turn_history": {
      "actions": [
        "SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200"
      ],
      "observations": [
        "[(309445.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "344": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 344,
    "query": "How many players are there for each hand type?",
    "turn_history": {
      "actions": [
        "SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "345": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 345,
    "query": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')"
      ],
      "observations": [
        "[(11,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "346": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 346,
    "query": "Which language is the most popular in Aruba?",
    "turn_history": {
      "actions": [
        "SELECT Language FROM countrylanguage WHERE CountryCode='ABW' AND IsOfficial='T'"
      ],
      "observations": [
        "[('Dutch',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "347": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 347,
    "query": "Find the id and weight of all pets whose age is older than 1.",
    "turn_history": {
      "actions": [
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1"
      ],
      "observations": [
        "[(2001, 12.0), (2002, 13.4)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "348": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 348,
    "query": "Give the names of countries with English and French as official languages.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'French') AND IsOfficial = 'T' GROUP BY CountryCode HAVING COUNT(*) = 2) ORDER BY Name"
      ],
      "observations": [
        "[('Canada',), ('Seychelles',), ('Vanuatu',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "349": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 349,
    "query": "Give the code of the airport with the least flights.",
    "turn_history": {
      "actions": [
        "SELECT SourceAirport AS AirportCode, COUNT(*) AS Flights FROM flights GROUP BY SourceAirport ORDER BY Flights ASC LIMIT 1"
      ],
      "observations": [
        "[('ABQ', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "350": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 350,
    "query": "Which countries have greater area than that of any country in Europe?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "351": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 351,
    "query": "What are the codes of template types that are not used for any document?",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code  FROM Ref_Template_Types  WHERE Template_Type_Code NOT IN      (SELECT Template_Type_Code       FROM Templates       INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID)"
      ],
      "observations": [
        "[('CV',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "352": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 352,
    "query": "List the date of each treatment, together with the first name of the professional who operated it.",
    "turn_history": {
      "actions": [
        "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id"
      ],
      "observations": [
        "[(datetime.datetime(2018, 3, 19, 4, 39, 54), 'Monte'), (datetime.datetime(2018, 3, 15, 20, 25, 34), 'Domenica'), (datetime.datetime(2018, 3, 8, 5, 26, 23), 'Vernice'), (datetime.datetime(2018, 3, 1, 4, 14, 46), 'Karley'), (datetime.datetime(2018, 3, 23, 13, 52, 10), 'Sigurd'), (datetime.datetime(2018, 3, 11, 4, 23, 15), 'Vernice'), (datetime.datetime(2018, 3, 10, 11, 45, 58), 'Sigurd'), (datetime.datetime(2018, 3, 24, 22, 25, 58), 'Ruben'), (datetime.datetime(2018, 3, 14, 19, 10, 40), 'Domenica'), (datetime.datetime(2018, 2, 28, 17, 9, 43), 'Velva'), (datetime.datetime(2018, 3, 13, 12, 22, 58), 'Danny'), (datetime.datetime(2018, 3, 16, 10, 27, 36), 'Monte'), (datetime.datetime(2018, 2, 26, 9, 8, 53), 'Karley'), (datetime.datetime(2018, 3, 4, 20, 33, 43), 'Monte'), (datetime.datetime(2018, 3, 15, 19, 10, 2), 'Ruben')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "353": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 353,
    "query": "What is last date created of votes from the state 'CA'?",
    "turn_history": {
      "actions": [
        "SELECT MAX(created) FROM VOTES WHERE state = 'CA'"
      ],
      "observations": [
        "[(datetime.datetime(2018, 3, 10, 0, 3, 39),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "354": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 354,
    "query": "What are the email, cell phone and home phone of each professional?",
    "turn_history": {
      "actions": [
        "SELECT email_address, cell_number, home_phone FROM Professionals"
      ],
      "observations": [
        "[('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "355": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 355,
    "query": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
    "turn_history": {
      "actions": [
        "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')"
      ],
      "observations": [
        "[('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "356": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 356,
    "query": "Find the arriving date and the departing date of the dogs that received a treatment.",
    "turn_history": {
      "actions": [
        "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id"
      ],
      "observations": [
        "[(datetime.datetime(2017, 9, 8, 20, 10, 13), datetime.datetime(2018, 3, 25, 6, 58, 44)), (datetime.datetime(2017, 12, 22, 5, 2, 2), datetime.datetime(2018, 3, 25, 2, 11, 32)), (datetime.datetime(2017, 12, 22, 5, 2, 2), datetime.datetime(2018, 3, 25, 2, 11, 32)), (datetime.datetime(2017, 4, 20, 0, 58, 55), datetime.datetime(2018, 3, 24, 19, 12, 22)), (datetime.datetime(2017, 5, 6, 8, 3, 52), datetime.datetime(2018, 3, 25, 6, 29, 10)), (datetime.datetime(2017, 12, 29, 6, 8, 26), datetime.datetime(2018, 3, 25, 4, 42, 14)), (datetime.datetime(2017, 12, 29, 6, 8, 26), datetime.datetime(2018, 3, 25, 4, 42, 14)), (datetime.datetime(2017, 12, 29, 6, 8, 26), datetime.datetime(2018, 3, 25, 4, 42, 14)), (datetime.datetime(2017, 10, 24, 4, 45, 13), datetime.datetime(2018, 3, 25, 14, 15, 41)), (datetime.datetime(2018, 1, 2, 3, 15, 29), datetime.datetime(2018, 3, 25, 5, 7, 47)), (datetime.datetime(2017, 6, 18, 19, 45, 38), datetime.datetime(2018, 3, 24, 23, 48, 59)), (datetime.datetime(2017, 6, 18, 19, 45, 38), datetime.datetime(2018, 3, 24, 23, 48, 59)), (datetime.datetime(2017, 6, 18, 19, 45, 38), datetime.datetime(2018, 3, 24, 23, 48, 59)), (datetime.datetime(2017, 12, 29, 23, 24, 13), datetime.datetime(2018, 3, 24, 19, 36, 59)), (datetime.datetime(2017, 12, 29, 23, 24, 13), datetime.datetime(2018, 3, 24, 19, 36, 59))]"
      ],
      "rewards": [
        0.6
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.6,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "357": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 357,
    "query": "What are the names and ids of every course with less than 2 sections?",
    "turn_history": {
      "actions": [
        "SELECT course_id, course_name FROM Courses WHERE course_id IN (     SELECT course_id FROM Sections     GROUP BY course_id     HAVING COUNT(*) < 2 )"
      ],
      "observations": [
        "[(2, 'math'), (4, 'en'), (6, 'la'), (7, 'cal'), (9, 'dl'), (10, 'ml'), (12, 'db')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "358": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 358,
    "query": "Count the number of flights into ATO.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "359": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 359,
    "query": "What are the names of players who won in both 2013 and 2016?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_date LIKE '2013%' AND p.player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_date LIKE '2016%' )"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "360": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 360,
    "query": "Return the names and template ids for documents that contain the letter w in their description.",
    "turn_history": {
      "actions": [
        "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'"
      ],
      "observations": [
        "[('Data base', 11), ('How to read a book', 4)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "361": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 361,
    "query": "What are airport names at City 'Aberdeen'?",
    "turn_history": {
      "actions": [
        "SELECT AirportName FROM airports WHERE City = 'Aberdeen'"
      ],
      "observations": [
        "[('Municipal ',), ('Phillips AAF ',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "362": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 362,
    "query": "What are the different template type codes, and how many templates correspond to each?",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code, COUNT(*) AS Num_Templates FROM Templates GROUP BY Template_Type_Code"
      ],
      "observations": [
        "[('AD', 3), ('BK', 6), ('CV', 2), ('PP', 5), ('PPT', 3)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "363": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 363,
    "query": "Show all countries and the number of singers in each country.",
    "turn_history": {
      "actions": [
        "SELECT Country, COUNT(*) as Number_of_Singers FROM singer GROUP BY Country"
      ],
      "observations": [
        "[('Netherlands', 1), ('United States', 1), ('France', 4)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "364": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 364,
    "query": "Find the last name of the student who has a cat that is age 3.",
    "turn_history": {
      "actions": [
        "SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3"
      ],
      "observations": [
        "[('Smith',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "365": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 365,
    "query": "What are the ids and names of the battles that led to more than 10 people killed in total.",
    "turn_history": {
      "actions": [
        "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10)"
      ],
      "observations": [
        "[(1, 'Battle of Adrianople'), (3, 'Battle of Rusion'), (5, 'Battle of Messinopolis')]"
      ],
      "rewards": [
        0.2
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.2,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "366": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 366,
    "query": "Count the number of documents.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Documents"
      ],
      "observations": [
        "[(14,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "367": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 367,
    "query": "What is the name and id of the department with the most number of degrees ?",
    "turn_history": {
      "actions": [
        "SELECT department_id, department_name FROM Departments WHERE department_id = (     SELECT department_id     FROM Degree_Programs     GROUP BY department_id     ORDER BY COUNT(*) DESC     LIMIT 1 )"
      ],
      "observations": [
        "[(8, 'statistics')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "368": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 368,
    "query": "Which region is the city Kabul located in?",
    "turn_history": {
      "actions": [
        "SELECT Region FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Name = 'Kabul'"
      ],
      "observations": [
        "[('Southern and Central Asia',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "369": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 369,
    "query": "What is the zip code for Port Chelsea?",
    "turn_history": {
      "actions": [
        "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'"
      ],
      "observations": [
        "[('148',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "370": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 370,
    "query": "Give me the description of the treatment type whose total cost is the lowest.",
    "turn_history": {
      "actions": [
        "SELECT treatment_type_description  FROM Treatment_Types  WHERE treatment_type_code = (     SELECT treatment_type_code      FROM Treatments      GROUP BY treatment_type_code      ORDER BY SUM(cost_of_treatment) ASC      LIMIT 1 )"
      ],
      "observations": [
        "[('Take for a Walk',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "371": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 371,
    "query": "Which year had the most matches?",
    "turn_history": {
      "actions": [
        "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "372": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 372,
    "query": "Give the ids of documents that have between one and two paragraphs.",
    "turn_history": {
      "actions": [
        "SELECT Document_ID FROM Documents WHERE Document_ID IN (     SELECT Document_ID     FROM Paragraphs     GROUP BY Document_ID     HAVING COUNT(*) BETWEEN 1 AND 2 )"
      ],
      "observations": [
        "[(33930,), (3,), (3540024,), (385906526,), (80,), (3830,), (651512,), (50123,), (16514113,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "373": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 373,
    "query": "What are the ids of high school students who do not have friends?",
    "turn_history": {
      "actions": [
        "SELECT ID FROM Highschooler WHERE ID NOT IN (   SELECT student_id   FROM Friend )"
      ],
      "observations": [
        "[(1025,), (1641,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "374": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 374,
    "query": "Find the first names that are used for professionals or owners but are not used as dog names.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT first_name FROM (     SELECT first_name FROM Owners     UNION     SELECT first_name FROM Professionals ) AS names WHERE names.first_name NOT IN (     SELECT name FROM Dogs )"
      ],
      "observations": [
        "[('Nora',), ('Melisa',), ('Jaclyn',), ('Tre',), ('Johann',), ('Kade',), ('Emelie',), ('Rolando',), ('Adelle',), ('Lorenz',), ('Gay',), ('Orlando',), ('Cindy',), ('Rachelle',), ('Heather',), ('Taryn',), ('Jayson',), ('Olaf',), ('Vernice',), ('Danny',), ('Ruben',), ('Velva',), ('Karley',), ('Monte',), ('Domenica',), ('Brady',), ('Winfield',), ('Ericka',), ('Sigurd',), ('Lesly',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "375": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 375,
    "query": "Which unique cities are in Asian countries where Chinese is the official language ?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'"
      ],
      "observations": [
        "[('Shanghai',), ('Peking',), ('Chongqing',), ('Tianjin',), ('Wuhan',), ('Harbin',), ('Shenyang',), ('Kanton [Guangzhou]',), ('Chengdu',), ('Nanking [Nanjing]',), ('Changchun',), ('Xi\u00b4an',), ('Dalian',), ('Qingdao',), ('Jinan',), ('Hangzhou',), ('Zhengzhou',), ('Shijiazhuang',), ('Taiyuan',), ('Kunming',), ('Changsha',), ('Nanchang',), ('Fuzhou',), ('Lanzhou',), ('Guiyang',), ('Ningbo',), ('Hefei',), ('Urumt\u0161i [\u00dcr\u00fcmqi]',), ('Anshan',), ('Fushun',), ('Nanning',), ('Zibo',), ('Qiqihar',), ('Jilin',), ('Tangshan',), ('Baotou',), ('Shenzhen',), ('Hohhot',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai\u00b4an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma\u00b4anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei\u00b4an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Ulanhot',), ('Korla',), ('Wanxian',), ('Rui\u00b4an',), ('Zhoushan',), ('Liangcheng',), ('Jiaozhou',), ('Taizhou',), ('Taonan',), ('Pingdu',), ('Ji\u00b4an',), ('Longkou',), ('Langfang',), ('Zhoukou',), ('Suining',), ('Yulin',), ('Jinhua',), ('Liu\u00b4an',), ('Shuangcheng',), ('Suizhou',), ('Ankang',), ('Weinan',), ('Longjing',), ('Da\u00b4an',), ('Lengshuijiang',), ('Laiyang',), ('Xianning',), ('Dali',), ('Anda',), ('Jincheng',), ('Longyan',), ('Xichang',), ('Wendeng',), ('Hailun',), ('Binzhou',), ('Linhe',), ('Wuwei',), ('Duyun',), ('Mishan',), ('Shangrao',), ('Changji',), ('Meixian',), ('Yushu',), ('Tiefa',), ('Huai\u00b4an',), ('Leiyang',), ('Zalantun',), ('Weihai',), ('Loudi',), ('Qingzhou',), ('Qidong',), ('Huaihua',), ('Luohe',), ('Chuzhou',), ('Kaiyuan',), ('Linqing',), ('Chaohu',), ('Laohekou',), ('Dujiangyan',), ('Zhumadian',), ('Linchuan',), ('Jiaonan',), ('Sanmenxia',), ('Heyuan',), ('Manzhouli',), ('Lhasa',), ('Lianyuan',), ('Kuytun',), ('Puqi',), ('Hongjiang',), ('Qinzhou',), ('Renqiu',), ('Yuyao',), ('Guigang',), ('Kaili',), ('Yan\u00b4an',), ('Beihai',), ('Xuangzhou',), ('Quzhou',), ('Yong\u00b4an',), ('Zixing',), ('Liyang',), ('Yizheng',), ('Yumen',), ('Liling',), ('Yuncheng',), ('Shanwei',), ('Cixi',), ('Yuanjiang',), ('Bozhou',), ('Jinchang',), ('Fu\u00b4an',), ('Suqian',), ('Shishou',), ('Hengshui',), ('Danjiangkou',), ('Fujin',), ('Sanya',), ('Guangshui',), ('Huangshan',), ('Xingcheng',), ('Zhucheng',), ('Kunshan',), ('Haining',), ('Pingliang',), ('Fuqing',), ('Xinzhou',), ('Jieyang',), ('Zhangjiagang',), ('Tong Xian',), ('Ya\u00b4an',), ('Emeishan',), ('Enshi',), ('Bose',), ('Yuzhou',), ('Tumen',), ('Putian',), ('Linhai',), ('Xilin Hot',), ('Shaowu',), ('Junan',), ('Huaying',), ('Pingyi',), ('Huangyan',), ('Singapore',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "376": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 376,
    "query": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
    "turn_history": {
      "actions": [
        "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'"
      ],
      "observations": [
        "[('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "377": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 377,
    "query": "Which grade has the most high schoolers?",
    "turn_history": {
      "actions": [
        "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[(12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "378": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 378,
    "query": "What are the country codes of countries where people use languages other than English?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'"
      ],
      "observations": [
        "[('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',), ('TUN',), ('TUR',), ('TUV',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('USA',), ('UZB',), ('VAT',), ('VCT',), ('VEN',), ('VIR',), ('VNM',), ('VUT',), ('WLF',), ('WSM',), ('YEM',), ('YUG',), ('ZAF',), ('ZMB',), ('ZWE',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "379": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 379,
    "query": "Return the template type description of the template type with the code AD.",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'"
      ],
      "observations": [
        "[('Advertisement',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "380": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 380,
    "query": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC"
      ],
      "observations": [
        "[('Gonzalo Higua\u00edn ',), ('Fernando Gago',), ('Guti Midfielder',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "381": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 381,
    "query": "What are the nationalities that are shared by at least two people?",
    "turn_history": {
      "actions": [
        "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) > 1"
      ],
      "observations": [
        "[('Russia',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "382": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 382,
    "query": "List the names of all winners who played in both 2013 and 2016.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT winner_name FROM matches WHERE year = 2013 AND winner_name IN (     SELECT winner_name     FROM matches     WHERE year = 2016 )"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "383": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 383,
    "query": "What is the number of employees from each city?",
    "turn_history": {
      "actions": [
        "SELECT City, COUNT(Employee_ID) AS Num_Employees FROM employee GROUP BY City"
      ],
      "observations": [
        "[('Bristol', 3), ('Bath', 3), ('Wasps', 2), ('Sale', 1), ('Leicester', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "384": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 384,
    "query": "Give the name of the country in Asia with the lowest life expectancy.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1"
      ],
      "observations": [
        "[('Afghanistan',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "385": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 385,
    "query": "Find the program which most number of students are enrolled in. List both the id and the summary.",
    "turn_history": {
      "actions": [
        "SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs INNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1"
      ],
      "observations": [
        "[(9, 'Bachelor')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "386": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 386,
    "query": "For each singer name, what is the total sales for their songs?",
    "turn_history": {
      "actions": [
        "SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name"
      ],
      "observations": [
        "[('Liliane Bettencourt', 1646407.0), ('Christy Walton', 651421.0), ('Iris Fontbona', 335000.0), ('Gina Rinehart', 292000.0), ('Jacqueline Mars', 275000.0), ('Susanne Klatten', 261000.0)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "387": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 387,
    "query": "find the code of the country where has the greatest number of players.",
    "turn_history": {
      "actions": [
        "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "388": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 388,
    "query": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
    "turn_history": {
      "actions": [
        "SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm"
      ],
      "observations": [
        "[('Nonmetropolitan Territory of The Netherlands', Decimal('320000')), ('Dependent Territory of the UK', Decimal('191000')), ('Parliamentary Coprincipality', Decimal('78000')), ('Emirate Federation', Decimal('2441000')), ('Federal Republic', Decimal('440455500')), ('US Territory', Decimal('329000')), ('Constitutional Monarchy, Federation', Decimal('60272000')), ('Monarchy (Emirate)', Decimal('617000')), ('Constitutional Monarchy', Decimal('272881000')), ('Monarchy (Sultanate)', Decimal('328000')), ('Federation', Decimal('7160400')), ('Republic', Decimal('338610500')), ('Socialistic Republic', Decimal('11201000')), ('Part of Denmark', Decimal('43000')), ('Overseas Department of France', Decimal('1731000')), ('Special Administrative Region of China', Decimal('7255000')), ('Constitutional Monarchy (Emirate)', Decimal('1972000')), ('Socialistic State', Decimal('5605000')), ('Commonwealth of the US', Decimal('3947000')), ('Nonmetropolitan Territory of France', Decimal('449000')), ('Monarchy', Decimal('599000')), ('Territorial Collectivity of France', Decimal('7000'))]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "389": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 389,
    "query": "What are the age and hometown of teachers?",
    "turn_history": {
      "actions": [
        "SELECT Age, Hometown FROM teacher"
      ],
      "observations": [
        "[('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "390": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 390,
    "query": "Return the grade for the high schooler named Kyle.",
    "turn_history": {
      "actions": [
        "SELECT grade FROM Highschooler WHERE name = 'Kyle'"
      ],
      "observations": [
        "[(12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "391": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 391,
    "query": "How many car makers are there in each continents? List the continent name and the count.",
    "turn_history": {
      "actions": [
        "SELECT c.Continent, COUNT(DISTINCT cm.Maker) AS MakerCount FROM countries c JOIN car_makers cm ON c.CountryName = cm.Country GROUP BY c.Continent"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "392": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 392,
    "query": "What is the most common nationality of people?",
    "turn_history": {
      "actions": [
        "SELECT Nationality, COUNT(*) AS count FROM people GROUP BY Nationality ORDER BY count DESC LIMIT 1"
      ],
      "observations": [
        "[('Russia', 6)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "393": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 393,
    "query": "List the airport code and name in the city of Anthony.",
    "turn_history": {
      "actions": [
        "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'"
      ],
      "observations": [
        "[('ANY', 'Anthony ')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "394": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 394,
    "query": "Find the average rank of winners in all matches.",
    "turn_history": {
      "actions": [
        "SELECT AVG(winner_rank) FROM matches"
      ],
      "observations": [
        "[(None,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "395": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 395,
    "query": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "turn_history": {
      "actions": [
        "SELECT MIN(Cylinders) FROM cars_data WHERE Maker = 'volvo' AND Model = 'model' AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Maker = 'volvo' AND Model = 'model')"
      ],
      "observations": [
        "Error executing query: Unknown column 'Maker' in 'where clause'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "396": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 396,
    "query": "Find the major and age of students who do not have a cat pet.",
    "turn_history": {
      "actions": [
        "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')"
      ],
      "observations": [
        "[(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "397": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 397,
    "query": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000"
      ],
      "observations": [
        "[(1970,), (1971,), (1974,)]"
      ],
      "rewards": [
        0.6666666666666666
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.6666666666666666,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "398": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 398,
    "query": "Count the number of countries in Asia.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM country WHERE Continent = 'Asia'"
      ],
      "observations": [
        "[(51,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "399": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 399,
    "query": "For the cars with 4 cylinders, which model has the largest horsepower?",
    "turn_history": {
      "actions": [
        "SELECT Model FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1"
      ],
      "observations": [
        "Error executing query: Unknown column 'Model' in 'field list'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "400": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 400,
    "query": "List the number of all matches who played in years of 2013 or 2016.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "401": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 401,
    "query": "Find the first name and country code of the oldest player.",
    "turn_history": {
      "actions": [
        "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "402": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 402,
    "query": "What are the names of the countries with no car makers?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryName = car_makers.Country WHERE car_makers.Id IS NULL"
      ],
      "observations": [
        "[('usa',), ('germany',), ('france',), ('japan',), ('italy',), ('sweden',), ('uk',), ('korea',), ('russia',), ('nigeria',), ('australia',), ('new zealand',), ('egypt',), ('mexico',), ('brazil',)]"
      ],
      "rewards": [
        0.4666666666666667
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.4666666666666667,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "403": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 403,
    "query": "Return the name, location and district of all shops in descending order of number of products.",
    "turn_history": {
      "actions": [
        "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC"
      ],
      "observations": [
        "[('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kentt\u00e4'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wikl\u00f6f Holding Arena')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "404": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 404,
    "query": "Find the total number of matches.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM matches"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "405": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 405,
    "query": "List the first name and birth date of all players from the country with code USA.",
    "turn_history": {
      "actions": [
        "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "406": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 406,
    "query": "Which year has most number of concerts?",
    "turn_history": {
      "actions": [
        "SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1"
      ],
      "observations": [
        "[('2014', 3)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "407": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 407,
    "query": "Return the grade that has the greatest number of high schoolers.",
    "turn_history": {
      "actions": [
        "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[(12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "408": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 408,
    "query": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
    "turn_history": {
      "actions": [
        "SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID ORDER BY SUM(Total_spent) DESC LIMIT 1"
      ],
      "observations": [
        "[(3, 'Arjen Robben', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "409": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 409,
    "query": "What is the name of country that has the shortest life expectancy in Asia?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1"
      ],
      "observations": [
        "[('Afghanistan',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "410": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 410,
    "query": "How many cartoons were written by \"Joseph Kuhr\"?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "411": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 411,
    "query": "Count the number of United Airlines flights that arrive in Aberdeen.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "412": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 412,
    "query": "Find the manager name and district of the shop whose number of products is the largest.",
    "turn_history": {
      "actions": [
        "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)"
      ],
      "observations": [
        "[('Ilkka M\u00e4kel\u00e4', 'Lahden Stadion')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "413": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 413,
    "query": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
    "turn_history": {
      "actions": [
        "SELECT d.name FROM Dogs d WHERE d.owner_id IN (     SELECT o.owner_id     FROM Owners o     JOIN Treatments t ON o.owner_id = t.dog_id     GROUP BY o.owner_id     HAVING SUM(t.cost_of_treatment) <= 1000 )"
      ],
      "observations": [
        "[('Mavis',), ('Jeffrey',), ('Bessie',), ('Betty',), ('Holden',)]"
      ],
      "rewards": [
        0.4166666666666667
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.4166666666666667,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "414": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 414,
    "query": "Count the number of dogs of an age below the average.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)"
      ],
      "observations": [
        "[(9,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "415": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 415,
    "query": "Return the document id, template id, and description for the document with the name Robbin CV.",
    "turn_history": {
      "actions": [
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'"
      ],
      "observations": [
        "[(76, 20, 'y')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "416": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 416,
    "query": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
    "turn_history": {
      "actions": [
        "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC"
      ],
      "observations": [
        "[('Fernando Gago', 6), ('Gonzalo Higua\u00edn ', 8), ('Guti Midfielder', 5)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "417": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 417,
    "query": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
    "turn_history": {
      "actions": [
        "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE se.semester_id = [semester_id] GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2"
      ],
      "observations": [
        "Error executing query: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '[semester_id] GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) ' at line 1"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "418": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 418,
    "query": "What is the code of the country with the most players?",
    "turn_history": {
      "actions": [
        "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "419": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 419,
    "query": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
    "turn_history": {
      "actions": [
        "SELECT Name, Location FROM stadium WHERE Stadium_ID IN (     SELECT Stadium_ID     FROM concert     WHERE Year = 2014 ) AND Stadium_ID IN (     SELECT Stadium_ID     FROM concert     WHERE Year = 2015 )"
      ],
      "observations": [
        "[('Somerset Park', 'Ayr United')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "420": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 420,
    "query": "What grade is Kyle in?",
    "turn_history": {
      "actions": [
        "SELECT grade FROM Highschooler WHERE name = 'Kyle'"
      ],
      "observations": [
        "[(12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "421": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 421,
    "query": "What are the names of high schoolers who have likes, and how many likes does each have?",
    "turn_history": {
      "actions": [
        "SELECT Highschooler.name, COUNT(Likes.liked_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(Likes.liked_id) > 0"
      ],
      "observations": [
        "[('John', 1), ('Gabriel', 1), ('Austin', 1), ('Alexis', 1), ('Brittany', 1), ('Kyle', 1), ('Cassandra', 1), ('Gabriel', 1), ('Andrew', 1), ('Jessica', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "422": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 422,
    "query": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
    "turn_history": {
      "actions": [
        "SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC"
      ],
      "observations": [
        "[('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "423": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 423,
    "query": "List the names of conductors in ascending order of age.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM conductor ORDER BY Age ASC"
      ],
      "observations": [
        "[('Antal Dor\u00e1ti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "424": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 424,
    "query": "Show the property type descriptions of properties belonging to that code.",
    "turn_history": {
      "actions": [
        "SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code = [code]"
      ],
      "observations": [
        "Error executing query: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '[code]' at line 1"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "425": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 425,
    "query": "When is the first transcript released? List the date and details.",
    "turn_history": {
      "actions": [
        "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
      ],
      "observations": [
        "[(datetime.datetime(1975, 5, 6, 12, 4, 47), None)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "426": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 426,
    "query": "What is the code of airport that has fewest number of flights?",
    "turn_history": {
      "actions": [
        "SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights ASC LIMIT 1"
      ],
      "observations": [
        "[('ABQ', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "427": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 427,
    "query": "What are the names of the teachers who are aged either 32 or 33?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM teacher WHERE Age IN (32, 33)"
      ],
      "observations": [
        "[('Joseph Huts',), ('John Deloor',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "428": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 428,
    "query": "What are the full names of all players, sorted by birth date?",
    "turn_history": {
      "actions": [
        "SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players ORDER BY birth_date"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "429": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 429,
    "query": "What are flight numbers of flights departing from Airport \"APG\"?",
    "turn_history": {
      "actions": [
        "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'"
      ],
      "observations": [
        "[(28,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "430": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 430,
    "query": "What are the population and life expectancies in Brazil?",
    "turn_history": {
      "actions": [
        "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'"
      ],
      "observations": [
        "[(170115000, 62.9)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "431": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 431,
    "query": "Count the number of likes for each student id.",
    "turn_history": {
      "actions": [
        "SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id"
      ],
      "observations": [
        "[(1025, 1), (1247, 1), (1316, 1), (1501, 1), (1641, 1), (1689, 1), (1709, 1), (1782, 1), (1911, 1), (1934, 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "432": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 432,
    "query": "find the minimum and maximum number of products of all stores.",
    "turn_history": {
      "actions": [
        "SELECT MIN(Number_products), MAX(Number_products) FROM shop"
      ],
      "observations": [
        "[(1600, 15000)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "433": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 433,
    "query": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
    "turn_history": {
      "actions": [
        "SELECT Document_ID, COUNT(*) AS Num_Paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID"
      ],
      "observations": [
        "[(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "434": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 434,
    "query": "List the names of orchestras that have no performance.",
    "turn_history": {
      "actions": [
        "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
      ],
      "observations": [
        "[('San Francisco Symphony Orchestra',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "435": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 435,
    "query": "Give the average life expectancy for countries in Africa which are republics?",
    "turn_history": {
      "actions": [
        "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'"
      ],
      "observations": [
        "[(51.06122,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "436": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 436,
    "query": "List the first and last name of all players in the order of birth date.",
    "turn_history": {
      "actions": [
        "SELECT first_name, last_name FROM players ORDER BY birth_date"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "437": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 437,
    "query": "How many degrees does the engineering department have?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "438": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 438,
    "query": "List all the student details in reversed lexicographical order.",
    "turn_history": {
      "actions": [
        "SELECT * FROM Students ORDER BY last_name DESC"
      ],
      "observations": [
        "[(13, 9, 8, 'Deon', 'Brooklyn', 'Weimann', '(213)445-0399x85208', 'jhuel@example.com', '68095', datetime.datetime(1986, 2, 24, 21, 12, 23), datetime.datetime(2014, 5, 30, 23, 32, 2), 'assumenda'), (1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', datetime.datetime(1971, 2, 5, 7, 28, 23), datetime.datetime(1971, 5, 17, 19, 28, 49), 'quia'), (11, 14, 4, 'Gregg', 'Mossie', 'Schuppe', '(462)246-7921', 'nbruen@example.org', '494', datetime.datetime(1989, 5, 24, 23, 31, 29), datetime.datetime(1975, 10, 9, 0, 49, 27), 'omnis'), (6, 6, 3, 'Stanford', 'Mona', 'Rogahn', '436.613.7683', 'skassulke@example.net', '248', datetime.datetime(1997, 3, 20, 16, 47, 25), datetime.datetime(2016, 4, 9, 12, 27, 4), 'qui'), (14, 12, 11, 'Jordy', 'Osborne', 'Rempel', '(605)919-3594x3661', 'gracie29@example.com', '34458427', datetime.datetime(2004, 12, 24, 12, 36, 46), datetime.datetime(1999, 8, 24, 0, 7, 10), 'et'), (9, 2, 15, 'Reva', 'Golda', 'Osinski', '(507)365-8405', \"qo'kon@example.com\", '39', datetime.datetime(2017, 1, 4, 8, 10, 25), datetime.datetime(1990, 9, 1, 5, 3, 27), 'nesciunt'), (10, 15, 14, 'Helga', 'Cleve', 'Mohr', '677.401.9382', 'nya.lesch@example.net', '43', datetime.datetime(2009, 9, 25, 0, 14, 25), datetime.datetime(2017, 7, 9, 21, 38, 43), 'rerum'), (12, 14, 9, 'Orrin', 'Neal', 'Kemmer', '(982)153-1469x1733', 'beth42@example.org', '6274274', datetime.datetime(2005, 12, 15, 8, 42, 10), datetime.datetime(2006, 8, 4, 17, 26, 49), 'non'), (15, 2, 9, 'Jett', 'Alberta', 'Jaskolski', '877.549.9067x8723', 'mya88@example.org', '156', datetime.datetime(1982, 6, 19, 13, 15, 18), datetime.datetime(1982, 6, 11, 0, 25, 39), 'omnis'), (7, 15, 3, 'Frida', 'Aisha', 'Huel', '1-879-796-8987x164', 'baumbach.lucious@example.org', '668', datetime.datetime(2018, 3, 13, 9, 56, 22), datetime.datetime(1997, 11, 16, 8, 54, 33), 'dolorum'), (3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', datetime.datetime(2007, 8, 29, 23, 25, 41), datetime.datetime(2007, 3, 31, 9, 53, 19), 'facilis'), (5, 9, 9, 'Milton', 'Vaughn', 'Christiansen', '171-642-5684', 'lhartmann@example.org', '', datetime.datetime(1973, 5, 19, 19, 12, 46), datetime.datetime(2007, 11, 28, 12, 50, 21), 'laborum'), (4, 7, 11, 'Jarvis', 'Aaliyah', 'Carroll', '09700166582', 'jillian26@example.net', '141072406', datetime.datetime(2014, 3, 28, 5, 48, 23), datetime.datetime(2007, 8, 2, 4, 12, 58), 'atque'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', datetime.datetime(1976, 10, 26, 2, 33, 6), datetime.datetime(2013, 10, 5, 17, 41, 28), 'autem'), (8, 1, 5, 'Delaney', 'Judd', 'Ankunding', '03174364122', 'dell43@example.net', '402', datetime.datetime(1982, 2, 14, 8, 46, 35), datetime.datetime(2004, 12, 8, 5, 29, 11), 'voluptatem')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "439": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 439,
    "query": "What is the number of distinct languages used around the world?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage"
      ],
      "observations": [
        "[(457,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "440": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 440,
    "query": "Find the states where both owners and professionals live.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT state FROM Owners WHERE state IN (SELECT state FROM Professionals)"
      ],
      "observations": [
        "[('Wisconsin',), ('Indiana',), ('Mississippi',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "441": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 441,
    "query": "What is the average age for all students who do not own any pets ?",
    "turn_history": {
      "actions": [
        "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)"
      ],
      "observations": [
        "[(Decimal('19.6250'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "442": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 442,
    "query": "What are the names and descriptions for all the sections?",
    "turn_history": {
      "actions": [
        "SELECT section_name, section_description FROM Sections"
      ],
      "observations": [
        "[('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "443": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 443,
    "query": "Which breed do the most dogs have? Give me the breed name.",
    "turn_history": {
      "actions": [
        "SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[('Bulldog',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "444": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 444,
    "query": "Find the number of left handed winners who participated in the WTA Championships.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "445": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 445,
    "query": "List the names of the dogs of the rarest breed and the treatment dates of them.",
    "turn_history": {
      "actions": [
        "SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (SELECT breed_code FROM Breeds ORDER BY breed_code LIMIT 1) ORDER BY Treatments.date_of_treatment"
      ],
      "observations": [
        "[('Narciso', datetime.datetime(2018, 2, 26, 9, 8, 53)), ('Hipolito', datetime.datetime(2018, 3, 1, 4, 14, 46)), ('Evangeline', datetime.datetime(2018, 3, 10, 11, 45, 58)), ('Evangeline', datetime.datetime(2018, 3, 13, 12, 22, 58)), ('Hipolito', datetime.datetime(2018, 3, 24, 22, 25, 58))]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "446": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 446,
    "query": "How long is the people\u2019s average life expectancy in Central Africa?",
    "turn_history": {
      "actions": [
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'"
      ],
      "observations": [
        "[(50.31111,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "447": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 447,
    "query": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
    "turn_history": {
      "actions": [
        "SELECT d.name FROM Dogs d INNER JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id HAVING SUM(t.cost_of_treatment) <= 1000"
      ],
      "observations": [
        "[('Houston',), ('Hipolito',), ('Holden',), ('Jesus',), ('Narciso',), ('Kacey',)]"
      ],
      "rewards": [
        0.5
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.5,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "448": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 448,
    "query": "What is Kyle's id?",
    "turn_history": {
      "actions": [
        "SELECT ID FROM Highschooler WHERE name = 'Kyle'"
      ],
      "observations": [
        "[(1934,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "449": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 449,
    "query": "What is the total surface area of the continents Asia and Europe?",
    "turn_history": {
      "actions": [
        "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')"
      ],
      "observations": [
        "[(54930138.9,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "450": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 450,
    "query": "Give the airport code and airport name corresonding to the city Anthony.",
    "turn_history": {
      "actions": [
        "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'"
      ],
      "observations": [
        "[('ANY', 'Anthony ')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "451": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 451,
    "query": "Count the number of different nationalities.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Nationality) FROM people"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "452": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 452,
    "query": "Give the country codes for countries in which people speak langauges that are not English.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'"
      ],
      "observations": [
        "[('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',), ('TUN',), ('TUR',), ('TUV',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('USA',), ('UZB',), ('VAT',), ('VCT',), ('VEN',), ('VIR',), ('VNM',), ('VUT',), ('WLF',), ('WSM',), ('YEM',), ('YUG',), ('ZAF',), ('ZMB',), ('ZWE',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "453": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 453,
    "query": "List the email, cell phone and home phone of all the professionals.",
    "turn_history": {
      "actions": [
        "SELECT email_address, home_phone, cell_number FROM Professionals"
      ],
      "observations": [
        "[('deanna.schuster@example.com', '+71(6)2898266914', '(275)939-2435x80863'), ('lucile.shanahan@example.org', '+02(1)0259033559', '889-940-2676'), ('uboehm@example.org', '325-155-0801x7005', '(369)908-7311x065'), ('lourdes.lowe@example.net', '312.216.3352', '00230569697'), ('mekhi.little@example.org', '1-609-566-2752x25197', '011.193.9081x3186'), ('jacynthe.mclaughlin@example.net', '+43(5)1132733868', '139-321-7313'), ('lambert62@example.org', '022.529.0550x1319', '499-434-0215x1628'), ('goyette.roosevelt@example.net', '891.475.2256', '328.842.3792'), ('schneider.kathryne@example.org', '320-508-6023', '962-983-8109x3509'), ('jerrod.bahringer@example.org', '(230)338-3342x585', '461-801-2600'), ('west.eula@example.net', '(920)304-4499x59146', '609-405-2990'), ('marquardt.furman@example.org', '246-951-0080x76716', '1-181-670-9466'), ('delphine29@example.com', '346.594.3739', '880-659-7577x736'), ('cole.margarita@example.org', '971.048.3763x9404', '1-185-137-1945x409'), ('jeichmann@example.com', '1-138-287-3775', '1-258-285-4707x8020')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "454": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 454,
    "query": "Return the name of the airport with code 'AKO'.",
    "turn_history": {
      "actions": [
        "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'"
      ],
      "observations": [
        "[('Colorado Plains Regional Airport ',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "455": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 455,
    "query": "Which employee received the biggest bonus? Give me the employee name.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY Bonus DESC LIMIT 1"
      ],
      "observations": [
        "[('Louis Deacon',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "456": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 456,
    "query": "How many United Airlines flights go to City 'Aberdeen'?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "457": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 457,
    "query": "Show titles of songs and names of singers.",
    "turn_history": {
      "actions": [
        "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID"
      ],
      "observations": [
        "[(\"Do They Know It's Christmas\", 'Liliane Bettencourt'), (\"F**k It (I Don't Want You Back)\", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "458": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 458,
    "query": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
    "turn_history": {
      "actions": [
        "SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType"
      ],
      "observations": [
        "[('cat', 12.0), ('dog', 13.4)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "459": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 459,
    "query": "Show all paragraph texts for the document \"Customer reviews\".",
    "turn_history": {
      "actions": [
        "SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews')"
      ],
      "observations": [
        "[('Korea',), ('Ukraine',), ('Korea',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "460": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 460,
    "query": "What are the template ids of any templates used in more than a single document?",
    "turn_history": {
      "actions": [
        "SELECT Template_ID FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1)"
      ],
      "observations": [
        "[(14,), (11,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "461": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 461,
    "query": "List the vote ids, phone numbers and states of all votes.",
    "turn_history": {
      "actions": [
        "SELECT vote_id, phone_number, state FROM VOTES"
      ],
      "observations": [
        "[(1, 2147483647, 'NY'), (2, 2147483647, 'NY'), (3, 2147483647, 'CA'), (5, 2147483647, 'NJ')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "462": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 462,
    "query": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
    "turn_history": {
      "actions": [
        "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'"
      ],
      "observations": [
        "[('44.7%', '22.7%')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "463": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 463,
    "query": "Find the number of matches happened in each year.",
    "turn_history": {
      "actions": [
        "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "464": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 464,
    "query": "What is the semester which most student registered in? Show both the name and the id.",
    "turn_history": {
      "actions": [
        "SELECT Semesters.semester_id, Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1"
      ],
      "observations": [
        "[(2, 'summer 2010')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "465": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 465,
    "query": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
    "turn_history": {
      "actions": [
        "SELECT d.owner_id, o.zip_code FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id JOIN (     SELECT owner_id, SUM(charge_amount) AS total_paid     FROM Dogs     JOIN Charges ON Dogs.size_code = Charges.charge_type     GROUP BY owner_id     ORDER BY total_paid DESC     LIMIT 1 ) t ON d.owner_id = t.owner_id"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "466": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 466,
    "query": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT battle.id, battle.name FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'"
      ],
      "observations": [
        "[(8, 'Siege of Constantinople'), (7, 'Battle of Philippopolis'), (6, 'Battle of Boruy'), (5, 'Battle of Messinopolis'), (4, 'Battle of Rodosto')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "467": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 467,
    "query": "What is the name of each teacher and what course they teach?",
    "turn_history": {
      "actions": [
        "SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID"
      ],
      "observations": [
        "[('Gustaaf Deloor', 'Science'), ('Vicente Carretero', 'Math'), ('Kearsley Brown', 'Math'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "468": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 468,
    "query": "What are the birth year and citizenship of singers?",
    "turn_history": {
      "actions": [
        "SELECT Birth_Year, Citizenship FROM singer"
      ],
      "observations": [
        "[(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "469": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 469,
    "query": "Which department offers the most number of degrees? List department name and id.",
    "turn_history": {
      "actions": [
        "SELECT department_id, department_name FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id GROUP BY department_id ORDER BY COUNT(degree_program_id) DESC LIMIT 1"
      ],
      "observations": [
        "Error executing query: Column 'department_id' in field list is ambiguous"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "470": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 470,
    "query": "What is the feature type name of feature AirCon?",
    "turn_history": {
      "actions": [
        "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = 'AirCon'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "471": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 471,
    "query": "Find the semester when both Master students and Bachelor students got enrolled in.",
    "turn_history": {
      "actions": [
        "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Master')  AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor')) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2"
      ],
      "observations": [
        "[(13,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "472": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 472,
    "query": "What are the students' first names who have both cats and dogs as pets?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Fname FROM Student WHERE StuID IN (     SELECT StuID FROM Has_Pet     WHERE PetID IN (         SELECT PetID FROM Pets         WHERE PetType = 'cat'     )     AND StuID IN (         SELECT StuID FROM Has_Pet         WHERE PetID IN (             SELECT PetID FROM Pets             WHERE PetType = 'dog'         )     ) )"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "473": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 473,
    "query": "Find the number of distinct type of pets.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT PetType) FROM Pets"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "474": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 474,
    "query": "What are the names and ids of all countries with at least one car maker?",
    "turn_history": {
      "actions": [
        "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT DISTINCT Country FROM car_makers) ORDER BY CountryName"
      ],
      "observations": [
        "[(3, 'france'), (2, 'germany'), (5, 'italy'), (4, 'japan'), (8, 'korea'), (6, 'sweden'), (7, 'uk'), (1, 'usa')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "475": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 475,
    "query": "What is the total population and maximum GNP in Asia?",
    "turn_history": {
      "actions": [
        "SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'"
      ],
      "observations": [
        "[(Decimal('3705025700'), 3787042.0)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "476": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 476,
    "query": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
    "turn_history": {
      "actions": [
        "SELECT area_code FROM VOTES WHERE contestant_number = 'Tabatha Gehling' AND state IN (     SELECT state     FROM VOTES     WHERE contestant_number = 'Kelly Clauss'     AND phone_number IN (         SELECT phone_number         FROM VOTES         WHERE contestant_number = 'Tabatha Gehling'     ) )"
      ],
      "observations": [
        "Error executing query: Unknown column 'area_code' in 'field list'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "477": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 477,
    "query": "What are the African countries that have a  population less than any country in Asia?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')"
      ],
      "observations": [
        "[('British Indian Ocean Territory',), ('Mayotte',), ('Saint Helena',), ('Sao Tome and Principe',), ('Seychelles',)]"
      ],
      "rewards": [
        0.08620689655172414
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.08620689655172414,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "478": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 478,
    "query": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
    "turn_history": {
      "actions": [
        "SELECT conductor.Name, orchestra.Orchestra FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID"
      ],
      "observations": [
        "[('Antal Dor\u00e1ti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "479": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 479,
    "query": "What is the id of the pet owned by the student whose last name is 'Smith'?",
    "turn_history": {
      "actions": [
        "SELECT PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE LName = 'Smith'"
      ],
      "observations": [
        "Error executing query: Column 'PetID' in field list is ambiguous"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "480": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 480,
    "query": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
    "turn_history": {
      "actions": [
        "SELECT d.owner_id, o.last_name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id JOIN Owners o ON d.owner_id = o.owner_id GROUP BY d.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1"
      ],
      "observations": [
        "[(3, 'Stoltenberg')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "481": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 481,
    "query": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)"
      ],
      "observations": [
        "[('Plaza Museum',), ('Capital Plaza Museum',), ('Jefferson Development Museum',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "482": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 482,
    "query": "Return the country codes for countries that do not speak English.",
    "turn_history": {
      "actions": [
        "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')"
      ],
      "observations": [
        "[('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BVT',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HMD',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IOT',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SGS',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]"
      ],
      "rewards": [
        0.9664804469273743
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.9664804469273743,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "483": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 483,
    "query": "What are the names of all stadiums that did not have a concert in 2014?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)"
      ],
      "observations": [
        "[('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',), ('Recreation Park',), ('Balmoor',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "484": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 484,
    "query": "What is the date and id of the transcript with the least number of results?",
    "turn_history": {
      "actions": [
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id = (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   ORDER BY COUNT(*) ASC   LIMIT 1 )"
      ],
      "observations": [
        "[(2, datetime.datetime(1975, 10, 28, 15, 16, 51))]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "485": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 485,
    "query": "What are the final tables made and best finishes for all poker players?",
    "turn_history": {
      "actions": [
        "SELECT Final_Table_Made, Best_Finish FROM poker_player"
      ],
      "observations": [
        "[(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "486": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 486,
    "query": "Find the average grade of all students who have some friends.",
    "turn_history": {
      "actions": [
        "SELECT AVG(H.grade)  FROM Highschooler H  WHERE H.ID IN (SELECT F.student_id FROM Friend F)"
      ],
      "observations": [
        "[(Decimal('10.4286'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "487": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 487,
    "query": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
    "turn_history": {
      "actions": [
        "SELECT Model FROM model_list WHERE Maker != 'Ford' AND ModelId IN (     SELECT MakeId     FROM car_names     WHERE MakeId IN (         SELECT Id         FROM car_makers         WHERE Country != 'USA'     ) ) AND ModelId IN (     SELECT Id     FROM cars_data     WHERE Weight < 3500 )"
      ],
      "observations": [
        "[('bmw',), ('buick',), ('cadillac',), ('dodge',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "488": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 488,
    "query": "What region does Angola belong to and what is its population?",
    "turn_history": {
      "actions": [
        "SELECT Region, Population FROM country WHERE Name = 'Angola'"
      ],
      "observations": [
        "[('Central Africa', 12878000)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "489": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 489,
    "query": "Show the names of all of the high schooler Kyle's friends.",
    "turn_history": {
      "actions": [
        "SELECT h.name FROM Highschooler h, Friend f WHERE h.ID = f.friend_id AND f.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')"
      ],
      "observations": [
        "[('Jordan',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "490": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 490,
    "query": "Show the names and grades of each high schooler.",
    "turn_history": {
      "actions": [
        "SELECT name, grade FROM Highschooler"
      ],
      "observations": [
        "[('John', 12), ('Haley', 10), ('Alexis', 11), ('Jordan', 12), ('Austin', 11), ('Tiffany', 9), ('Kris', 10), ('Jessica', 11), ('Jordan', 9), ('Brittany', 10), ('Logan', 12), ('Gabriel', 9), ('Cassandra', 9), ('Andrew', 10), ('Gabriel', 11), ('Kyle', 12)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "491": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 491,
    "query": "What is the document name and template id for document with description with the letter 'w' in it?",
    "turn_history": {
      "actions": [
        "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'"
      ],
      "observations": [
        "[('Data base', 11), ('How to read a book', 4)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "492": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 492,
    "query": "Return the type code of the template type with the description \"Book\".",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'"
      ],
      "observations": [
        "[('BK',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "493": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 493,
    "query": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
    "turn_history": {
      "actions": [
        "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'"
      ],
      "observations": [
        "[('Justin Brown', 'France')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "494": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 494,
    "query": "Give the flight numbers of flights leaving from Aberdeen.",
    "turn_history": {
      "actions": [
        "SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "495": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 495,
    "query": "Which airlines have a flight with source airport AHD?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "496": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 496,
    "query": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
    "turn_history": {
      "actions": [
        "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (     SELECT professional_id     FROM Treatments )"
      ],
      "observations": [
        "[(1, 'Employee', 'deanna.schuster@example.com'), (2, 'Employee', 'lucile.shanahan@example.org'), (3, 'Employee', 'uboehm@example.org'), (11, 'Employee', 'west.eula@example.net'), (12, 'Veterenari', 'marquardt.furman@example.org'), (13, 'Veterenari', 'delphine29@example.com'), (15, 'Employee', 'jeichmann@example.com')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "497": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 497,
    "query": "Show the names of conductors that have conducted more than one orchestras.",
    "turn_history": {
      "actions": [
        "SELECT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "498": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 498,
    "query": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
    "turn_history": {
      "actions": [
        "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1"
      ],
      "observations": [
        "[('Kacey', '6', '7.57'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "499": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 499,
    "query": "Return the names of cities that have a population between 160000 and 900000 .",
    "turn_history": {
      "actions": [
        "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000"
      ],
      "observations": [
        "[('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('S\u00e9tif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucum\u00e1n',), ('Lan\u00fas',), ('Merlo',), ('General San Mart\u00edn',), ('Salta',), ('Moreno',), ('Santa F\u00e9',), ('Avellaneda',), ('Tres de Febrero',), ('Mor\u00f3n',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente L\u00f3pez',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bah\u00eda Blanca',), ('Esteban Echeverr\u00eda',), ('Resistencia',), ('Jos\u00e9 C. Paz',), ('Paran\u00e1',), ('Godoy Cruz',), ('Posadas',), ('Guaymall\u00e9n',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuqu\u00e9n',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('G\u00e4nc\u00e4',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Li\u00e8ge',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('S\u00e3o Gon\u00e7alo',), ('Nova Igua\u00e7u',), ('S\u00e3o Lu\u00eds',), ('Macei\u00f3',), ('Duque de Caxias',), ('S\u00e3o Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo Andr\u00e9',), ('Jo\u00e3o Pessoa',), ('Jaboat\u00e3o dos Guararapes',), ('Contagem',), ('S\u00e3o Jos\u00e9 dos Campos',), ('Uberl\u00e2ndia',), ('Feira de Santana',), ('Ribeir\u00e3o Preto',), ('Sorocaba',), ('Niter\u00f3i',), ('Cuiab\u00e1',), ('Juiz de Fora',), ('Aracaju',), ('S\u00e3o Jo\u00e3o de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mau\u00e1',), ('Carapicu\u00edba',), ('Olinda',), ('Campina Grande',), ('S\u00e3o Jos\u00e9 do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goi\u00e2nia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jund\u00eda\u00ed',), ('Canoas',), ('Franca',), ('S\u00e3o Vicente',), ('Maring\u00e1',), ('Montes Claros',), ('An\u00e1polis',), ('Florian\u00f3polis',), ('Petr\u00f3polis',), ('Itaquaquecetuba',), ('Vit\u00f3ria',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Igua\u00e7u',), ('Macap\u00e1',), ('Ilh\u00e9us',), ('Vit\u00f3ria da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santar\u00e9m',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guaruj\u00e1',), ('Ribeir\u00e3o das Neves',), ('Governador Valadares',), ('Taubat\u00e9',), ('Imperatriz',), ('Gravata\u00ed',), ('Embu',), ('Mossor\u00f3',), ('V\u00e1rzea Grande',), ('Petrolina',), ('Barueri',), ('Viam\u00e3o',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Tabo\u00e3o da Serra',), ('S\u00e3o Jos\u00e9 dos Pinhais',), ('Mag\u00e9',), ('Suzano',), ('S\u00e3o Leopoldo',), ('Mar\u00edlia',), ('S\u00e3o Carlos',), ('Sumar\u00e9',), ('Presidente Prudente',), ('Divin\u00f3polis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequi\u00e9',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itabora\u00ed',), ('Santa B\u00e1rbara d\u00b4Oeste',), ('Nova Friburgo',), ('Jacare\u00ed',), ('Ara\u00e7atuba',), ('Barra Mansa',), ('Praia Grande',), ('Marab\u00e1',), ('Crici\u00fama',), ('Boa Vista',), ('Passo Fundo',), ('Dourados',), ('Santa Luzia',), ('Rio Claro',), ('Maracana\u00fa',), ('Guarapuava',), ('Glasgow',), ('Liverpool',), ('Edinburgh',), ('Sheffield',), ('Manchester',), ('Leeds',), ('Bristol',), ('Cardiff',), ('Coventry',), ('Leicester',), ('Bradford',), ('Belfast',), ('Nottingham',), ('Kingston upon Hull',), ('Plymouth',), ('Stoke-on-Trent',), ('Wolverhampton',), ('Derby',), ('Swansea',), ('Southampton',), ('Aberdeen',), ('Northampton',), ('Dudley',), ('Portsmouth',), ('Newcastle upon Tyne',), ('Sunderland',), ('Luton',), ('Swindon',), ('Southend-on-Sea',), ('Walsall',), ('Bournemouth',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Ouagadougou',), ('Bobo-Dioulasso',), ('Bujumbura',), ('Puente Alto',), ('Vi\u00f1a del Mar',), ('Valpara\u00edso',), ('Talcahuano',), ('Antofagasta',), ('San Bernardo',), ('Temuco',), ('Concepci\u00f3n',), ('Rancagua',), ('Arica',), ('Talca',), ('Chill\u00e1n',), ('Iquique',), ('San Jos\u00e9',), ('Djibouti',), ('Santiago de los Caballeros',), ('Cuenca',), ('Machala',), ('Santo Domingo de los Colorados',), ('Portoviejo',), ('Ambato',), ('Manta',), ('Shubra al-Khayma',), ('Port Said',), ('Suez',), ('al-Mahallat al-Kubra',), ('Tanta',), ('al-Mansura',), ('Luxor',), ('Asyut',), ('Bahtim',), ('Zagazig',), ('al-Faiyum',), ('Ismailia',), ('Kafr al-Dawwar',), ('Assuan',), ('Damanhur',), ('al-Minya',), ('Bani Suwayf',), ('Qina',), ('Sawhaj',), ('San Salvador',), ('Asmara',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('M\u00e1laga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('C\u00f3rdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gij\u00f3n',), ('L\u00b4Hospitalet de Llobregat',), ('Granada',), ('A Coru\u00f1a (La Coru\u00f1a)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('M\u00f3stoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iru\u00f1a]',), ('Donostia-San Sebasti\u00e1n',), ('Cartagena',), ('Legan\u00e9s',), ('Fuenlabrada',), ('Almer\u00eda',), ('Terrassa',), ('Alcal\u00e1 de Henares',), ('Burgos',), ('Johannesburg',), ('Port Elizabeth',), ('Pretoria',), ('Inanda',), ('Durban',), ('Vanderbijlpark',), ('Kempton Park',), ('Alberton',), ('Pinetown',), ('Pietermaritzburg',), ('Benoni',), ('Randburg',), ('Umlazi',), ('Bloemfontein',), ('Vereeniging',), ('Wonderboom',), ('Roodepoort',), ('Boksburg',), ('Klerksdorp',), ('Soshanguve',), ('Newcastle',), ('East London',), ('Welkom',), ('Kimberley',), ('Uitenhage',), ('Chatsworth',), ('Mdantsane',), ('Krugersdorp',), ('Botshabelo',), ('Brakpan',), ('Witbank',), ('Oberholzer',), ('Germiston',), ('Springs',), ('Dire Dawa',), ('Cebu',), ('Zamboanga',), ('Pasig',), ('Valenzuela',), ('Las Pi\u00f1as',), ('Antipolo',), ('Taguig',), ('Cagayan de Oro',), ('Para\u00f1aque',), ('Makati',), ('Bacolod',), ('General Santos',), ('Marikina',), ('Dasmari\u00f1as',), ('Muntinlupa',), ('Iloilo',), ('Pasay',), ('Malabon',), ('San Jos\u00e9 del Monte',), ('Bacoor',), ('Iligan',), ('Calamba',), ('Mandaluyong',), ('Butuan',), ('Angeles',), ('Tarlac',), ('Mandaue',), ('Baguio',), ('Batangas',), ('Cainta',), ('San Pedro',), ('Navotas',), ('Cabanatuan',), ('San Fernando',), ('Lipa',), ('Lapu-Lapu',), ('San Pablo',), ('Bi\u00f1an',), ('Taytay',), ('Lucena',), ('Imus',), ('Olongapo',), ('Binangonan',), ('Santa Rosa',), ('Tagum',), ('Tacloban',), ('Malolos',), ('Mabalacat',), ('Cotabato',), ('Meycauayan',), ('Puerto Princesa',), ('Libreville',), ('Kutaisi',), ('Kumasi',), ('Ciudad de Guatemala',), ('Mixco',), ('Bissau',), ('Georgetown',), ('Port-au-Prince',), ('Carrefour',), ('Delmas',), ('Tegucigalpa',), ('San Pedro Sula',), ('Malang',), ('Bandar Lampung',), ('Bekasi',), ('Padang',), ('Surakarta',), ('Banjarmasin',), ('Pekan Baru',), ('Denpasar',), ('Yogyakarta',), ('Pontianak',), ('Samarinda',), ('Jambi',), ('Depok',), ('Cimahi',), ('Balikpapan',), ('Manado',), ('Mataram',), ('Pekalongan',), ('Tegal',), ('Bogor',), ('Ciputat',), ('Pondokgede',), ('Cirebon',), ('Kediri',), ('Ambon',), ('Jember',), ('Cilacap',), ('Cimanggis',), ('Pematang Siantar',), ('Purwokerto',), ('Ciomas',), ('Tasikmalaya',), ('Madiun',), ('Srinagar',), ('Agra',), ('Coimbatore',), ('Thane (Thana)',), ('Allahabad',), ('Meerut',), ('Vishakhapatnam',), ('Jabalpur',), ('Amritsar',), ('Faridabad',), ('Vijayawada',), ('Gwalior',), ('Jodhpur',), ('Nashik (Nasik)',), ('Hubli-Dharwad',), ('Solapur (Sholapur)',), ('Ranchi',), ('Bareilly',), ('Guwahati (Gauhati)',), ('Shambajinagar (Aurangabad)',), ('Cochin (Kochi)',), ('Rajkot',), ('Kota',), ('Thiruvananthapuram (Trivandrum',), ('Pimpri-Chinchwad',), ('Jalandhar (Jullundur)',), ('Gorakhpur',), ('Chandigarh',), ('Mysore',), ('Aligarh',), ('Guntur',), ('Jamshedpur',), ('Ghaziabad',), ('Warangal',), ('Raipur',), ('Moradabad',), ('Durgapur',), ('Amravati',), ('Calicut (Kozhikode)',), ('Bikaner',), ('Bhubaneswar',), ('Kolhapur',), ('Kataka (Cuttack)',), ('Ajmer',), ('Bhavnagar',), ('Tiruchirapalli',), ('Bhilai',), ('Bhiwandi',), ('Saharanpur',), ('Ulhasnagar',), ('Salem',), ('Ujjain',), ('Malegaon',), ('Jamnagar',), ('Bokaro Steel City',), ('Akola',), ('Belgaum',), ('Rajahmundry',), ('Nellore',), ('Udaipur',), ('New Bombay',), ('Bhatpara',), ('Gulbarga',), ('New Delhi',), ('Jhansi',), ('Gaya',), ('Kakinada',), ('Dhule (Dhulia)',), ('Panihati',), ('Nanded (Nander)',), ('Mangalore',), ('Dehra Dun',), ('Kamarhati',), ('Davangere',), ('Asansol',), ('Bhagalpur',), ('Bellary',), ('Barddhaman (Burdwan)',), ('Rampur',), ('Jalgaon',), ('Muzaffarpur',), ('Nizamabad',), ('Muzaffarnagar',), ('Patiala',), ('Shahjahanpur',), ('Kurnool',), ('Tiruppur (Tirupper)',), ('Rohtak',), ('South Dum Dum',), ('Mathura',), ('Chandrapur',), ('Barahanagar (Baranagar)',), ('Darbhanga',), ('Siliguri (Shiliguri)',), ('Raurkela',), ('Ambattur',), ('Panipat',), ('Firozabad',), ('Ichalkaranji',), ('Jammu',), ('Ramagundam',), ('Eluru',), ('Brahmapur',), ('Alwar',), ('Pondicherry',), ('Thanjavur',), ('Bihar Sharif',), ('Tuticorin',), ('Imphal',), ('Latur',), ('Sagar',), ('Farrukhabad-cum-Fatehgarh',), ('Sangli',), ('Parbhani',), ('Nagar Coil',), ('Bijapur',), ('Kukatpalle',), ('Bally',), ('Bhilwara',), ('Ratlam',), ('Avadi',), ('Dindigul',), ('Ahmadnagar',), ('Bilaspur',), ('Shimoga',), ('Kharagpur',), ('Mira Bhayandar',), ('Vellore',), ('Jalna',), ('Burnpur',), ('Anantapur',), ('Allappuzha (Alleppey)',), ('Tirupati',), ('Karnal',), ('Burhanpur',), ('Hisar (Hissar)',), ('Tiruvottiyur',), ('Mirzapur-cum-Vindhyachal',), ('Secunderabad',), ('Nadiad',), ('Dewas',), ('Murwara (Katni)',), ('Ganganagar',), ('Vizianagaram',), ('Mosul',), ('Irbil',), ('Kirkuk',), ('Basra',), ('al-Sulaymaniya',), ('al-Najaf',), ('Karbala',), ('al-Hilla',), ('al-Nasiriya',), ('al-Amara',), ('al-Diwaniya',), ('al-Ramadi',), ('al-Kut',), ('Ahvaz',), ('Qom',), ('Kermanshah',), ('Urmia',), ('Zahedan',), ('Rasht',), ('Hamadan',), ('Kerman',), ('Arak',), ('Ardebil',), ('Yazd',), ('Qazvin',), ('Zanjan',), ('Sanandaj',), ('Bandar-e-Abbas',), ('Khorramabad',), ('Eslamshahr',), ('Borujerd',), ('Abadan',), ('Dezful',), ('Kashan',), ('Sari',), ('Gorgan',), ('Najafabad',), ('Sabzevar',), ('Khomeynishahr',), ('Dublin',), ('Jerusalem',), ('Tel Aviv-Jaffa',), ('Haifa',), ('Rishon Le Ziyyon',), ('Beerseba',), ('Holon',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Graz',), ('Linz',), ('Chiba',), ('Sakai',), ('Kumamoto',), ('Okayama',), ('Sagamihara',), ('Hamamatsu',), ('Kagoshima',), ('Funabashi',), ('Higashiosaka',), ('Hachioji',), ('Niigata',), ('Amagasaki',), ('Himeji',), ('Shizuoka',), ('Urawa',), ('Matsuyama',), ('Matsudo',), ('Kanazawa',), ('Kawaguchi',), ('Ichikawa',), ('Omiya',), ('Utsunomiya',), ('Oita',), ('Nagasaki',), ('Yokosuka',), ('Kurashiki',), ('Gifu',), ('Hirakata',), ('Nishinomiya',), ('Toyonaka',), ('Wakayama',), ('Fukuyama',), ('Fujisawa',), ('Asahikawa',), ('Machida',), ('Nara',), ('Takatsuki',), ('Iwaki',), ('Nagano',), ('Toyohashi',), ('Toyota',), ('Suita',), ('Takamatsu',), ('Koriyama',), ('Okazaki',), ('Kawagoe',), ('Tokorozawa',), ('Toyama',), ('Kochi',), ('Kashiwa',), ('Akita',), ('Miyazaki',), ('Koshigaya',), ('Naha',), ('Aomori',), ('Hakodate',), ('Akashi',), ('Yokkaichi',), ('Fukushima',), ('Morioka',), ('Maebashi',), ('Kasugai',), ('Otsu',), ('Ichihara',), ('Yao',), ('Ichinomiya',), ('Tokushima',), ('Kakogawa',), ('Ibaraki',), ('Neyagawa',), ('Shimonoseki',), ('Yamagata',), ('Fukui',), ('Hiratsuka',), ('Mito',), ('Sasebo',), ('Hachinohe',), ('Takasaki',), ('Shimizu',), ('Kurume',), ('Fuji',), ('Soka',), ('Fuchu',), ('Chigasaki',), ('Atsugi',), ('Numazu',), ('Ageo',), ('Yamato',), ('Matsumoto',), ('Kure',), ('Takarazuka',), ('Kasukabe',), ('Chofu',), ('Odawara',), ('Kofu',), ('Kushiro',), ('Kishiwada',), ('Hitachi',), ('Nagaoka',), ('Itami',), ('Uji',), ('Suzuka',), ('Hirosaki',), ('Ube',), ('Kodaira',), ('Takaoka',), ('Obihiro',), ('Tomakomai',), ('Saga',), ('Sakura',), ('Kamakura',), ('Mitaka',), ('Izumi',), ('Hino',), ('Hadano',), ('Ashikaga',), ('Tsu',), ('Sayama',), ('Yachiyo',), ('Tsukuba',), ('Sanaa',), ('Aden',), ('Taizz',), ('Hodeida',), ('al-Zarqa',), ('Irbid',), ('Novi Sad',), ('Ni\u0161',), ('Phnom Penh',), ('Garoua',), ('Calgary',), ('Toronto',), ('North York',), ('Winnipeg',), ('Edmonton',), ('Mississauga',), ('Scarborough',), ('Vancouver',), ('Etobicoke',), ('London',), ('Hamilton',), ('Ottawa',), ('Laval',), ('Surrey',), ('Brampton',), ('Windsor',), ('Saskatoon',), ('Kitchener',), ('Markham',), ('Regina',), ('Burnaby',), ('Qu\u00e9bec',), ('Qaraghandy',), ('Shymkent',), ('Taraz',), ('Astana',), ('\u00d6skemen',), ('Pavlodar',), ('Semey',), ('Aqt\u00f6be',), ('Qostanay',), ('Petropavl',), ('Oral',), ('Temirtau',), ('Mombasa',), ('Kisumu',), ('Nakuru',), ('Bangui',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai\u00b4an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma\u00b4anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei\u00b4an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Jining',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Bishkek',), ('Osh',), ('Cartagena',), ('C\u00facuta',), ('Bucaramanga',), ('Ibagu\u00e9',), ('Pereira',), ('Santa Marta',), ('Manizales',), ('Bello',), ('Pasto',), ('Neiva',), ('Soledad',), ('Armenia',), ('Villavicencio',), ('Soacha',), ('Valledupar',), ('Monter\u00eda',), ('Itag\u00fc\u00ed',), ('Palmira',), ('Buenaventura',), ('Floridablanca',), ('Sincelejo',), ('Popay\u00e1n',), ('Barrancabermeja',), ('Pointe-Noire',), ('Lubumbashi',), ('Mbuji-Mayi',), ('Kolwezi',), ('Kisangani',), ('Kananga',), ('Likasi',), ('Bukavu',), ('Kikwit',), ('Tshikapa',), ('Matadi',), ('Mbandaka',), ('Hamhung',), ('Chongjin',), ('Nampo',), ('Sinuiju',), ('Wonsan',), ('Phyongsong',), ('Sariwon',), ('Haeju',), ('Kanggye',), ('Kimchaek',), ('Hyesan',), ('Kaesong',), ('Songnam',), ('Puchon',), ('Suwon',), ('Anyang',), ('Chonju',), ('Chongju',), ('Koyang',), ('Ansan',), ('Pohang',), ('Chang-won',), ('Masan',), ('Kwangmyong',), ('Chonan',), ('Chinju',), ('Iksan',), ('Pyongtaek',), ('Kumi',), ('Uijongbu',), ('Kyongju',), ('Kunsan',), ('Cheju',), ('Kimhae',), ('Sunchon',), ('Mokpo',), ('Yong-in',), ('Wonju',), ('Kunpo',), ('Chunchon',), ('Namyangju',), ('Kangnung',), ('Chungju',), ('Andong',), ('Yosu',), ('Kyongsan',), ('Paju',), ('Yangsan',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Zagreb',), ('Split',), ('Rijeka',), ('Santiago de Cuba',), ('Camag\u00fcey',), ('Holgu\u00edn',), ('Santa Clara',), ('Guant\u00e1namo',), ('Nicosia',), ('Vientiane',), ('Riga',), ('Maseru',), ('Tripoli',), ('Monrovia',), ('Bengasi',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('El-Aai\u00fan',), ('Macao',), ('Antananarivo',), ('Skopje',), ('Blantyre',), ('Lilongwe',), ('Ipoh',), ('Johor Baharu',), ('Petaling Jaya',), ('Kelang',), ('Kuala Terengganu',), ('Pinang',), ('Kota Bharu',), ('Kuantan',), ('Taiping',), ('Seremban',), ('Bamako',), ('Rabat',), ('Marrakech',), ('F\u00e8s',), ('Tanger',), ('Sal\u00e9',), ('Mekn\u00e8s',), ('Oujda',), ('K\u00e9nitra',), ('T\u00e9touan',), ('Safi',), ('Nouakchott',), ('Naucalpan de Ju\u00e1rez',), ('Mexicali',), ('Culiac\u00e1n',), ('Acapulco de Ju\u00e1rez',), ('Tlalnepantla de Baz',), ('M\u00e9rida',), ('Chihuahua',), ('San Luis Potos\u00ed',), ('Guadalupe',), ('Toluca',), ('Aguascalientes',), ('Quer\u00e9taro',), ('Morelia',), ('Hermosillo',), ('Saltillo',), ('Torre\u00f3n',), ('Centro (Villahermosa)',), ('San Nicol\u00e1s de los Garza',), ('Durango',), ('Chimalhuac\u00e1n',), ('Tlaquepaque',), ('Atizap\u00e1n de Zaragoza',), ('Veracruz',), ('Cuautitl\u00e1n Izcalli',), ('Irapuato',), ('Tuxtla Guti\u00e9rrez',), ('Tultitl\u00e1n',), ('Reynosa',), ('Benito Ju\u00e1rez',), ('Matamoros',), ('Xalapa',), ('Celaya',), ('Mazatl\u00e1n',), ('Ensenada',), ('Ahome',), ('Cajeme',), ('Cuernavaca',), ('Tonal\u00e1',), ('Valle de Chalco Solidaridad',), ('Nuevo Laredo',), ('Tepic',), ('Tampico',), ('Ixtapaluca',), ('Apodaca',), ('Guasave',), ('G\u00f3mez Palacio',), ('Tapachula',), ('Nicol\u00e1s Romero',), ('Coatzacoalcos',), ('Uruapan',), ('Victoria',), ('Oaxaca de Ju\u00e1rez',), ('Coacalco de Berrioz\u00e1bal',), ('Pachuca de Soto',), ('General Escobedo',), ('Salamanca',), ('Santa Catarina',), ('Tehuac\u00e1n',), ('Chalco',), ('C\u00e1rdenas',), ('Campeche',), ('La Paz',), ('Oth\u00f3n P. Blanco (Chetumal)',), ('Texcoco',), ('La Paz',), ('Metepec',), ('Monclova',), ('Huixquilucan',), ('Chilpancingo de los Bravo',), ('Puerto Vallarta',), ('Fresnillo',), ('Ciudad Madero',), ('Soledad de Graciano S\u00e1nchez',), ('San Juan del R\u00edo',), ('San Felipe del Progreso',), ('C\u00f3rdoba',), ('Tec\u00e1mac',), ('Ocosingo',), ('Carmen',), ('L\u00e1zaro C\u00e1rdenas',), ('Jiutepec',), ('Papantla',), ('Comalcalco',), ('Zamora',), ('Chisinau',), ('Tiraspol',), ('Ulan Bator',), ('Matola',), ('Beira',), ('Nampula',), ('Chimoio',), ('Mandalay',), ('Moulmein (Mawlamyine)',), ('Pegu (Bago)',), ('Bassein (Pathein)',), ('Windhoek',), ('Kathmandu',), ('Niamey',), ('Ogbomosho',), ('Kano',), ('Oshogbo',), ('Ilorin',), ('Abeokuta',), ('Port Harcourt',), ('Zaria',), ('Ilesha',), ('Onitsha',), ('Iwo',), ('Ado-Ekiti',), ('Abuja',), ('Kaduna',), ('Mushin',), ('Maiduguri',), ('Enugu',), ('Ede',), ('Aba',), ('Ife',), ('Ila',), ('Oyo',), ('Ikerre',), ('Benin City',), ('Iseyin',), ('Katsina',), ('Jos',), ('Sokoto',), ('Ilobu',), ('Offa',), ('Ikorodu',), ('Ilawe-Ekiti',), ('Owo',), ('Ikirun',), ('Shaki',), ('Calabar',), ('Ondo',), ('Akure',), ('Oslo',), ('Bergen',), ('Bouak\u00e9',), ('Quetta',), ('Islamabad',), ('Sargodha',), ('Sialkot',), ('Bahawalpur',), ('Sukkur',), ('Jhang',), ('Sheikhupura',), ('Larkana',), ('Gujrat',), ('Mardan',), ('Kasur',), ('Rahim Yar Khan',), ('Sahiwal',), ('Okara',), ('Wah',), ('Dera Ghazi Khan',), ('Mirpur Khas',), ('Nawabshah',), ('Mingora',), ('Chiniot',), ('Ciudad de Panam\u00e1',), ('San Miguelito',), ('Port Moresby',), ('Asunci\u00f3n',), ('Arequipa',), ('Trujillo',), ('Chiclayo',), ('Callao',), ('Iquitos',), ('Chimbote',), ('Huancayo',), ('Piura',), ('Cusco',), ('Pucallpa',), ('Tacna',), ('Ica',), ('Lisboa',), ('Porto',), ('San Juan',), ('Bayam\u00f3n',), ('Ponce',), ('Carolina',), ('L\u00f3dz',), ('Krak\u00f3w',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzesz\u00f3w',), ('Doha',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-\u00c9tienne',), ('Toulon',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('T\u00e2rgu Mures',), ('Kigali',), ('Stockholm',), ('Gothenburg [G\u00f6teborg]',), ('Malm\u00f6',), ('Uppsala',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('D\u00fcsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('N\u00fcrnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('M\u00fcnster',), ('M\u00f6nchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('L\u00fcbeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbr\u00fccken',), ('Mainz',), ('Hamm',), ('Herne',), ('M\u00fclheim an der Ruhr',), ('Solingen',), ('Osnabr\u00fcck',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Ndola',), ('Kitwe',), ('Medina',), ('al-Dammam',), ('al-Taif',), ('Tabuk',), ('Burayda',), ('al-Hufuf',), ('al-Mubarraz',), ('Khamis Mushayt',), ('Hail',), ('Pikine',), ('Dakar',), ('Thi\u00e8s',), ('Kaolack',), ('Ziguinchor',), ('Freetown',), ('Bratislava',), ('Ko\u0161ice',), ('Ljubljana',), ('Colombo',), ('Dehiwala',), ('Moratuwa',), ('Sharq al-Nil',), ('Port Sudan',), ('Kassala',), ('Obeid',), ('Nyala',), ('Wad Madani',), ('al-Qadarif',), ('Kusti',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [\u00c5bo]',), ('Z\u00fcrich',), ('Geneve',), ('Basel',), ('Hims',), ('Hama',), ('Latakia',), ('Dushanbe',), ('Khujand',), ('Tainan',), ('Panchiao',), ('Chungho',), ('Keelung (Chilung)',), ('Sanchung',), ('Hsinchuang',), ('Hsinchu',), ('Chungli',), ('Fengshan',), ('Taoyuan',), ('Chiayi',), ('Hsintien',), ('Changhwa',), ('Yungho',), ('Tucheng',), ('Pingtung',), ('Yungkang',), ('Pingchen',), ('Tali',), ('Taiping',), ('Pate',), ('Fengyuan',), ('Luchou',), ('Dodoma',), ('Mwanza',), ('K\u00f8benhavn',), ('\u00c5rhus',), ('Odense',), ('Aalborg',), ('Nonthaburi',), ('Nakhon Ratchasima',), ('Chiang Mai',), ('Lom\u00e9',), ('N\u00b4Djam\u00e9na',), ('Brno',), ('Ostrava',), ('Plzen',), ('Tunis',), ('Sfax',), ('Ariana',), ('Ettadhamen',), ('Gaziantep',), ('Konya',), ('Mersin (I\u00e7el)',), ('Antalya',), ('Diyarbakir',), ('Kayseri',), ('Eskisehir',), ('Sanliurfa',), ('Samsun',), ('Malatya',), ('Gebze',), ('Denizli',), ('Sivas',), ('Erzurum',), ('Tarsus',), ('Kahramanmaras',), ('El\u00e2zig',), ('Van',), ('Sultanbeyli',), ('Izmit (Kocaeli)',), ('Manisa',), ('Batman',), ('Balikesir',), ('Sakarya (Adapazari)',), ('Ashgabat',), ('Ch\u00e4rjew',), ('Kampala',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('T\u0161ernigiv',), ('T\u0161erkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('T\u0161ernivtsi',), ('Rivne',), ('Krement\u0161uk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kert\u0161',), ('Debrecen',), ('Miskolc',), ('Auckland',), ('Christchurch',), ('Manukau',), ('North Shore',), ('Waitakere',), ('Wellington',), ('Namangan',), ('Samarkand',), ('Andijon',), ('Buhoro',), ('Karsi',), ('Nukus',), ('K\u00fckon',), ('Fargona',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovit\u0161i',), ('Barquisimeto',), ('Valencia',), ('Ciudad Guayana',), ('Petare',), ('Maracay',), ('Barcelona',), ('Matur\u00edn',), ('San Crist\u00f3bal',), ('Ciudad Bol\u00edvar',), ('Cuman\u00e1',), ('M\u00e9rida',), ('Cabimas',), ('Barinas',), ('Turmero',), ('Baruta',), ('Puerto Cabello',), ('Santa Ana de Coro',), ('Los Teques',), ('Punto Fijo',), ('Guarenas',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje T\u0161elny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('T\u0161eboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sot\u0161i',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahat\u0161kala',), ('T\u0161erepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('T\u0161ita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Jo\u0161kar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Nalt\u0161ik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagove\u0161t\u0161ensk',), ('\u0160ahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamt\u0161atski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novot\u0161erkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Haiphong',), ('Da Nang',), ('Bi\u00ean Hoa',), ('Nha Trang',), ('Hue',), ('Can Tho',), ('Cam Pha',), ('Nam Dinh',), ('Quy Nhon',), ('Tallinn',), ('San Jose',), ('Indianapolis',), ('San Francisco',), ('Jacksonville',), ('Columbus',), ('Austin',), ('Baltimore',), ('Memphis',), ('Milwaukee',), ('Boston',), ('Washington',), ('Nashville-Davidson',), ('El Paso',), ('Seattle',), ('Denver',), ('Charlotte',), ('Fort Worth',), ('Portland',), ('Oklahoma City',), ('Tucson',), ('New Orleans',), ('Las Vegas',), ('Cleveland',), ('Long Beach',), ('Albuquerque',), ('Kansas City',), ('Fresno',), ('Virginia Beach',), ('Atlanta',), ('Sacramento',), ('Oakland',), ('Mesa',), ('Tulsa',), ('Omaha',), ('Minneapolis',), ('Honolulu',), ('Miami',), ('Colorado Springs',), ('Saint Louis',), ('Wichita',), ('Santa Ana',), ('Pittsburgh',), ('Arlington',), ('Cincinnati',), ('Anaheim',), ('Toledo',), ('Tampa',), ('Buffalo',), ('Saint Paul',), ('Corpus Christi',), ('Aurora',), ('Raleigh',), ('Newark',), ('Lexington-Fayette',), ('Anchorage',), ('Louisville',), ('Riverside',), ('Saint Petersburg',), ('Bakersfield',), ('Stockton',), ('Birmingham',), ('Jersey City',), ('Norfolk',), ('Baton Rouge',), ('Hialeah',), ('Lincoln',), ('Greensboro',), ('Plano',), ('Rochester',), ('Glendale',), ('Akron',), ('Garland',), ('Madison',), ('Fort Wayne',), ('Fremont',), ('Scottsdale',), ('Montgomery',), ('Shreveport',), ('Augusta-Richmond County',), ('Lubbock',), ('Chesapeake',), ('Mobile',), ('Des Moines',), ('Grand Rapids',), ('Richmond',), ('Yonkers',), ('Spokane',), ('Glendale',), ('Tacoma',), ('Irving',), ('Huntington Beach',), ('Modesto',), ('Durham',), ('Columbus',), ('Orlando',), ('Boise City',), ('Winston-Salem',), ('San Bernardino',), ('Jackson',), ('Little Rock',), ('Salt Lake City',), ('Reno',), ('Newport News',), ('Chandler',), ('Laredo',), ('Henderson',), ('Arlington',), ('Knoxville',), ('Amarillo',), ('Providence',), ('Chula Vista',), ('Worcester',), ('Oxnard',), ('Dayton',), ('Garden Grove',), ('Oceanside',), ('Bulawayo',), ('Chitungwiza',), ('Mount Darwin',), ('Gaza',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "500": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 500,
    "query": "Which of the countries has the most car makers? List the country name.",
    "turn_history": {
      "actions": [
        "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1"
      ],
      "observations": [
        "[('japan',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "501": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 501,
    "query": "Find number of pets owned by students who are older than 20.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "502": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 502,
    "query": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT orchestra.Record_Company FROM orchestra INNER JOIN (     SELECT Orchestra_ID     FROM orchestra     WHERE Year_of_Founded < 2003 ) AS o1 ON orchestra.Orchestra_ID = o1.Orchestra_ID INNER JOIN (     SELECT Orchestra_ID     FROM orchestra     WHERE Year_of_Founded > 2003 ) AS o2 ON orchestra.Orchestra_ID = o2.Orchestra_ID"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "503": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 503,
    "query": "What type of pet is the youngest animal, and how much does it weigh?",
    "turn_history": {
      "actions": [
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)"
      ],
      "observations": [
        "[('dog', 9.3)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "504": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 504,
    "query": "Show names of teachers and the number of courses they teach.",
    "turn_history": {
      "actions": [
        "SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS 'Number of Courses' FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name"
      ],
      "observations": [
        "[('Gustaaf Deloor', 1), ('Vicente Carretero', 1), ('Kearsley Brown', 1), ('Anne Walker', 2), ('Lucy Wong', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "505": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 505,
    "query": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
    "turn_history": {
      "actions": [
        "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) >= 2 )"
      ],
      "observations": [
        "[(4, 'Veterenari', 'Vernice'), (6, 'Veterenari', 'Ruben'), (8, 'Employee', 'Karley'), (9, 'Veterenari', 'Monte'), (10, 'Employee', 'Domenica'), (14, 'Employee', 'Sigurd')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "506": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 506,
    "query": "What is the mobile phone number of the student named Timmothy Ward ?",
    "turn_history": {
      "actions": [
        "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'"
      ],
      "observations": [
        "[('(096)889-8954x524',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "507": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 507,
    "query": "What are the names of the people who teach math courses?",
    "turn_history": {
      "actions": [
        "SELECT teacher.Name  FROM teacher  INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  INNER JOIN course ON course_arrange.Course_ID = course.Course_ID  WHERE course.Course = 'Math'"
      ],
      "observations": [
        "[('Vicente Carretero',), ('Kearsley Brown',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "508": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 508,
    "query": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
    "turn_history": {
      "actions": [
        "SELECT visitor.Name FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 AND museum.Open_Year > 2011 GROUP BY visitor.ID HAVING COUNT(DISTINCT museum.Museum_ID) = 2"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "509": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 509,
    "query": "What are the first names of all players, and their total ranking points?",
    "turn_history": {
      "actions": [
        "SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "510": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 510,
    "query": "List pairs of the owner's first name and the dogs's name.",
    "turn_history": {
      "actions": [
        "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id"
      ],
      "observations": [
        "[('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "511": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 511,
    "query": "What is the age of the oldest dog?",
    "turn_history": {
      "actions": [
        "SELECT MAX(age) FROM Dogs"
      ],
      "observations": [
        "[('9',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "512": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 512,
    "query": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
    "turn_history": {
      "actions": [
        "SELECT se.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS num_enrollments FROM Student_Enrolment se JOIN Students s ON se.student_id = s.student_id GROUP BY se.student_id ORDER BY num_enrollments DESC LIMIT 1"
      ],
      "observations": [
        "[(6, 'Stanford', 'Mona', 'Rogahn', 3)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "513": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 513,
    "query": "Return the number of flights departing from Aberdeen.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "514": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 514,
    "query": "What model has the most different versions?",
    "turn_history": {
      "actions": [
        "SELECT Maker, Model, COUNT(*) AS Versions FROM model_list GROUP BY Maker, Model ORDER BY Versions DESC LIMIT 1"
      ],
      "observations": [
        "[(1, 'amc', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "515": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 515,
    "query": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
    "turn_history": {
      "actions": [
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3"
      ],
      "observations": [
        "[('A Love of a Lifetime', '5.8'), ('Friendly Skies', '5.3'), ('Game Three', '4.4')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "516": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 516,
    "query": "List the names and birth dates of people in ascending alphabetical order of name.",
    "turn_history": {
      "actions": [
        "SELECT Name, Birth_Date FROM people ORDER BY Name ASC"
      ],
      "observations": [
        "[('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "517": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 517,
    "query": "How many 'United Airlines' flights go to Airport 'ASY'?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "518": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 518,
    "query": "Show all document ids and the number of paragraphs in each document. Order by document id.",
    "turn_history": {
      "actions": [
        "SELECT Document_ID, COUNT(*) AS Num_Paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID"
      ],
      "observations": [
        "[(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "519": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 519,
    "query": "For each language, list the number of TV Channels that use it.",
    "turn_history": {
      "actions": [
        "SELECT Language, COUNT(DISTINCT id) AS num_channels FROM TV_Channel GROUP BY Language"
      ],
      "observations": [
        "[('English', 3), ('Italian', 12)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "520": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 520,
    "query": "What is the name of the high schooler who has the greatest number of likes?",
    "turn_history": {
      "actions": [
        "SELECT h.name FROM Highschooler h, Likes l WHERE h.ID = l.student_id GROUP BY l.student_id ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[('John',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "521": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 521,
    "query": "How many courses are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Courses"
      ],
      "observations": [
        "[(15,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "522": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 522,
    "query": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "turn_history": {
      "actions": [
        "SELECT MIN(Cylinders) FROM cars_data WHERE Id IN (SELECT Id FROM car_names WHERE Model = 'volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT Id FROM car_names WHERE Model = 'volvo'))"
      ],
      "observations": [
        "[(8,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "523": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 523,
    "query": "What is the earliest date of a transcript release, and what details can you tell me?",
    "turn_history": {
      "actions": [
        "SELECT MIN(transcript_date), other_details FROM Transcripts"
      ],
      "observations": [
        "Error executing query: In aggregated query without GROUP BY, expression #2 of SELECT list contains nonaggregated column 'student_transcripts_tracking.Transcripts.other_details'; this is incompatible with sql_mode=only_full_group_by"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "524": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 524,
    "query": "Give the airline with abbreviation 'UAL'.",
    "turn_history": {
      "actions": [
        "SELECT * FROM airlines WHERE Abbreviation = 'UAL'"
      ],
      "observations": [
        "[(1, 'United Airlines', 'UAL', 'USA')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "525": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 525,
    "query": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
    "turn_history": {
      "actions": [
        "SELECT cl.CountryCode, cl.Language FROM countrylanguage cl WHERE cl.Percentage = (   SELECT MAX(cl2.Percentage)   FROM countrylanguage cl2   WHERE cl2.CountryCode = cl.CountryCode ) ORDER BY cl.CountryCode"
      ],
      "observations": [
        "[('ABW', 'Papiamento'), ('AFG', 'Pashto'), ('AGO', 'Ovimbundu'), ('AIA', 'English'), ('ALB', 'Albaniana'), ('AND', 'Spanish'), ('ANT', 'Papiamento'), ('ARE', 'Arabic'), ('ARG', 'Spanish'), ('ARM', 'Armenian'), ('ASM', 'Samoan'), ('ATG', 'Creole English'), ('AUS', 'English'), ('AUT', 'German'), ('AZE', 'Azerbaijani'), ('BDI', 'Kirundi'), ('BEL', 'Dutch'), ('BEN', 'Fon'), ('BFA', 'Mossi'), ('BGD', 'Bengali'), ('BGR', 'Bulgariana'), ('BHR', 'Arabic'), ('BHS', 'Creole English'), ('BIH', 'Serbo-Croatian'), ('BLR', 'Belorussian'), ('BLZ', 'English'), ('BMU', 'English'), ('BOL', 'Spanish'), ('BRA', 'Portuguese'), ('BRB', 'Bajan'), ('BRN', 'Malay'), ('BTN', 'Dzongkha'), ('BWA', 'Tswana'), ('CAF', 'Gbaya'), ('CAN', 'English'), ('CCK', 'English'), ('CCK', 'Malay'), ('CHE', 'German'), ('CHL', 'Spanish'), ('CHN', 'Chinese'), ('CIV', 'Akan'), ('CMR', 'Fang'), ('COD', 'Luba'), ('COG', 'Kongo'), ('COK', 'English'), ('COK', 'Maori'), ('COL', 'Spanish'), ('COM', 'Comorian'), ('CPV', 'Crioulo'), ('CRI', 'Spanish'), ('CUB', 'Spanish'), ('CXR', 'Chinese'), ('CXR', 'English'), ('CYM', 'English'), ('CYP', 'Greek'), ('CZE', 'Czech'), ('DEU', 'German'), ('DJI', 'Somali'), ('DMA', 'Creole English'), ('DNK', 'Danish'), ('DOM', 'Spanish'), ('DZA', 'Arabic'), ('ECU', 'Spanish'), ('EGY', 'Arabic'), ('ERI', 'Tigrinja'), ('ESH', 'Arabic'), ('ESP', 'Spanish'), ('EST', 'Estonian'), ('ETH', 'Oromo'), ('FIN', 'Finnish'), ('FJI', 'Fijian'), ('FLK', 'English'), ('FRA', 'French'), ('FRO', 'Faroese'), ('FSM', 'Trukese'), ('GAB', 'Fang'), ('GBR', 'English'), ('GEO', 'Georgiana'), ('GHA', 'Akan'), ('GIB', 'English'), ('GIN', 'Ful'), ('GLP', 'Creole French'), ('GMB', 'Malinke'), ('GNB', 'Crioulo'), ('GNQ', 'Fang'), ('GRC', 'Greek'), ('GRD', 'Creole English'), ('GRL', 'Greenlandic'), ('GTM', 'Spanish'), ('GUF', 'Creole French'), ('GUM', 'English'), ('GUY', 'Creole English'), ('HKG', 'Canton Chinese'), ('HND', 'Spanish'), ('HRV', 'Serbo-Croatian'), ('HTI', 'Haiti Creole'), ('HUN', 'Hungarian'), ('IDN', 'Javanese'), ('IND', 'Hindi'), ('IRL', 'English'), ('IRN', 'Persian'), ('IRQ', 'Arabic'), ('ISL', 'Icelandic'), ('ISR', 'Hebrew'), ('ITA', 'Italian'), ('JAM', 'Creole English'), ('JOR', 'Arabic'), ('JPN', 'Japanese'), ('KAZ', 'Kazakh'), ('KEN', 'Kikuyu'), ('KGZ', 'Kirgiz'), ('KHM', 'Khmer'), ('KIR', 'Kiribati'), ('KNA', 'Creole English'), ('KOR', 'Korean'), ('KWT', 'Arabic'), ('LAO', 'Lao'), ('LBN', 'Arabic'), ('LBR', 'Kpelle'), ('LBY', 'Arabic'), ('LCA', 'Creole French'), ('LIE', 'German'), ('LKA', 'Singali'), ('LSO', 'Sotho'), ('LTU', 'Lithuanian'), ('LUX', 'Luxembourgish'), ('LVA', 'Latvian'), ('MAC', 'Canton Chinese'), ('MAR', 'Arabic'), ('MCO', 'French'), ('MDA', 'Romanian'), ('MDG', 'Malagasy'), ('MDV', 'Dhivehi'), ('MEX', 'Spanish'), ('MHL', 'Marshallese'), ('MKD', 'Macedonian'), ('MLI', 'Bambara'), ('MLT', 'Maltese'), ('MMR', 'Burmese'), ('MNG', 'Mongolian'), ('MNP', 'Philippene Languages'), ('MOZ', 'Makua'), ('MRT', 'Hassaniya'), ('MSR', 'English'), ('MTQ', 'Creole French'), ('MUS', 'Creole French'), ('MWI', 'Chichewa'), ('MYS', 'Malay'), ('MYT', 'Mahor\u00e9'), ('NAM', 'Ovambo'), ('NCL', 'Malenasian Languages'), ('NER', 'Hausa'), ('NFK', 'English'), ('NGA', 'Joruba'), ('NIC', 'Spanish'), ('NIU', 'English'), ('NIU', 'Niue'), ('NLD', 'Dutch'), ('NOR', 'Norwegian'), ('NPL', 'Nepali'), ('NRU', 'Nauru'), ('NZL', 'English'), ('OMN', 'Arabic'), ('PAK', 'Punjabi'), ('PAN', 'Spanish'), ('PCN', 'Pitcairnese'), ('PER', 'Spanish'), ('PHL', 'Pilipino'), ('PLW', 'Palau'), ('PNG', 'Papuan Languages'), ('POL', 'Polish'), ('PRI', 'Spanish'), ('PRK', 'Korean'), ('PRT', 'Portuguese'), ('PRY', 'Spanish'), ('PSE', 'Arabic'), ('PYF', 'Tahitian'), ('QAT', 'Arabic'), ('REU', 'Creole French'), ('ROM', 'Romanian'), ('RUS', 'Russian'), ('RWA', 'Rwanda'), ('SAU', 'Arabic'), ('SDN', 'Arabic'), ('SEN', 'Wolof'), ('SGP', 'Chinese'), ('SHN', 'English'), ('SJM', 'Norwegian'), ('SJM', 'Russian'), ('SLB', 'Malenasian Languages'), ('SLE', 'Mende'), ('SLV', 'Spanish'), ('SMR', 'Italian'), ('SOM', 'Somali'), ('SPM', 'French'), ('STP', 'Crioulo'), ('SUR', 'Sranantonga'), ('SVK', 'Slovak'), ('SVN', 'Slovene'), ('SWE', 'Swedish'), ('SWZ', 'Swazi'), ('SYC', 'Seselwa'), ('SYR', 'Arabic'), ('TCA', 'English'), ('TCD', 'Sara'), ('TGO', 'Ewe'), ('THA', 'Thai'), ('TJK', 'Tadzhik'), ('TKL', 'English'), ('TKL', 'Tokelau'), ('TKM', 'Turkmenian'), ('TMP', 'Portuguese'), ('TMP', 'Sunda'), ('TON', 'Tongan'), ('TTO', 'English'), ('TUN', 'Arabic'), ('TUR', 'Turkish'), ('TUV', 'Tuvalu'), ('TWN', 'Min'), ('TZA', 'Nyamwesi'), ('UGA', 'Ganda'), ('UKR', 'Ukrainian'), ('UMI', 'English'), ('URY', 'Spanish'), ('USA', 'English'), ('UZB', 'Uzbek'), ('VAT', 'Italian'), ('VCT', 'Creole English'), ('VEN', 'Spanish'), ('VGB', 'English'), ('VIR', 'English'), ('VNM', 'Vietnamese'), ('VUT', 'Bislama'), ('WLF', 'Futuna'), ('WLF', 'Wallis'), ('WSM', 'Samoan-English'), ('YEM', 'Arabic'), ('YUG', 'Serbo-Croatian'), ('ZAF', 'Zulu'), ('ZMB', 'Bemba'), ('ZWE', 'Shona')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "526": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 526,
    "query": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'"
      ],
      "observations": [
        "[('Shanghai',), ('Peking',), ('Chongqing',), ('Tianjin',), ('Wuhan',), ('Harbin',), ('Shenyang',), ('Kanton [Guangzhou]',), ('Chengdu',), ('Nanking [Nanjing]',), ('Changchun',), ('Xi\u00b4an',), ('Dalian',), ('Qingdao',), ('Jinan',), ('Hangzhou',), ('Zhengzhou',), ('Shijiazhuang',), ('Taiyuan',), ('Kunming',), ('Changsha',), ('Nanchang',), ('Fuzhou',), ('Lanzhou',), ('Guiyang',), ('Ningbo',), ('Hefei',), ('Urumt\u0161i [\u00dcr\u00fcmqi]',), ('Anshan',), ('Fushun',), ('Nanning',), ('Zibo',), ('Qiqihar',), ('Jilin',), ('Tangshan',), ('Baotou',), ('Shenzhen',), ('Hohhot',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai\u00b4an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma\u00b4anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei\u00b4an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Ulanhot',), ('Korla',), ('Wanxian',), ('Rui\u00b4an',), ('Zhoushan',), ('Liangcheng',), ('Jiaozhou',), ('Taizhou',), ('Taonan',), ('Pingdu',), ('Ji\u00b4an',), ('Longkou',), ('Langfang',), ('Zhoukou',), ('Suining',), ('Yulin',), ('Jinhua',), ('Liu\u00b4an',), ('Shuangcheng',), ('Suizhou',), ('Ankang',), ('Weinan',), ('Longjing',), ('Da\u00b4an',), ('Lengshuijiang',), ('Laiyang',), ('Xianning',), ('Dali',), ('Anda',), ('Jincheng',), ('Longyan',), ('Xichang',), ('Wendeng',), ('Hailun',), ('Binzhou',), ('Linhe',), ('Wuwei',), ('Duyun',), ('Mishan',), ('Shangrao',), ('Changji',), ('Meixian',), ('Yushu',), ('Tiefa',), ('Huai\u00b4an',), ('Leiyang',), ('Zalantun',), ('Weihai',), ('Loudi',), ('Qingzhou',), ('Qidong',), ('Huaihua',), ('Luohe',), ('Chuzhou',), ('Kaiyuan',), ('Linqing',), ('Chaohu',), ('Laohekou',), ('Dujiangyan',), ('Zhumadian',), ('Linchuan',), ('Jiaonan',), ('Sanmenxia',), ('Heyuan',), ('Manzhouli',), ('Lhasa',), ('Lianyuan',), ('Kuytun',), ('Puqi',), ('Hongjiang',), ('Qinzhou',), ('Renqiu',), ('Yuyao',), ('Guigang',), ('Kaili',), ('Yan\u00b4an',), ('Beihai',), ('Xuangzhou',), ('Quzhou',), ('Yong\u00b4an',), ('Zixing',), ('Liyang',), ('Yizheng',), ('Yumen',), ('Liling',), ('Yuncheng',), ('Shanwei',), ('Cixi',), ('Yuanjiang',), ('Bozhou',), ('Jinchang',), ('Fu\u00b4an',), ('Suqian',), ('Shishou',), ('Hengshui',), ('Danjiangkou',), ('Fujin',), ('Sanya',), ('Guangshui',), ('Huangshan',), ('Xingcheng',), ('Zhucheng',), ('Kunshan',), ('Haining',), ('Pingliang',), ('Fuqing',), ('Xinzhou',), ('Jieyang',), ('Zhangjiagang',), ('Tong Xian',), ('Ya\u00b4an',), ('Emeishan',), ('Enshi',), ('Bose',), ('Yuzhou',), ('Tumen',), ('Putian',), ('Linhai',), ('Xilin Hot',), ('Shaowu',), ('Junan',), ('Huaying',), ('Pingyi',), ('Huangyan',), ('Singapore',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "527": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 527,
    "query": "How many concerts are there in year 2014 or 2015?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)"
      ],
      "observations": [
        "[(6,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "528": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 528,
    "query": "List each charge type and its amount.",
    "turn_history": {
      "actions": [
        "SELECT charge_type, charge_amount FROM Charges"
      ],
      "observations": [
        "[('Daily Acco', Decimal('98.0000')), ('Drugs', Decimal('322.0000')), ('Health Che', Decimal('640.0000'))]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "529": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 529,
    "query": "What are all of the episodes ordered by ratings?",
    "turn_history": {
      "actions": [
        "SELECT * FROM TV_series ORDER BY Rating DESC"
      ],
      "observations": [
        "[(1.0, 'A Love of a Lifetime', 'September 24, 2007', '5.8', 9.0, '3.5/9', '9.16', 43.0, '700'), (2.0, 'Friendly Skies', 'October 1, 2007', '5.3', 9.0, '3.2/8', '8.23', 50.0, '701'), (3.0, 'Game Three', 'October 8, 2007', '4.4', 7.0, '2.9/7', '6.94', 61.0, '707'), (4.0, 'The Year of the Rabbit', 'October 15, 2007', '4.3', 7.0, '2.7/7', '6.75', 67.0, '713'), (8.0, 'Winterland', 'November 12, 2007', '4.0', 7.0, '2.4/6', '6.09', 70.0, '707'), (5.0, 'The Legend of Dylan McCleen', 'October 22, 2007', '3.8', 6.0, '2.4/6', '6.06', 72.0, '714'), (6.0, 'Keepers', 'October 29, 2007', '3.7', 6.0, '2.2/6', '5.75', 71.0, '700'), (9.0, 'Emily', 'November 19, 2007', '3.7', 6.0, '2.2/6', '5.61', 66.0, '717'), (10.0, 'Blowback', 'November 26, 2007', '3.7', 6.0, '2.4/6', '6.05', 68.0, '719'), (11.0, 'Home By Another Way', 'December 10, 2007', '3.5', 6.0, '1.7/5', '5.28', 62.0, '728'), (7.0, 'Double Down', 'November 5, 2007', '3.4', 6.0, '2.1/5', '5.13', 80.0, '708'), (12.0, 'The Hanged Man', 'December 17, 2007', '3.0', 5.0, '1.5/4', '4.24', 65.0, '714')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "530": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 530,
    "query": "What is the total population of Gelderland district?",
    "turn_history": {
      "actions": [
        "SELECT SUM(Population) FROM city WHERE District = 'Gelderland'"
      ],
      "observations": [
        "[(Decimal('545548'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "531": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 531,
    "query": "What is the language that is used by the largest number of Asian nations?",
    "turn_history": {
      "actions": [
        "SELECT Language, COUNT(*) AS NumAsianCountries FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE Continent = 'Asia' AND IsOfficial = 'T' GROUP BY Language ORDER BY NumAsianCountries DESC LIMIT 1"
      ],
      "observations": [
        "[('Arabic', 12)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "532": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 532,
    "query": "What is the name and capacity for the stadium with highest average attendance?",
    "turn_history": {
      "actions": [
        "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)"
      ],
      "observations": [
        "[(\"Stark's Park\", 10104)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "533": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 533,
    "query": "How many flights have destination ATO?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "534": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 534,
    "query": "How many matches were played in each year?",
    "turn_history": {
      "actions": [
        "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "535": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 535,
    "query": "What is the average weight of cars each year?",
    "turn_history": {
      "actions": [
        "SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year"
      ],
      "observations": [
        "[(1970, Decimal('3871.9333')), (1971, Decimal('2046.0000')), (1974, Decimal('3640.6364'))]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "536": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 536,
    "query": "Return the names of the contestants whose names contain the substring 'Al' .",
    "turn_history": {
      "actions": [
        "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'"
      ],
      "observations": [
        "[('Jessie Alloway',), ('Alana Bregman',), ('Allie Rogalski',), ('Kurt Walser',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "537": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 537,
    "query": "Show the names of singers and the total sales of their songs.",
    "turn_history": {
      "actions": [
        "SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name"
      ],
      "observations": [
        "[('Liliane Bettencourt', 1646407.0), ('Christy Walton', 651421.0), ('Iris Fontbona', 335000.0), ('Gina Rinehart', 292000.0), ('Jacqueline Mars', 275000.0), ('Susanne Klatten', 261000.0)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "538": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 538,
    "query": "Return the names of the 3 countries with the fewest people.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
      ],
      "observations": [
        "[('Antarctica',), ('Bouvet Island',), ('French Southern territories',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "539": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 539,
    "query": "When did the episode \"A Love of a Lifetime\" air?",
    "turn_history": {
      "actions": [
        "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'"
      ],
      "observations": [
        "[('September 24, 2007',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "540": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 540,
    "query": "What is the id and weight of every pet who is older than 1?",
    "turn_history": {
      "actions": [
        "SELECT PetID, weight FROM Pets WHERE pet_age > 1"
      ],
      "observations": [
        "[(2001, 12.0), (2002, 13.4)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "541": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 541,
    "query": "What is the number of makers of care in France?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE Country = 'France'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "542": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 542,
    "query": "Find the number of cities in each district whose population is greater than the average population of cities?",
    "turn_history": {
      "actions": [
        "SELECT District, COUNT(*)  FROM city  WHERE Population > (SELECT AVG(Population) FROM city)  GROUP BY District"
      ],
      "observations": [
        "[('Kabol', 1), ('Noord-Holland', 1), ('Zuid-Holland', 2), ('Alger', 1), ('Oran', 1), ('Constantine', 1), ('Luanda', 1), ('Dubai', 1), ('Abu Dhabi', 1), ('Distrito Federal', 4), ('Buenos Aires', 12), ('C\u00f3rdoba', 1), ('Santa F\u00e9', 2), ('Tucum\u00e1n', 1), ('Salta', 1), ('Yerevan', 1), ('New South Wales', 1), ('Victoria', 1), ('Queensland', 1), ('West Australia', 1), ('South Australia', 1), ('Baki', 1), ('Dhaka', 1), ('Chittagong', 1), ('Khulna', 1), ('Antwerpen', 1), ('Atlantique', 1), ('Santa Cruz', 1), ('La Paz', 2), ('Cochabamba', 1), ('Federaatio', 1), ('S\u00e3o Paulo', 13), ('Rio de Janeiro', 8), ('Bahia', 2), ('Minas Gerais', 4), ('Cear\u00e1', 1), ('Paran\u00e1', 2), ('Pernambuco', 3), ('Rio Grande do Sul', 1), ('Amazonas', 1), ('Par\u00e1', 2), ('Goi\u00e1s', 1), ('Maranh\u00e3o', 1), ('Alagoas', 1), ('Piau\u00ed', 1), ('Rio Grande do Norte', 1), ('Mato Grosso do Sul', 1), ('Para\u00edba', 2), ('Mato Grosso', 1), ('Sergipe', 1), ('Santa Catarina', 1), ('England', 7), ('Scotland', 2), ('Grad Sofija', 1), ('Kadiogo', 1), ('Santiago', 3), ('Djibouti', 1), ('Distrito Nacional', 1), ('Guayas', 1), ('Pichincha', 1), ('Kairo', 1), ('Aleksandria', 1), ('Giza', 1), ('al-Qalyubiya', 1), ('Port Said', 1), ('Suez', 1), ('al-Gharbiya', 2), ('al-Daqahliya', 1), ('Luxor', 1), ('San Salvador', 1), ('Maekel', 1), ('Madrid', 1), ('Katalonia', 1), ('Valencia', 1), ('Andalusia', 2), ('Aragonia', 1), ('Baskimaa', 1), ('Canary Islands', 1), ('Murcia', 1), ('Western Cape', 1), ('Gauteng', 7), ('Eastern Cape', 1), ('KwaZulu-Natal', 4), ('Addis Abeba', 1), ('National Capital Reg', 12), ('Southern Mindanao', 2), ('Central Visayas', 1), ('Western Mindanao', 1), ('Southern Tagalog', 2), ('Northern Mindanao', 1), ('Western Visayas', 2), ('Estuaire', 1), ('Tbilisi', 1), ('Greater Accra', 1), ('Ashanti', 1), ('Guatemala', 1), ('Conakry', 1), ('Ouest', 1), ('Distrito Central', 1), ('Cort\u00e9s', 1), ('Kowloon and New Kowl', 1), ('Hongkong', 1), ('Jakarta Raya', 1), ('East Java', 2), ('West Java', 4), ('Sumatera Utara', 1), ('Sumatera Selatan', 1), ('Central Java', 2), ('Sulawesi Selatan', 1), ('Lampung', 1), ('Sumatera Barat', 1), ('Kalimantan Selatan', 1), ('Riau', 1), ('Bali', 1), ('Yogyakarta', 1), ('Kalimantan Barat', 1), ('Kalimantan Timur', 1), ('Jambi', 1), ('Maharashtra', 13), ('Delhi', 1), ('West Bengali', 3), ('Tamil Nadu', 5), ('Andhra Pradesh', 5), ('Gujarat', 5), ('Karnataka', 3), ('Uttar Pradesh', 12), ('Rajasthan', 5), ('Madhya Pradesh', 5), ('Punjab', 11), ('Bihar', 1), ('Jammu and Kashmir', 1), ('Haryana', 1), ('Jharkhand', 2), ('Assam', 1), ('Kerala', 3), ('Chandigarh', 1), ('Chhatisgarh', 2), ('Orissa', 2), ('Baghdad', 1), ('Ninawa', 1), ('Irbil', 1), ('al-Tamim', 1), ('Basra', 1), ('al-Sulaymaniya', 1), ('Teheran', 2), ('Khorasan', 1), ('Esfahan', 1), ('East Azerbaidzan', 1), ('Fars', 1), ('Khuzestan', 1), ('Qom', 1), ('Kermanshah', 1), ('West Azerbaidzan', 1), ('Sistan va Baluchesta', 1), ('Gilan', 1), ('Hamadan', 1), ('Kerman', 1), ('Markazi', 1), ('Leinster', 1), ('Jerusalem', 1), ('Latium', 1), ('Lombardia', 1), ('Campania', 1), ('Piemonte', 1), ('Sisilia', 1), ('Liguria', 1), ('Emilia-Romagna', 1), ('Toscana', 1), ('Wien', 1), ('Tokyo-to', 3), ('Kanagawa', 5), ('Osaka', 6), ('Aichi', 2), ('Hokkaido', 2), ('Kyoto', 1), ('Hyogo', 4), ('Fukuoka', 2), ('Hiroshima', 2), ('Miyagi', 1), ('Chiba', 4), ('Kumamoto', 1), ('Okayama', 2), ('Shizuoka', 2), ('Kagoshima', 1), ('Niigata', 1), ('Saitama', 3), ('Ehime', 1), ('Ishikawa', 1), ('Tochigi', 1), ('Oita', 1), ('Nagasaki', 1), ('Gifu', 1), ('Wakayama', 1), ('Nara', 1), ('Fukushima', 1), ('Nagano', 1), ('Sanaa', 1), ('Aden', 1), ('Amman', 1), ('al-Zarqa', 1), ('Central Serbia', 1), ('Phnom Penh', 1), ('Littoral', 1), ('Centre', 1), ('Qu\u00e9bec', 1), ('Alberta', 2), ('Ontario', 4), ('Manitoba', 1), ('British Colombia', 1), ('Almaty Qalasy', 1), ('Qaraghandy', 1), ('South Kazakstan', 1), ('Nairobi', 1), ('Coast', 1), ('Bangui', 1), ('Shanghai', 1), ('Peking', 1), ('Chongqing', 1), ('Tianjin', 1), ('Hubei', 4), ('Heilongjiang', 9), ('Liaoning', 12), ('Guangdong', 4), ('Sichuan', 3), ('Jiangsu', 7), ('Jilin', 4), ('Shaanxi', 2), ('Shandong', 7), ('Zhejiang', 3), ('Henan', 7), ('Hebei', 6), ('Shanxi', 3), ('Yunnan', 1), ('Hunan', 4), ('Jiangxi', 2), ('Fujian', 2), ('Gansu', 1), ('Guizhou', 2), ('Anhui', 5), ('Xinxiang', 1), ('Guangxi', 3), ('Inner Mongolia', 3), ('Qinghai', 1), ('Ningxia', 1), ('Hainan', 1), ('Bishkek shaary', 1), ('Santaf\u00e9 de Bogot\u00e1', 1), ('Valle', 1), ('Antioquia', 1), ('Atl\u00e1ntico', 1), ('Bol\u00edvar', 2), ('Norte de Santander', 1), ('Santander', 1), ('Tolima', 1), ('Risaralda', 1), ('Magdalena', 1), ('Brazzaville', 1), ('Kouilou', 1), ('Kinshasa', 1), ('Shaba', 2), ('East Kasai', 1), ('Haute-Za\u00efre', 1), ('West Kasai', 1), ('Pyongyang-si', 1), ('Hamgyong N', 1), ('Hamgyong P', 1), ('Nampo-si', 1), ('Seoul', 1), ('Pusan', 1), ('Inchon', 1), ('Taegu', 1), ('Taejon', 1), ('Kwangju', 1), ('Kyongsangnam', 3), ('Kyonggi', 7), ('Chollabuk', 1), ('Chungchongbuk', 1), ('Kyongsangbuk', 1), ('Attika', 1), ('Central Macedonia', 1), ('Grad Zagreb', 1), ('La Habana', 1), ('Santiago de Cuba', 1), ('Viangchan', 1), ('Riika', 1), ('Beirut', 1), ('Montserrado', 1), ('Tripoli', 1), ('Bengasi', 1), ('Vilna', 1), ('Kaunas', 1), ('Macau', 1), ('Antananarivo', 1), ('Skopje', 1), ('Blantyre', 1), ('Lilongwe', 1), ('Wilayah Persekutuan', 1), ('Perak', 1), ('Bamako', 1), ('Casablanca', 1), ('Rabat-Sal\u00e9-Zammour-Z', 2), ('Marrakech-Tensift-Al', 1), ('F\u00e8s-Boulemane', 1), ('Tanger-T\u00e9touan', 1), ('Mekn\u00e8s-Tafilalet', 1), ('Oriental', 1), ('Nouakchott', 1), ('Jalisco', 3), ('M\u00e9xico', 9), ('Puebla', 1), ('Chihuahua', 2), ('Baja California', 3), ('Guanajuato', 3), ('Nuevo Le\u00f3n', 3), ('Sinaloa', 3), ('Guerrero', 1), ('Yucat\u00e1n', 1), ('San Luis Potos\u00ed', 1), ('Aguascalientes', 1), ('Quer\u00e9taro de Arteaga', 1), ('Michoac\u00e1n de Ocampo', 1), ('Sonora', 2), ('Coahuila de Zaragoza', 2), ('Tabasco', 1), ('Durango', 1), ('Veracruz', 2), ('Chiapas', 1), ('Tamaulipas', 2), ('Quintana Roo', 1), ('Chisinau', 1), ('Ulaanbaatar', 1), ('Maputo', 2), ('Sofala', 1), ('Rangoon [Yangon]', 1), ('Mandalay', 1), ('Central', 2), ('Managua', 1), ('Niamey', 1), ('Lagos', 1), ('Oyo & Osun', 5), ('Kano & Jigawa', 1), ('Kwara & Kogi', 1), ('Ogun', 1), ('Rivers & Bayelsa', 1), ('Kaduna', 1), ('Anambra & Enugu & Eb', 1), ('Ondo & Ekiti', 1), ('Oslo', 1), ('Abidjan', 1), ('Sindh', 2), ('Nothwest Border Prov', 1), ('Baluchistan', 1), ('Islamabad', 1), ('Panam\u00e1', 1), ('Asunci\u00f3n', 1), ('Lima', 1), ('Arequipa', 1), ('La Libertad', 1), ('Lambayeque', 1), ('Callao', 1), ('Loreto', 1), ('Lisboa', 2), ('San Juan', 1), ('Mazowieckie', 1), ('Lodzkie', 1), ('Malopolskie', 1), ('Dolnoslaskie', 1), ('Wielkopolskie', 1), ('Pomorskie', 1), ('Zachodnio-Pomorskie', 1), ('Kujawsko-Pomorskie', 1), ('Lubelskie', 1), ('Doha', 1), ('\u00cele-de-France', 1), ('Provence-Alpes-C\u00f4te', 1), ('Rh\u00f4ne-Alpes', 1), ('Midi-Pyr\u00e9n\u00e9es', 1), ('Bukarest', 1), ('West G\u00f6tanmaan l\u00e4n', 1), ('Berliini', 1), ('Hamburg', 1), ('Baijeri', 2), ('Nordrhein-Westfalen', 7), ('Hessen', 1), ('Baden-W\u00fcrttemberg', 1), ('Bremen', 1), ('Niedersachsen', 1), ('Saksi', 2), ('Lusaka', 1), ('Riyadh', 1), ('Mekka', 3), ('Medina', 1), ('al-Sharqiya', 1), ('Cap-Vert', 2), ('Western', 2), ('\u2013', 1), ('Bratislava', 1), ('Banaadir', 1), ('Khartum', 3), ('Newmaa', 1), ('Damascus', 1), ('Aleppo', 1), ('Hims', 1), ('Karotegin', 1), ('Taipei', 5), ('Kaohsiung', 1), ('Taichung', 1), ('Tainan', 1), ('Keelung', 1), ('Hsinchu', 1), ('Dar es Salaam', 1), ('K\u00f8benhavn', 1), ('Bangkok', 1), ('Maritime', 1), ('Chari-Baguirmi', 1), ('Hlavn\u00ed mesto Praha', 1), ('Jizn\u00ed Morava', 1), ('Tunis', 1), ('Istanbul', 1), ('Ankara', 1), ('Izmir', 1), ('Adana', 1), ('Bursa', 1), ('Gaziantep', 1), ('Konya', 1), ('I\u00e7el', 1), ('Antalya', 1), ('Diyarbakir', 1), ('Kayseri', 1), ('Eskisehir', 1), ('Sanliurfa', 1), ('Ahal', 1), ('Kiova', 1), ('Harkova', 1), ('Dnipropetrovsk', 2), ('Donetsk', 3), ('Odesa', 1), ('Zaporizzja', 1), ('Lviv', 1), ('Mykolajiv', 1), ('Lugansk', 1), ('Vinnytsja', 1), ('Herson', 1), ('Budapest', 1), ('Montevideo', 1), ('Auckland', 1), ('Toskent Shahri', 1), ('Namangan', 1), ('Samarkand', 1), ('Horad Minsk', 1), ('Gomel', 1), ('Mogiljov', 1), ('Zulia', 1), ('Lara', 1), ('Carabobo', 1), ('Miranda', 1), ('Aragua', 1), ('Moscow (City)', 1), ('Pietari', 1), ('Novosibirsk', 1), ('Nizni Novgorod', 1), ('Sverdlovsk', 2), ('Samara', 2), ('Omsk', 1), ('Tatarstan', 2), ('Ba\u0161kortostan', 1), ('T\u0161eljabinsk', 2), ('Rostov-na-Donu', 1), ('Perm', 1), ('Volgograd', 1), ('Voronez', 1), ('Krasnojarsk', 1), ('Saratov', 1), ('Uljanovsk', 1), ('Udmurtia', 1), ('Krasnodar', 2), ('Jaroslavl', 1), ('Habarovsk', 1), ('Primorje', 1), ('Irkutsk', 1), ('Altai', 1), ('Kemerovo', 2), ('Penza', 1), ('Rjazan', 1), ('Orenburg', 1), ('Lipetsk', 1), ('Tula', 1), ('Tjumen', 1), ('Astrahan', 1), ('Tomsk', 1), ('Kirov', 1), ('Ivanovo', 1), ('T\u0161uvassia', 1), ('Brjansk', 1), ('Tver', 1), ('Kursk', 1), ('Kaliningrad', 1), ('Murmansk', 1), ('Burjatia', 1), ('Kurgan', 1), ('Arkangeli', 1), ('Smolensk', 1), ('Ho Chi Minh City', 1), ('Hanoi', 1), ('Haiphong', 1), ('Quang Nam-Da Nang', 1), ('Harjumaa', 1), ('New York', 1), ('California', 8), ('Illinois', 1), ('Texas', 6), ('Pennsylvania', 1), ('Arizona', 3), ('Michigan', 1), ('Indiana', 1), ('Florida', 2), ('Ohio', 2), ('Maryland', 1), ('Tennessee', 2), ('Wisconsin', 1), ('Massachusetts', 1), ('District of Columbia', 1), ('Washington', 1), ('Colorado', 2), ('North Carolina', 1), ('Oregon', 1), ('Oklahoma', 2), ('Louisiana', 1), ('Nevada', 1), ('New Mexico', 1), ('Missouri', 1), ('Virginia', 1), ('Georgia', 1), ('Nebraska', 1), ('Minnesota', 1), ('Hawaii', 1), ('Harare', 1), ('Bulawayo', 1), ('Gaza', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "543": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 543,
    "query": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
    "turn_history": {
      "actions": [
        "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'"
      ],
      "observations": [
        "[('uboehm@example.org',), ('mekhi.little@example.org',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "544": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 544,
    "query": "Find the names of employees who never won any award in the evaluation.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
      ],
      "observations": [
        "[('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "545": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 545,
    "query": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
    "turn_history": {
      "actions": [
        "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Id FROM car_makers GROUP BY Id HAVING COUNT(DISTINCT Maker) > 3) AND Id IN (SELECT Id FROM model_list GROUP BY Id HAVING COUNT(DISTINCT Model) >= 2)"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "546": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 546,
    "query": "What are the template ids with template type description \"Presentation\".",
    "turn_history": {
      "actions": [
        "SELECT Template_ID FROM Templates  WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')"
      ],
      "observations": [
        "[(6,), (7,), (10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "547": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 547,
    "query": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "turn_history": {
      "actions": [
        "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (     SELECT winner_id     FROM matches     WHERE winner_rank_points = (         SELECT MAX(winner_rank_points)         FROM matches     ) )"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "548": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 548,
    "query": "Show all distinct template type codes for all templates.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Template_Type_Code FROM Templates"
      ],
      "observations": [
        "[('AD',), ('BK',), ('CV',), ('PP',), ('PPT',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "549": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 549,
    "query": "Which shop has the most employees? Give me the shop name.",
    "turn_history": {
      "actions": [
        "SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1"
      ],
      "observations": [
        "[('FC Haka',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "550": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 550,
    "query": "Show different citizenships and the maximum net worth of singers of each citizenship.",
    "turn_history": {
      "actions": [
        "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
      ],
      "observations": [
        "[('France', 30.0), ('United States', 28.8), ('Chile', 17.4), ('Australia', 17.0), ('Germany', 14.3)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "551": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 551,
    "query": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "turn_history": {
      "actions": [
        "SELECT student_course_id, COUNT(*) AS course_count FROM Transcript_Contents GROUP BY student_course_id ORDER BY course_count DESC LIMIT 1"
      ],
      "observations": [
        "[(0, 4)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "552": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 552,
    "query": "Return the number of airlines in the USA.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'"
      ],
      "observations": [
        "[(12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "553": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 553,
    "query": "List names of conductors in descending order of years of work.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
      ],
      "observations": [
        "[('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Dor\u00e1ti',), ('Seiji Ozawa',), ('Colin Davis',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "554": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 554,
    "query": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
    "turn_history": {
      "actions": [
        "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'"
      ],
      "observations": [
        "[('uboehm@example.org',), ('mekhi.little@example.org',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "555": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 555,
    "query": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'"
      ],
      "observations": [
        "[('Battle of Adrianople',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "556": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 556,
    "query": "What are the region and population of Angola?",
    "turn_history": {
      "actions": [
        "SELECT Region, Population FROM country WHERE Name = 'Angola'"
      ],
      "observations": [
        "[('Central Africa', 12878000)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "557": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 557,
    "query": "What are all the course names of the courses which ever have students enrolled in?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Courses.course_name FROM Courses INNER JOIN Sections ON Courses.course_id = Sections.course_id INNER JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id"
      ],
      "observations": [
        "[('math',), ('nlp',), ('ds',), ('cal',), ('pl',), ('en',), ('fr',), ('la',)]"
      ],
      "rewards": [
        0.38461538461538464
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.38461538461538464,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "558": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 558,
    "query": "Give me Brazil\u2019s population and life expectancies.",
    "turn_history": {
      "actions": [
        "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'"
      ],
      "observations": [
        "[(170115000, 62.9)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "559": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 559,
    "query": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
    "turn_history": {
      "actions": [
        "SELECT MakeId, Make FROM car_names WHERE MakeId IN (   SELECT Id   FROM car_makers   WHERE Id IN (     SELECT Id     FROM cars_data     WHERE Horsepower > (       SELECT MIN(Horsepower)       FROM cars_data     )   ) AND Id IN (     SELECT Id     FROM car_makers     WHERE Country IN (       SELECT Country       FROM car_makers       WHERE Id IN (         SELECT Id         FROM cars_data         WHERE Cylinders < 4       )     )   ) )"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "560": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 560,
    "query": "How many different store locations are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Location) FROM shop"
      ],
      "observations": [
        "[(9,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "561": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 561,
    "query": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
    "turn_history": {
      "actions": [
        "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980"
      ],
      "observations": [
        "[('18.0',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "562": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 562,
    "query": "What are flight numbers of Airline \"United Airlines\"?",
    "turn_history": {
      "actions": [
        "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "563": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 563,
    "query": "What are the id and name of the museum visited most times?",
    "turn_history": {
      "actions": [
        "SELECT Museum_ID, Name FROM museum WHERE Museum_ID = (     SELECT Museum_ID     FROM visit     GROUP BY Museum_ID     ORDER BY SUM(Num_of_Ticket) DESC     LIMIT 1 )"
      ],
      "observations": [
        "[(2, 'Capital Plaza Museum')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "564": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 564,
    "query": "What is the average weight and year for each year?",
    "turn_history": {
      "actions": [
        "SELECT Year, AVG(Weight), AVG(Year) FROM cars_data GROUP BY Year"
      ],
      "observations": [
        "[(1970, Decimal('3871.9333'), Decimal('1970.0000')), (1971, Decimal('2046.0000'), Decimal('1971.0000')), (1974, Decimal('3640.6364'), Decimal('1974.0000'))]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "565": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 565,
    "query": "What is the birth date of the poker player with the lowest earnings?",
    "turn_history": {
      "actions": [
        "SELECT Birth_Date FROM people WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1)"
      ],
      "observations": [
        "[('August 8, 1986',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "566": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 566,
    "query": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000"
      ],
      "observations": [
        "[(1970,), (1974,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "567": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 567,
    "query": "What are the names of the singers that have more than one songs?",
    "turn_history": {
      "actions": [
        "SELECT singer.Name FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING COUNT(*) > 1"
      ],
      "observations": [
        "[('Liliane Bettencourt',), ('Christy Walton',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "568": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 568,
    "query": "How many high schoolers are in each grade?",
    "turn_history": {
      "actions": [
        "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade"
      ],
      "observations": [
        "[(12, 4), (10, 4), (11, 4), (9, 4)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "569": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 569,
    "query": "What is the name of the course with the most students enrolled?",
    "turn_history": {
      "actions": [
        "SELECT Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC LIMIT 1"
      ],
      "observations": [
        "[('pl',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "570": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 570,
    "query": "What is the total ticket expense of the visitors whose membership level is 1?",
    "turn_history": {
      "actions": [
        "SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE Level_of_membership = 1"
      ],
      "observations": [
        "[(570.84,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "571": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 571,
    "query": "Who owns the youngest dog? Give me his or her last name.",
    "turn_history": {
      "actions": [
        "SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE date_of_birth = (SELECT MIN(date_of_birth) FROM Dogs))"
      ],
      "observations": [
        "[('Haley',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "572": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 572,
    "query": "What are the names of singers ordered by ascending net worth?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
      ],
      "observations": [
        "[('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "573": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 573,
    "query": "Show template ids, version numbers, and template type codes for all templates.",
    "turn_history": {
      "actions": [
        "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates"
      ],
      "observations": [
        "[(1, 5, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "574": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 574,
    "query": "What is the total number of singers?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM singer"
      ],
      "observations": [
        "[(6,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "575": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 575,
    "query": "What is the number of cartoones written by Joseph Kuhr?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "576": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 576,
    "query": "Count the number of high schoolers in grades 9 or 10.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)"
      ],
      "observations": [
        "[(8,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "577": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 577,
    "query": "What is the document id, template id and description for document named \"Robbin CV\"?",
    "turn_history": {
      "actions": [
        "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'"
      ],
      "observations": [
        "[(76, 20, 'y')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "578": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 578,
    "query": "Count the number of documents that use the PPT template type.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT'"
      ],
      "observations": [
        "[(3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "579": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 579,
    "query": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
    "turn_history": {
      "actions": [
        "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' ORDER BY Percentage DESC LIMIT 1"
      ],
      "observations": [
        "[('CUB',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "580": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 580,
    "query": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955"
      ],
      "observations": [
        "[('France',), ('Chile',), ('United States',), ('Germany',)]"
      ],
      "rewards": [
        0.25
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.25,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "581": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 581,
    "query": "What are the codes of countries with more than 50 players?",
    "turn_history": {
      "actions": [
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "582": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 582,
    "query": "What is the abbreviation of Airline \"JetBlue Airways\"?",
    "turn_history": {
      "actions": [
        "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'"
      ],
      "observations": [
        "[('JetBlue',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "583": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 583,
    "query": "How many distinct nationalities are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Nationality) FROM people"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "584": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 584,
    "query": "What is the name of the breed with the most dogs?",
    "turn_history": {
      "actions": [
        "SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)"
      ],
      "observations": [
        "[('Bulldog',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "585": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 585,
    "query": "What is the number of car models created by the car maker American Motor Company?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM model_list WHERE Maker = 'American Motor Company'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "586": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 586,
    "query": "What are the names of conductors, sorted descending by the number of years they have worked?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
      ],
      "observations": [
        "[('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Dor\u00e1ti',), ('Seiji Ozawa',), ('Colin Davis',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "587": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 587,
    "query": "List all airline names and their abbreviations in \"USA\".",
    "turn_history": {
      "actions": [
        "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'"
      ],
      "observations": [
        "[('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "588": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 588,
    "query": "Show all template type codes and the number of documents using each type.",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code, COUNT(*) AS Num_Documents FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code"
      ],
      "observations": [
        "[('AD', 3), ('BK', 5), ('PP', 3), ('PPT', 3)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "589": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 589,
    "query": "How many distinct countries do players come from?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT country_code) FROM players"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "590": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 590,
    "query": "Show all template type codes with less than three templates.",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3)"
      ],
      "observations": [
        "[('CV',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "591": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 591,
    "query": "Find the name, population and expected life length of asian country with the largest area?",
    "turn_history": {
      "actions": [
        "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1"
      ],
      "observations": [
        "[('China', 1277558000, 71.4)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "592": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 592,
    "query": "How many poker players are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM poker_player"
      ],
      "observations": [
        "[(5,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "593": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 593,
    "query": "What is the number of distinct continents where Chinese is spoken?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Continent) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese' AND cl.IsOfficial = 'T'"
      ],
      "observations": [
        "[(1,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "594": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 594,
    "query": "Which cities do more than one employee under age 30 come from?",
    "turn_history": {
      "actions": [
        "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1"
      ],
      "observations": [
        "[('Bath',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "595": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 595,
    "query": "What are the names of conductors whose nationalities are not \"USA\"?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM conductor WHERE Nationality != 'USA'"
      ],
      "observations": [
        "[('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "596": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 596,
    "query": "How many total tours were there for each ranking date?",
    "turn_history": {
      "actions": [
        "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "597": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 597,
    "query": "On average, when were the transcripts printed?",
    "turn_history": {
      "actions": [
        "SELECT AVG(transcript_date) FROM Transcripts"
      ],
      "observations": [
        "[(Decimal('19900005640986.8000'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "598": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 598,
    "query": "What is the name of the semester with no students enrolled?",
    "turn_history": {
      "actions": [
        "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)"
      ],
      "observations": [
        "[('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "599": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 599,
    "query": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
    "turn_history": {
      "actions": [
        "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')"
      ],
      "observations": [
        "[('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "600": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 600,
    "query": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
    "turn_history": {
      "actions": [
        "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )"
      ],
      "observations": [
        "[(6, '139-321-7313'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]"
      ],
      "rewards": [
        0.6666666666666666
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.6666666666666666,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "601": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 601,
    "query": "Find the average age of the dogs who went through treatments.",
    "turn_history": {
      "actions": [
        "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)"
      ],
      "observations": [
        "[(5.111111111111111,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "602": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 602,
    "query": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
    "turn_history": {
      "actions": [
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'"
      ],
      "observations": [
        "[(43.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "603": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 603,
    "query": "Count the number of employees",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM employee"
      ],
      "observations": [
        "[(10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "604": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 604,
    "query": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
    "turn_history": {
      "actions": [
        "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')"
      ],
      "observations": [
        "[(16615, 'Japan'), (608931827, 'Micronesia')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "605": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 605,
    "query": "Count the number of orchestras that have CD or DVD as their record format.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')"
      ],
      "observations": [
        "[(11,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "606": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 606,
    "query": "Return the maximum final tables made across all poker players who have earnings below 200000.",
    "turn_history": {
      "actions": [
        "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000"
      ],
      "observations": [
        "[(26.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "607": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 607,
    "query": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
    "turn_history": {
      "actions": [
        "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumModels FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "608": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 608,
    "query": "Return the version numbers and template type codes of templates with a version number greater than 5.",
    "turn_history": {
      "actions": [
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5"
      ],
      "observations": [
        "[(8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "609": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 609,
    "query": "How many cartoons did each director create?",
    "turn_history": {
      "actions": [
        "SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by"
      ],
      "observations": [
        "[('Ben Jones', 4), ('Brandon Vietti', 4), ('Michael Chang', 4)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "610": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 610,
    "query": "Show distinct names of singers that have songs with sales more than 300000.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000"
      ],
      "observations": [
        "[('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "611": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 611,
    "query": "Find the number of visitors who did not visit any museum opened after 2010.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > 2010))"
      ],
      "observations": [
        "[(3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "612": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 612,
    "query": "Find the id of students who do not have a cat pet.",
    "turn_history": {
      "actions": [
        "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')"
      ],
      "observations": [
        "[(1002,), (1003,), (1004,), (1005,), (1006,), (1007,), (1008,), (1009,), (1010,), (1011,), (1012,), (1014,), (1015,), (1016,), (1017,), (1018,), (1019,), (1020,), (1021,), (1022,), (1023,), (1024,), (1025,), (1026,), (1027,), (1028,), (1029,), (1030,), (1031,), (1032,), (1033,), (1034,), (1035,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "613": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 613,
    "query": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
    "turn_history": {
      "actions": [
        "SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "614": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 614,
    "query": "What is the produdction code and channel of the most recent cartoon ?",
    "turn_history": {
      "actions": [
        "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1"
      ],
      "observations": [
        "[(102.0, '701')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "615": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 615,
    "query": "Return the number of flights arriving in Aberdeen.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE DestAirport = 'Aberdeen'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "616": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 616,
    "query": "List the section_name in reversed lexicographical order.",
    "turn_history": {
      "actions": [
        "SELECT section_name FROM Sections ORDER BY section_name DESC"
      ],
      "observations": [
        "[('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "617": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 617,
    "query": "How many airlines do we have?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM airlines"
      ],
      "observations": [
        "[(12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "618": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 618,
    "query": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
    "turn_history": {
      "actions": [
        "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4"
      ],
      "observations": [
        "[(27.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "619": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 619,
    "query": "Count the number of distinct store locations.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Location) FROM shop"
      ],
      "observations": [
        "[(9,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "620": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 620,
    "query": "What are the names of the stadiums without any concerts?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)"
      ],
      "observations": [
        "[('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "621": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 621,
    "query": "Count the number of countries for which Spanish is the predominantly spoken language.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'"
      ],
      "observations": [
        "[(20,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "622": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 622,
    "query": "How many shops are there in each location?",
    "turn_history": {
      "actions": [
        "SELECT Location, COUNT(*) AS Num_Shops FROM shop GROUP BY Location"
      ],
      "observations": [
        "[('Valkeakoski', 1), ('Helsinki', 1), ('Espoo', 1), ('Turku', 1), ('Jakobstad', 1), ('Kotka', 1), ('Kuopio', 1), ('Lahti', 1), ('Mariehamn', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "623": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 623,
    "query": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
    "turn_history": {
      "actions": [
        "SELECT continent, AVG(lifeexpectancy), SUM(population) FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72"
      ],
      "observations": [
        "[('Asia', 67.44118, Decimal('3705025700')), ('Africa', 52.57193, Decimal('784475000')), ('South America', 70.94615, Decimal('345780000')), ('Oceania', 69.715, Decimal('30401150'))]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "624": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 624,
    "query": "How many TV Channels use the English language?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'"
      ],
      "observations": [
        "[(3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "625": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 625,
    "query": "Show the name of singers whose birth year is either 1948 or 1949?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)"
      ],
      "observations": [
        "[('Christy Walton',), ('Alice Walton',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "626": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 626,
    "query": "What is the first name of the student whose permanent address is different from his or her current one?",
    "turn_history": {
      "actions": [
        "SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id"
      ],
      "observations": [
        "[('Timmothy',), ('Hobart',), ('Warren',), ('Jarvis',), ('Stanford',), ('Frida',), ('Delaney',), ('Reva',), ('Helga',), ('Gregg',), ('Orrin',), ('Deon',), ('Jordy',), ('Jett',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "627": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 627,
    "query": "What is the average age of all the dogs?",
    "turn_history": {
      "actions": [
        "SELECT AVG(age) FROM Dogs"
      ],
      "observations": [
        "[(5.066666666666666,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "628": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 628,
    "query": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
    "turn_history": {
      "actions": [
        "SELECT Owners.first_name, Dogs.name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'"
      ],
      "observations": [
        "[('Melisa', 'Bessie')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "629": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 629,
    "query": "find the number of distinct country codes of all players.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT country_code) FROM players"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "630": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 630,
    "query": "how many countries are in Asia?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM country WHERE Continent = 'Asia'"
      ],
      "observations": [
        "[(51,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "631": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 631,
    "query": "What are the names of airports in Aberdeen?",
    "turn_history": {
      "actions": [
        "SELECT AirportName FROM airports WHERE City = 'Aberdeen'"
      ],
      "observations": [
        "[('Municipal ',), ('Phillips AAF ',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "632": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 632,
    "query": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
    "turn_history": {
      "actions": [
        "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id"
      ],
      "observations": [
        "[(datetime.datetime(2017, 9, 8, 20, 10, 13), datetime.datetime(2018, 3, 25, 6, 58, 44)), (datetime.datetime(2017, 12, 22, 5, 2, 2), datetime.datetime(2018, 3, 25, 2, 11, 32)), (datetime.datetime(2017, 12, 22, 5, 2, 2), datetime.datetime(2018, 3, 25, 2, 11, 32)), (datetime.datetime(2017, 4, 20, 0, 58, 55), datetime.datetime(2018, 3, 24, 19, 12, 22)), (datetime.datetime(2017, 5, 6, 8, 3, 52), datetime.datetime(2018, 3, 25, 6, 29, 10)), (datetime.datetime(2017, 12, 29, 6, 8, 26), datetime.datetime(2018, 3, 25, 4, 42, 14)), (datetime.datetime(2017, 12, 29, 6, 8, 26), datetime.datetime(2018, 3, 25, 4, 42, 14)), (datetime.datetime(2017, 12, 29, 6, 8, 26), datetime.datetime(2018, 3, 25, 4, 42, 14)), (datetime.datetime(2017, 10, 24, 4, 45, 13), datetime.datetime(2018, 3, 25, 14, 15, 41)), (datetime.datetime(2018, 1, 2, 3, 15, 29), datetime.datetime(2018, 3, 25, 5, 7, 47)), (datetime.datetime(2017, 6, 18, 19, 45, 38), datetime.datetime(2018, 3, 24, 23, 48, 59)), (datetime.datetime(2017, 6, 18, 19, 45, 38), datetime.datetime(2018, 3, 24, 23, 48, 59)), (datetime.datetime(2017, 6, 18, 19, 45, 38), datetime.datetime(2018, 3, 24, 23, 48, 59)), (datetime.datetime(2017, 12, 29, 23, 24, 13), datetime.datetime(2018, 3, 24, 19, 36, 59)), (datetime.datetime(2017, 12, 29, 23, 24, 13), datetime.datetime(2018, 3, 24, 19, 36, 59))]"
      ],
      "rewards": [
        0.6
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.6,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "633": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 633,
    "query": "How many paragraphs for the document with name 'Summer Show'?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'"
      ],
      "observations": [
        "[(1,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "634": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 634,
    "query": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
    "turn_history": {
      "actions": [
        "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000"
      ],
      "observations": [
        "[(Decimal('480753000'), 1344763.722222)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "635": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 635,
    "query": "What is the zip code of the address in the city Port Chelsea?",
    "turn_history": {
      "actions": [
        "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'"
      ],
      "observations": [
        "[('148',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "636": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 636,
    "query": "What is the grade of each high schooler?",
    "turn_history": {
      "actions": [
        "SELECT grade FROM Highschooler"
      ],
      "observations": [
        "[(12,), (10,), (11,), (12,), (11,), (9,), (10,), (11,), (9,), (10,), (12,), (9,), (9,), (10,), (11,), (12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "637": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 637,
    "query": "What are the names of high schoolers who both have friends and are liked?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT h.name FROM Highschooler h, Friend f, Likes l WHERE h.ID = f.student_id AND h.ID = l.student_id AND f.friend_id = l.liked_id ORDER BY h.name"
      ],
      "observations": [
        "[('Gabriel',), ('Jessica',)]"
      ],
      "rewards": [
        0.25
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.25,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "638": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 638,
    "query": "Which language is the most popular on the Asian continent?",
    "turn_history": {
      "actions": [
        "SELECT Language, SUM(Population * Percentage / 100) AS TotalPopulation FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE Continent = 'Asia' AND IsOfficial = 'T' GROUP BY Language ORDER BY TotalPopulation DESC LIMIT 1"
      ],
      "observations": [
        "[('Chinese', 1178103516.94557)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "639": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 639,
    "query": "List the name of singers in ascending order of net worth.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
      ],
      "observations": [
        "[('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "640": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 640,
    "query": "Count the number of conductors.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM conductor"
      ],
      "observations": [
        "[(12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "641": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 641,
    "query": "Find the year that has the most number of matches.",
    "turn_history": {
      "actions": [
        "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "642": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 642,
    "query": "What are the countries where either English or Dutch is the official language ?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T' ORDER BY country.Name"
      ],
      "observations": [
        "[('American Samoa',), ('Anguilla',), ('Antigua and Barbuda',), ('Aruba',), ('Australia',), ('Barbados',), ('Belgium',), ('Belize',), ('Bermuda',), ('Canada',), ('Cayman Islands',), ('Christmas Island',), ('Cocos (Keeling) Islands',), ('Falkland Islands',), ('Gibraltar',), ('Guam',), ('Hong Kong',), ('Ireland',), ('Lesotho',), ('Malta',), ('Marshall Islands',), ('Montserrat',), ('Nauru',), ('Netherlands',), ('Netherlands Antilles',), ('New Zealand',), ('Niue',), ('Norfolk Island',), ('Northern Mariana Islands',), ('Palau',), ('Saint Helena',), ('Saint Kitts and Nevis',), ('Saint Lucia',), ('Saint Vincent and the Grenadines',), ('Samoa',), ('Seychelles',), ('South Africa',), ('Tokelau',), ('Tonga',), ('Turks and Caicos Islands',), ('Tuvalu',), ('United Kingdom',), ('United States',), ('United States Minor Outlying Islands',), ('Vanuatu',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Zimbabwe',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "643": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 643,
    "query": "What is the airport name for airport 'AKO'?",
    "turn_history": {
      "actions": [
        "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'"
      ],
      "observations": [
        "[('Colorado Plains Regional Airport ',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "644": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 644,
    "query": "What are the earnings of poker players, ordered descending by value?",
    "turn_history": {
      "actions": [
        "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
      ],
      "observations": [
        "[(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "645": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 645,
    "query": "How many templates do we have?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Templates"
      ],
      "observations": [
        "[(19,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "646": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 646,
    "query": "List the final tables made and the best finishes of poker players.",
    "turn_history": {
      "actions": [
        "SELECT Final_Table_Made, Best_Finish FROM poker_player"
      ],
      "observations": [
        "[(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "647": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 647,
    "query": "What are all different template ids used for documents, and how many times were each of them used?",
    "turn_history": {
      "actions": [
        "SELECT Template_ID, COUNT(*) AS Usage_Count FROM Documents GROUP BY Template_ID"
      ],
      "observations": [
        "[(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1), (22, 1), (25, 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "648": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 648,
    "query": "What is the average number of injuries caused each time?",
    "turn_history": {
      "actions": [
        "SELECT AVG(injured) FROM death"
      ],
      "observations": [
        "[(Decimal('1.0769'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "649": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 649,
    "query": "What are the name of the countries where there is not a single car maker?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryName = car_makers.Country WHERE car_makers.Id IS NULL"
      ],
      "observations": [
        "[('usa',), ('germany',), ('france',), ('japan',), ('italy',), ('sweden',), ('uk',), ('korea',), ('russia',), ('nigeria',), ('australia',), ('new zealand',), ('egypt',), ('mexico',), ('brazil',)]"
      ],
      "rewards": [
        0.4666666666666667
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.4666666666666667,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "650": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 650,
    "query": "How many dogs have not gone through any treatment?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments) AND abandoned_yn = 'N'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "651": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 651,
    "query": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
    "turn_history": {
      "actions": [
        "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "652": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 652,
    "query": "How many employees are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM employee"
      ],
      "observations": [
        "[(10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "653": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 653,
    "query": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
    "turn_history": {
      "actions": [
        "SELECT Name, Birth_Date FROM people ORDER BY Name ASC"
      ],
      "observations": [
        "[('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "654": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 654,
    "query": "Find all airlines that have at least 10 flights.",
    "turn_history": {
      "actions": [
        "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10"
      ],
      "observations": [
        "[(2,), (4,), (5,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "655": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 655,
    "query": "Find the average ranking for each player and their first name.",
    "turn_history": {
      "actions": [
        "SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "656": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 656,
    "query": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
    "turn_history": {
      "actions": [
        "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle')"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "657": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 657,
    "query": "What is total bonus given in all evaluations?",
    "turn_history": {
      "actions": [
        "SELECT SUM(Bonus) FROM evaluation"
      ],
      "observations": [
        "[(19500.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "658": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 658,
    "query": "Find the number of distinct name of losers.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT loser_name) FROM matches"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "659": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 659,
    "query": "What is the first, middle, and last name of the first student to register?",
    "turn_history": {
      "actions": [
        "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
      ],
      "observations": [
        "[('Timmothy', 'Anna', 'Ward')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "660": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 660,
    "query": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
    "turn_history": {
      "actions": [
        "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'"
      ],
      "observations": [
        "[('(096)889-8954x524',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "661": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 661,
    "query": "What are the airline names and abbreviations for airlines in the USA?",
    "turn_history": {
      "actions": [
        "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'"
      ],
      "observations": [
        "[('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "662": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 662,
    "query": "What region is Kabul in?",
    "turn_history": {
      "actions": [
        "SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul')"
      ],
      "observations": [
        "[('Southern and Central Asia',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "663": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 663,
    "query": "How many different departments offer degrees?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs"
      ],
      "observations": [
        "[(10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "664": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 664,
    "query": "Count the number of United Airlines flights arriving in ASY Airport.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "665": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 665,
    "query": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
    "turn_history": {
      "actions": [
        "SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')"
      ],
      "observations": [
        "[('Battle of Adrianople', 'Bulgarian victory', 'Kaloyan'), ('Battle of Serres', 'Bulgarian victory', 'Kaloyan'), ('Battle of Rusion', 'Bulgarian victory', 'Kaloyan')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "666": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 666,
    "query": "What are the names of poker players in descending order of earnings?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC"
      ],
      "observations": [
        "[('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "667": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 667,
    "query": "What is the model for the car with a weight smaller than the average?",
    "turn_history": {
      "actions": [
        "SELECT Model FROM cars_data  INNER JOIN model_list ON cars_data.Id = model_list.ModelId  WHERE Weight < (SELECT AVG(Weight) FROM cars_data)"
      ],
      "observations": [
        "[('amc',), ('audi',), ('bmw',), ('buick',), ('cadillac',), ('dodge',)]"
      ],
      "rewards": [
        0.125
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.125,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "668": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 668,
    "query": "How many likes correspond to each student id?",
    "turn_history": {
      "actions": [
        "SELECT student_id, COUNT(*) as num_likes FROM Likes GROUP BY student_id"
      ],
      "observations": [
        "[(1025, 1), (1247, 1), (1316, 1), (1501, 1), (1641, 1), (1689, 1), (1709, 1), (1782, 1), (1911, 1), (1934, 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "669": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 669,
    "query": "Which dogs are of the rarest breed? Show their names and treatment dates.",
    "turn_history": {
      "actions": [
        "SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_name = 'rarest breed'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "670": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 670,
    "query": "What is the hometown of the youngest teacher?",
    "turn_history": {
      "actions": [
        "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)"
      ],
      "observations": [
        "[('Farnworth Municipal Borough',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "671": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 671,
    "query": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "turn_history": {
      "actions": [
        "SELECT players.first_name, players.country_code FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "672": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 672,
    "query": "Which semesters do not have any student enrolled? List the semester name.",
    "turn_history": {
      "actions": [
        "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)"
      ],
      "observations": [
        "[('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "673": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 673,
    "query": "What are the different addresses that have students living there?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Addresses.* FROM Addresses INNER JOIN Students ON Addresses.address_id = Students.current_address_id OR Addresses.address_id = Students.permanent_address_id"
      ],
      "observations": [
        "[(10, '7081 Eda Center', 'Suite 830', None, 'Rutherfordtown', '839', 'Delaware', 'Kyrgyz Republic', None), (15, '74046 Metz Walk Apt. 113', 'Suite 674', None, 'Port Oceane', '669', 'Wyoming', 'Norfolk Island', None), (5, '858 Peggie Bypass Suite 212', 'Apt. 335', None, 'Michelleburgh', '446', 'Hawaii', 'Haiti', None), (12, '979 Haag Shores Suite 656', 'Apt. 468', None, 'Prohaskafort', '590', 'SouthDakota', 'Lesotho', None), (9, '0643 Muller Vista', 'Suite 383', None, 'Port Elvisfurt', '777', 'NorthCarolina', 'Gabon', None), (7, '193 Marlin Brook', 'Apt. 406', None, 'Herzoghaven', '068', 'Arkansas', 'Cook Islands', None), (11, '9283 Schulist Falls Apt. 037', 'Suite 239', None, 'South Palma', '400', 'WestVirginia', 'Bermuda', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None), (6, '16998 Mraz Lodge', 'Apt. 689', None, 'North Omer', '902', 'Kentucky', 'Gibraltar', None), (1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (14, '186 Evan Motorway Apt. 409', 'Suite 079', None, 'Lake Careyberg', '895', 'Kentucky', 'New Caledonia', None), (4, '0144 Lamar Plaza Apt. 346', 'Suite 703', None, 'Port Evanston', '847', 'Washington', 'Angola', None), (8, '202 Hessel Views Apt. 468', 'Apt. 305', None, 'Mariliehaven', '638', 'Idaho', 'Croatia', None)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "674": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 674,
    "query": "What is the model of the car with the smallest amount of horsepower?",
    "turn_history": {
      "actions": [
        "SELECT Model FROM cars_data INNER JOIN model_list ON cars_data.Id = model_list.ModelId WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "675": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 675,
    "query": "Show names of teachers that teach at least two courses.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM teacher WHERE Teacher_ID IN (     SELECT Teacher_ID FROM course_arrange     GROUP BY Teacher_ID     HAVING COUNT(*) >= 2 )"
      ],
      "observations": [
        "[('Anne Walker',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "676": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 676,
    "query": "How many models does each car maker produce? List maker full name, id and the number.",
    "turn_history": {
      "actions": [
        "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "677": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 677,
    "query": "What are the descriptions for all the math courses?",
    "turn_history": {
      "actions": [
        "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'"
      ],
      "observations": [
        "[('q',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "678": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 678,
    "query": "What is the description for the section named h?",
    "turn_history": {
      "actions": [
        "SELECT section_description FROM Sections WHERE section_name = 'h'"
      ],
      "observations": [
        "[('et',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "679": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 679,
    "query": "What are the names and ids of all makers with more than 3 models?",
    "turn_history": {
      "actions": [
        "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)"
      ],
      "observations": [
        "[(4, 'gm'), (6, 'chrysler')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "680": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 680,
    "query": "What is the name of the high schooler who has the greatest number of friends?",
    "turn_history": {
      "actions": [
        "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY COUNT(f.friend_id) DESC LIMIT 1"
      ],
      "observations": [
        "[('Andrew',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "681": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 681,
    "query": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
    "turn_history": {
      "actions": [
        "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2 AND COUNT(DISTINCT se.semester_id) = 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "682": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 682,
    "query": "What is the average edispl for all volvos?",
    "turn_history": {
      "actions": [
        "SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT Id FROM car_names WHERE Make = 'Volvo')"
      ],
      "observations": [
        "[(None,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "683": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 683,
    "query": "Find the name of the makers that produced some cars in the year of 1970?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Maker FROM car_makers WHERE Id IN (SELECT Id FROM model_list WHERE Maker = car_makers.Maker AND ModelId IN (SELECT ModelId FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year = 1970)))"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "684": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 684,
    "query": "Which airlines have at least 10 flights?",
    "turn_history": {
      "actions": [
        "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10"
      ],
      "observations": [
        "[(2,), (4,), (5,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "685": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 685,
    "query": "What is the car model with the highest mpg ?",
    "turn_history": {
      "actions": [
        "SELECT Model, MAX(MPG) FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId"
      ],
      "observations": [
        "Error executing query: In aggregated query without GROUP BY, expression #1 of SELECT list contains nonaggregated column 'car_1.model_list.Model'; this is incompatible with sql_mode=only_full_group_by"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "686": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 686,
    "query": "What are the first names and birth dates of players from the USA?",
    "turn_history": {
      "actions": [
        "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "687": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 687,
    "query": "Which country does Airline \"JetBlue Airways\" belong to?",
    "turn_history": {
      "actions": [
        "SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'"
      ],
      "observations": [
        "[('USA',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "688": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 688,
    "query": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
    "turn_history": {
      "actions": [
        "SELECT first_name, country_code, birth_date FROM players WHERE player_id = (     SELECT winner_id     FROM matches     WHERE winner_rank_points = (         SELECT MAX(winner_rank_points)         FROM matches     ) )"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "689": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 689,
    "query": "What is the template type code of the template used by document with the name \"Data base\"?",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Document_Name = 'Data base'"
      ],
      "observations": [
        "[('BK',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "690": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 690,
    "query": "How many unique languages are spoken in the world?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Language) FROM countrylanguage"
      ],
      "observations": [
        "[(457,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "691": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 691,
    "query": "How many flights do we have?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights"
      ],
      "observations": [
        "[(50,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "692": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 692,
    "query": "What are the names of students who have 2 or more likes?",
    "turn_history": {
      "actions": [
        "SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id HAVING COUNT(*) >= 2"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "693": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 693,
    "query": "What is the name of each continent and how many car makers are there in each one?",
    "turn_history": {
      "actions": [
        "SELECT continents.Continent, COUNT(car_makers.Id) AS NumCarMakers FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryName = car_makers.Country GROUP BY continents.Continent"
      ],
      "observations": [
        "[('america', 0), ('europe', 0), ('asia', 0), ('africa', 0), ('australia', 0)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "694": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 694,
    "query": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
    "turn_history": {
      "actions": [
        "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'"
      ],
      "observations": [
        "[('Employee', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "695": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 695,
    "query": "Which city has most number of departing flights?",
    "turn_history": {
      "actions": [
        "SELECT SourceAirport, COUNT(*) AS DepartingFlights FROM flights GROUP BY SourceAirport ORDER BY DepartingFlights DESC LIMIT 1"
      ],
      "observations": [
        "[('OTS', 3)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "696": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 696,
    "query": "What are the names of students who have no friends?",
    "turn_history": {
      "actions": [
        "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (     SELECT Friend.student_id     FROM Friend )"
      ],
      "observations": [
        "[('John',), ('Brittany',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "697": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 697,
    "query": "What is the number of countries with more than 2 car makers ?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT countries.CountryId)  FROM countries  INNER JOIN car_makers ON countries.CountryName = car_makers.Country  GROUP BY countries.CountryId  HAVING COUNT(DISTINCT car_makers.Id) > 2"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "698": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 698,
    "query": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "turn_history": {
      "actions": [
        "SELECT players.country_code, players.first_name FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "699": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 699,
    "query": "How many likes does Kyle have?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')"
      ],
      "observations": [
        "[(1,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "700": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 700,
    "query": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
    "turn_history": {
      "actions": [
        "SELECT country.Name, COUNT(countrylanguage.Language) AS num_languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) >= 3"
      ],
      "observations": [
        "[('Aruba', 4), ('Afghanistan', 5), ('Angola', 9), ('Albania', 3), ('Andorra', 4), ('Netherlands Antilles', 3), ('Argentina', 3), ('American Samoa', 3), ('Australia', 8), ('Austria', 8), ('Azerbaijan', 4), ('Burundi', 3), ('Belgium', 6), ('Benin', 7), ('Burkina Faso', 6), ('Bangladesh', 7), ('Bulgaria', 4), ('Belarus', 4), ('Belize', 4), ('Bolivia', 4), ('Brazil', 5), ('Brunei', 4), ('Bhutan', 3), ('Botswana', 5), ('Central African Republic', 6), ('Canada', 12), ('Switzerland', 4), ('Chile', 4), ('China', 12), ('C\u00f4te d\u2019Ivoire', 5), ('Cameroon', 8), ('Congo, The Democratic Republic of the', 10), ('Congo', 6), ('Colombia', 5), ('Comoros', 5), ('Costa Rica', 4), ('Czech Republic', 8), ('Germany', 6), ('Djibouti', 3), ('Denmark', 7), ('Eritrea', 6), ('Spain', 4), ('Estonia', 5), ('Ethiopia', 7), ('Finland', 5), ('France', 6), ('Micronesia, Federated States of', 6), ('Gabon', 4), ('United Kingdom', 3), ('Georgia', 6), ('Ghana', 6), ('Guinea', 7), ('Gambia', 5), ('Guinea-Bissau', 6), ('Guatemala', 5), ('Guam', 5), ('Guyana', 3), ('Hong Kong', 5), ('Honduras', 4), ('Hungary', 6), ('Indonesia', 9), ('India', 12), ('Iran', 10), ('Iraq', 5), ('Israel', 3), ('Italy', 8), ('Jordan', 3), ('Japan', 6), ('Kazakstan', 6), ('Kenya', 10), ('Kyrgyzstan', 7), ('Cambodia', 4), ('Laos', 4), ('Lebanon', 3), ('Liberia', 8), ('Liechtenstein', 3), ('Sri Lanka', 3), ('Lesotho', 3), ('Lithuania', 5), ('Luxembourg', 5), ('Latvia', 6), ('Macao', 4), ('Monaco', 4), ('Moldova', 5), ('Mexico', 6), ('Macedonia', 5), ('Mali', 6), ('Myanmar', 8), ('Mongolia', 6), ('Northern Mariana Islands', 6), ('Mozambique', 10), ('Mauritania', 6), ('Mauritius', 6), ('Malawi', 4), ('Malaysia', 6), ('Mayotte', 3), ('Namibia', 8), ('New Caledonia', 3), ('Niger', 5), ('Nigeria', 10), ('Nicaragua', 4), ('Netherlands', 4), ('Norway', 5), ('Nepal', 7), ('Nauru', 5), ('Pakistan', 8), ('Panama', 6), ('Peru', 3), ('Philippines', 10), ('Palau', 4), ('Poland', 4), ('Paraguay', 4), ('French Polynesia', 3), ('R\u00e9union', 5), ('Romania', 6), ('Russian Federation', 12), ('Sudan', 10), ('Senegal', 6), ('Singapore', 3), ('Solomon Islands', 3), ('Sierra Leone', 8), ('Slovakia', 5), ('Slovenia', 3), ('Sweden', 6), ('Seychelles', 3), ('Chad', 8), ('Togo', 8), ('Thailand', 6), ('Tajikistan', 3), ('Turkmenistan', 4), ('Trinidad and Tobago', 3), ('Tunisia', 3), ('Turkey', 3), ('Tuvalu', 3), ('Taiwan', 6), ('Tanzania', 11), ('Uganda', 10), ('Ukraine', 7), ('United States', 12), ('Uzbekistan', 6), ('Venezuela', 3), ('Virgin Islands, U.S.', 3), ('Vietnam', 9), ('Vanuatu', 3), ('Samoa', 3), ('Yugoslavia', 6), ('South Africa', 11), ('Zambia', 6), ('Zimbabwe', 4)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "701": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 701,
    "query": "List the names of teachers who have not been arranged to teach courses.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)"
      ],
      "observations": [
        "[('Joseph Huts',), ('John Deloor',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "702": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 702,
    "query": "What is the average earnings of poker players?",
    "turn_history": {
      "actions": [
        "SELECT AVG(Earnings) FROM poker_player"
      ],
      "observations": [
        "[(301891.2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "703": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 703,
    "query": "What is the lowest grade of students who do not have any friends?",
    "turn_history": {
      "actions": [
        "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)"
      ],
      "observations": [
        "[(10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "704": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 704,
    "query": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "turn_history": {
      "actions": [
        "SELECT winner_name, MAX(winner_rank_points) FROM matches GROUP BY winner_name ORDER BY MAX(winner_rank_points) DESC LIMIT 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "705": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 705,
    "query": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
    "turn_history": {
      "actions": [
        "SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'"
      ],
      "observations": [
        "[('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Lucy Wong',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "706": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 706,
    "query": "What are the names of people who do not play poker?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
      ],
      "observations": [
        "[('Roman Bragin',), ('Sergey Grankin',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "707": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 707,
    "query": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
    "turn_history": {
      "actions": [
        "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'"
      ],
      "observations": [
        "[('Sky Famiglia',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "708": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 708,
    "query": "What is the total number of people living in the nations that do not use English?",
    "turn_history": {
      "actions": [
        "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')"
      ],
      "observations": [
        "[(Decimal('5619590650'),)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "709": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 709,
    "query": "What is the name of the singer with the largest net worth?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
      ],
      "observations": [
        "[('Liliane Bettencourt',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "710": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 710,
    "query": "find id of the tv channels that from the countries where have more than two tv channels.",
    "turn_history": {
      "actions": [
        "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2)"
      ],
      "observations": [
        "[('700',), ('701',), ('703',), ('704',), ('705',), ('708',), ('713',), ('714',), ('715',), ('717',), ('719',), ('728',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "711": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 711,
    "query": "Count the number of templates.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Templates"
      ],
      "observations": [
        "[(19,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "712": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 712,
    "query": "Show different hometown of teachers and the number of teachers from each hometown.",
    "turn_history": {
      "actions": [
        "SELECT Hometown, COUNT(*) as Num_Teachers FROM teacher GROUP BY Hometown"
      ],
      "observations": [
        "[('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "713": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 713,
    "query": "Give the name of the student with the most likes.",
    "turn_history": {
      "actions": [
        "SELECT Highschooler.name FROM Highschooler, Likes WHERE Highschooler.ID = Likes.student_id GROUP BY Likes.student_id ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[('John',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "714": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 714,
    "query": "Find the total amount of bonus given in all the evaluations.",
    "turn_history": {
      "actions": [
        "SELECT SUM(Bonus) FROM evaluation"
      ],
      "observations": [
        "[(19500.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "715": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 715,
    "query": "What is the best rank of losers across all matches?",
    "turn_history": {
      "actions": [
        "SELECT MIN(loser_rank) FROM matches WHERE loser_rank != ''"
      ],
      "observations": [
        "[(None,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "716": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 716,
    "query": "Count the number of flights departing from 'APG'.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'"
      ],
      "observations": [
        "[(1,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "717": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 717,
    "query": "What are the names of conductors who have conducted at more than one orchestra?",
    "turn_history": {
      "actions": [
        "SELECT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "718": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 718,
    "query": "Return the names and surface areas of the 5 largest countries.",
    "turn_history": {
      "actions": [
        "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
      ],
      "observations": [
        "[('Russian Federation', 17075400.0), ('Antarctica', 13120000.0), ('Canada', 9970610.0), ('China', 9572900.0), ('United States', 9363520.0)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "719": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 719,
    "query": "How many high schoolers are there in grade 9 or 10?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)"
      ],
      "observations": [
        "[(8,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "720": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 720,
    "query": "Find the number of pets for each student who has any pet and student id.",
    "turn_history": {
      "actions": [
        "SELECT Has_Pet.StuID, COUNT(*) AS num_pets FROM Has_Pet GROUP BY Has_Pet.StuID"
      ],
      "observations": [
        "[(1001, 1), (1002, 2)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "721": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 721,
    "query": "Find the package choice and series name of the TV channel that has high definition TV.",
    "turn_history": {
      "actions": [
        "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'"
      ],
      "observations": [
        "[('Sky Famiglia + Sky HD', 'MTV Live HD')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "722": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 722,
    "query": "List the most common hometown of teachers.",
    "turn_history": {
      "actions": [
        "SELECT Hometown, COUNT(*) AS count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1"
      ],
      "observations": [
        "[('Blackrod Urban District', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "723": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 723,
    "query": "What is the number of carsw ith over 6 cylinders?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6"
      ],
      "observations": [
        "[(19,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "724": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 724,
    "query": "What are the names of the sections in reverse alphabetical order?",
    "turn_history": {
      "actions": [
        "SELECT section_name FROM Sections ORDER BY section_name DESC"
      ],
      "observations": [
        "[('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "725": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 725,
    "query": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
    "turn_history": {
      "actions": [
        "SELECT Maker, Model, MAX(Horsepower) FROM cars_data INNER JOIN model_list ON cars_data.Id = model_list.ModelId WHERE Cylinders = 3"
      ],
      "observations": [
        "Error executing query: In aggregated query without GROUP BY, expression #1 of SELECT list contains nonaggregated column 'car_1.model_list.Maker'; this is incompatible with sql_mode=only_full_group_by"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "726": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 726,
    "query": "List the contestant numbers and names, ordered by contestant name descending.",
    "turn_history": {
      "actions": [
        "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC"
      ],
      "observations": [
        "[(2, 'Tabatha Gehling'), (8, 'Nita Coster'), (11, 'Loraine NygrenTania Mattioli'), (9, 'Kurt Walser'), (3, 'Kelly Clauss'), (6, 'Jessie Eichman'), (4, 'Jessie Alloway'), (10, 'Ericka Dieter'), (1, 'Edwina Burnam'), (7, 'Allie Rogalski'), (5, 'Alana Bregman')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "727": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 727,
    "query": "How much does the most expensive charge type costs?",
    "turn_history": {
      "actions": [
        "SELECT MAX(charge_amount) FROM Charges"
      ],
      "observations": [
        "[(Decimal('640.0000'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "728": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 728,
    "query": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT s.Name, s.Location FROM stadium s INNER JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = 2014 AND c.Stadium_ID IN (   SELECT c2.Stadium_ID   FROM concert c2   WHERE c2.Year = 2015 )"
      ],
      "observations": [
        "[('Somerset Park', 'Ayr United')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "729": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 729,
    "query": "Show the name of teachers aged either 32 or 33?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM teacher WHERE Age IN (32, 33)"
      ],
      "observations": [
        "[('Joseph Huts',), ('John Deloor',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "730": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 730,
    "query": "Which flight numbers correspond to United Airlines flights?",
    "turn_history": {
      "actions": [
        "SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "731": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 731,
    "query": "Show all document names using templates with template type code BK.",
    "turn_history": {
      "actions": [
        "SELECT Documents.Document_Name FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'"
      ],
      "observations": [
        "[('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "732": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 732,
    "query": "What are the names of nations where both English and French are official languages?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 'T') ORDER BY Name"
      ],
      "observations": [
        "[('Canada',), ('Seychelles',), ('Vanuatu',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "733": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 733,
    "query": "Return the names of all the poker players.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID"
      ],
      "observations": [
        "[('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "734": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 734,
    "query": "Return the number of flights.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights"
      ],
      "observations": [
        "[(50,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "735": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 735,
    "query": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
    "turn_history": {
      "actions": [
        "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974"
      ],
      "observations": [
        "[(4141,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "736": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 736,
    "query": "Which cities are in European countries where English is not the official language?",
    "turn_history": {
      "actions": [
        "SELECT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode  WHERE country.Continent = 'Europe'  AND countrylanguage.Language <> 'English'  AND countrylanguage.IsOfficial = 'T'"
      ],
      "observations": [
        "[('Tirana',), ('Andorra la Vella',), ('Wien',), ('Graz',), ('Linz',), ('Salzburg',), ('Innsbruck',), ('Klagenfurt',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Li\u00e8ge',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Li\u00e8ge',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Li\u00e8ge',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Sofija',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Stara Zagora',), ('Pleven',), ('Sliven',), ('Dobric',), ('\u0160umen',), ('Sarajevo',), ('Banja Luka',), ('Zenica',), ('Minsk',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovit\u0161i',), ('Borisov',), ('Pinsk',), ('Or\u0161a',), ('Mozyr',), ('Novopolotsk',), ('Lida',), ('Soligorsk',), ('Molodet\u0161no',), ('Minsk',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovit\u0161i',), ('Borisov',), ('Pinsk',), ('Or\u0161a',), ('Mozyr',), ('Novopolotsk',), ('Lida',), ('Soligorsk',), ('Molodet\u0161no',), ('Z\u00fcrich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('Z\u00fcrich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('Z\u00fcrich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('Z\u00fcrich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('Praha',), ('Brno',), ('Ostrava',), ('Plzen',), ('Olomouc',), ('Liberec',), ('Cesk\u00e9 Budejovice',), ('Hradec Kr\u00e1lov\u00e9',), ('\u00dast\u00ed nad Labem',), ('Pardubice',), ('Berlin',), ('Hamburg',), ('Munich [M\u00fcnchen]',), ('K\u00f6ln',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('D\u00fcsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('N\u00fcrnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('M\u00fcnster',), ('M\u00f6nchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('L\u00fcbeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbr\u00fccken',), ('Mainz',), ('Hamm',), ('Herne',), ('M\u00fclheim an der Ruhr',), ('Solingen',), ('Osnabr\u00fcck',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Oldenburg',), ('Neuss',), ('Heidelberg',), ('Darmstadt',), ('Paderborn',), ('Potsdam',), ('W\u00fcrzburg',), ('Regensburg',), ('Recklinghausen',), ('G\u00f6ttingen',), ('Bremerhaven',), ('Wolfsburg',), ('Bottrop',), ('Remscheid',), ('Heilbronn',), ('Pforzheim',), ('Offenbach am Main',), ('Ulm',), ('Ingolstadt',), ('Gera',), ('Salzgitter',), ('Cottbus',), ('Reutlingen',), ('F\u00fcrth',), ('Siegen',), ('Koblenz',), ('Moers',), ('Bergisch Gladbach',), ('Zwickau',), ('Hildesheim',), ('Witten',), ('Schwerin',), ('Erlangen',), ('Kaiserslautern',), ('Trier',), ('Jena',), ('Iserlohn',), ('G\u00fctersloh',), ('Marl',), ('L\u00fcnen',), ('D\u00fcren',), ('Ratingen',), ('Velbert',), ('Esslingen am Neckar',), ('K\u00f8benhavn',), ('\u00c5rhus',), ('Odense',), ('Aalborg',), ('Frederiksberg',), ('Madrid',), ('Barcelona',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('M\u00e1laga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('C\u00f3rdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gij\u00f3n',), ('L\u00b4Hospitalet de Llobregat',), ('Granada',), ('A Coru\u00f1a (La Coru\u00f1a)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('M\u00f3stoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iru\u00f1a]',), ('Donostia-San Sebasti\u00e1n',), ('Cartagena',), ('Legan\u00e9s',), ('Fuenlabrada',), ('Almer\u00eda',), ('Terrassa',), ('Alcal\u00e1 de Henares',), ('Burgos',), ('Salamanca',), ('Albacete',), ('Getafe',), ('C\u00e1diz',), ('Alcorc\u00f3n',), ('Huelva',), ('Le\u00f3n',), ('Castell\u00f3n de la Plana [Castell',), ('Badajoz',), ('[San Crist\u00f3bal de] la Laguna',), ('Logro\u00f1o',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Lleida (L\u00e9rida)',), ('Ja\u00e9n',), ('Ourense (Orense)',), ('Matar\u00f3',), ('Algeciras',), ('Marbella',), ('Barakaldo',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Torrej\u00f3n de Ardoz',), ('Tallinn',), ('Tartu',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [\u00c5bo]',), ('Oulu',), ('Lahti',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [\u00c5bo]',), ('Oulu',), ('Lahti',), ('Paris',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-\u00c9tienne',), ('Toulon',), ('Grenoble',), ('Angers',), ('Dijon',), ('Brest',), ('Le Mans',), ('Clermont-Ferrand',), ('Amiens',), ('Aix-en-Provence',), ('Limoges',), ('N\u00eemes',), ('Tours',), ('Villeurbanne',), ('Metz',), ('Besan\u00e7on',), ('Caen',), ('Orl\u00e9ans',), ('Mulhouse',), ('Rouen',), ('Boulogne-Billancourt',), ('Perpignan',), ('Nancy',), ('Roubaix',), ('Argenteuil',), ('Tourcoing',), ('Montreuil',), ('T\u00f3rshavn',), ('T\u00f3rshavn',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Budapest',), ('Debrecen',), ('Miskolc',), ('Szeged',), ('P\u00e9cs',), ('Gy\u00f6r',), ('Nyiregyh\u00e1za',), ('Kecskem\u00e9t',), ('Sz\u00e9kesfeh\u00e9rv\u00e1r',), ('Dublin',), ('Cork',), ('Reykjav\u00edk',), ('Roma',), ('Milano',), ('Napoli',), ('Torino',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Perugia',), ('Foggia',), ('Reggio nell\u00b4 Emilia',), ('Salerno',), ('Ravenna',), ('Ferrara',), ('Rimini',), ('Syrakusa',), ('Sassari',), ('Monza',), ('Bergamo',), ('Pescara',), ('Latina',), ('Vicenza',), ('Terni',), ('Forl\u00ec',), ('Trento',), ('Novara',), ('Piacenza',), ('Ancona',), ('Lecce',), ('Bolzano',), ('Catanzaro',), ('La Spezia',), ('Udine',), ('Torre del Greco',), ('Andria',), ('Brindisi',), ('Giugliano in Campania',), ('Pisa',), ('Barletta',), ('Arezzo',), ('Alessandria',), ('Cesena',), ('Pesaro',), ('Schaan',), ('Vaduz',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('\u0160iauliai',), ('Panevezys',), ('Luxembourg [Luxemburg/L\u00ebtzebuerg]',), ('Luxembourg [Luxemburg/L\u00ebtzebuerg]',), ('Luxembourg [Luxemburg/L\u00ebtzebuerg]',), ('Riga',), ('Daugavpils',), ('Liepaja',), ('Monte-Carlo',), ('Monaco-Ville',), ('Chisinau',), ('Tiraspol',), ('Balti',), ('Bender (T\u00eeghina)',), ('Skopje',), ('Birkirkara',), ('Valletta',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Apeldoorn',), ('Nijmegen',), ('Enschede',), ('Haarlem',), ('Almere',), ('Arnhem',), ('Zaanstad',), ('\u00b4s-Hertogenbosch',), ('Amersfoort',), ('Maastricht',), ('Dordrecht',), ('Leiden',), ('Haarlemmermeer',), ('Zoetermeer',), ('Emmen',), ('Zwolle',), ('Ede',), ('Delft',), ('Heerlen',), ('Alkmaar',), ('Oslo',), ('Bergen',), ('Trondheim',), ('Stavanger',), ('B\u00e6rum',), ('Warszawa',), ('L\u00f3dz',), ('Krak\u00f3w',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzesz\u00f3w',), ('Ruda Slaska',), ('Rybnik',), ('Walbrzych',), ('Tychy',), ('Dabrowa G\u00f3rnicza',), ('Plock',), ('Elblag',), ('Opole',), ('Gorz\u00f3w Wielkopolski',), ('Wloclawek',), ('Chorz\u00f3w',), ('Tarn\u00f3w',), ('Zielona G\u00f3ra',), ('Koszalin',), ('Legnica',), ('Kalisz',), ('Grudziadz',), ('Slupsk',), ('Jastrzebie-Zdr\u00f3j',), ('Jaworzno',), ('Jelenia G\u00f3ra',), ('Lisboa',), ('Porto',), ('Amadora',), ('Co\u00edmbra',), ('Braga',), ('Bucuresti',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('T\u00e2rgu Mures',), ('Baia Mare',), ('Buzau',), ('Satu Mare',), ('Botosani',), ('Piatra Neamt',), ('R\u00e2mnicu V\u00e2lcea',), ('Suceava',), ('Drobeta-Turnu Severin',), ('T\u00e2rgoviste',), ('Focsani',), ('T\u00e2rgu Jiu',), ('Tulcea',), ('Resita',), ('Bucuresti',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('T\u00e2rgu Mures',), ('Baia Mare',), ('Buzau',), ('Satu Mare',), ('Botosani',), ('Piatra Neamt',), ('R\u00e2mnicu V\u00e2lcea',), ('Suceava',), ('Drobeta-Turnu Severin',), ('T\u00e2rgoviste',), ('Focsani',), ('T\u00e2rgu Jiu',), ('Tulcea',), ('Resita',), ('Moscow',), ('St Petersburg',), ('Novosibirsk',), ('Nizni Novgorod',), ('Jekaterinburg',), ('Samara',), ('Omsk',), ('Kazan',), ('Ufa',), ('T\u0161eljabinsk',), ('Rostov-na-Donu',), ('Perm',), ('Volgograd',), ('Voronez',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje T\u0161elny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('T\u0161eboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sot\u0161i',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahat\u0161kala',), ('T\u0161erepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('T\u0161ita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Jo\u0161kar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Nalt\u0161ik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagove\u0161t\u0161ensk',), ('\u0160ahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamt\u0161atski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novot\u0161erkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Kovrov',), ('Nahodka',), ('Ussurijsk',), ('Salavat',), ('Myti\u0161t\u0161i',), ('Kolomna',), ('Elektrostal',), ('Murom',), ('Kolpino',), ('Norilsk',), ('Almetjevsk',), ('Novomoskovsk',), ('Dimitrovgrad',), ('Pervouralsk',), ('Himki',), ('Bala\u0161iha',), ('Nevinnomyssk',), ('Pjatigorsk',), ('Korolev',), ('Serpuhov',), ('Odintsovo',), ('Orehovo-Zujevo',), ('Kamy\u0161in',), ('Novot\u0161eboksarsk',), ('T\u0161erkessk',), ('At\u0161insk',), ('Magadan',), ('Mit\u0161urinsk',), ('Kislovodsk',), ('Jelets',), ('Seversk',), ('Noginsk',), ('Velikije Luki',), ('Novokuiby\u0161evsk',), ('Neftekamsk',), ('Leninsk-Kuznetski',), ('Oktjabrski',), ('Sergijev Posad',), ('Arzamas',), ('Kiseljovsk',), ('Novotroitsk',), ('Obninsk',), ('Kansk',), ('Glazov',), ('Solikamsk',), ('Sarapul',), ('Ust-Ilimsk',), ('\u0160t\u0161olkovo',), ('Mezduret\u0161ensk',), ('Usolje-Sibirskoje',), ('Elista',), ('Novo\u0161ahtinsk',), ('Votkinsk',), ('Kyzyl',), ('Serov',), ('Zelenodolsk',), ('Zeleznodoroznyi',), ('Kine\u0161ma',), ('Kuznetsk',), ('Uhta',), ('Jessentuki',), ('Tobolsk',), ('Neftejugansk',), ('Bataisk',), ('Nojabrsk',), ('Bala\u0161ov',), ('Zeleznogorsk',), ('Zukovski',), ('Anzero-Sudzensk',), ('Bugulma',), ('Zeleznogorsk',), ('Novouralsk',), ('Pu\u0161kin',), ('Vorkuta',), ('Derbent',), ('Kirovo-T\u0161epetsk',), ('Krasnogorsk',), ('Klin',), ('T\u0161aikovski',), ('Novyi Urengoi',), ('Longyearbyen',), ('Serravalle',), ('San Marino',), ('Bratislava',), ('Ko\u0161ice',), ('Pre\u0161ov',), ('Ljubljana',), ('Maribor',), ('Stockholm',), ('Gothenburg [G\u00f6teborg]',), ('Malm\u00f6',), ('Uppsala',), ('Link\u00f6ping',), ('V\u00e4ster\u00e5s',), ('\u00d6rebro',), ('Norrk\u00f6ping',), ('Helsingborg',), ('J\u00f6nk\u00f6ping',), ('Ume\u00e5',), ('Lund',), ('Bor\u00e5s',), ('Sundsvall',), ('G\u00e4vle',), ('Kyiv',), ('Harkova [Harkiv]',), ('Dnipropetrovsk',), ('Donetsk',), ('Odesa',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('T\u0161ernigiv',), ('T\u0161erkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('T\u0161ernivtsi',), ('Rivne',), ('Krement\u0161uk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kert\u0161',), ('Nikopol',), ('Berdjansk',), ('Pavlograd',), ('Sjeverodonetsk',), ('Slovjansk',), ('Uzgorod',), ('Alt\u0161evsk',), ('Lysyt\u0161ansk',), ('Jevpatorija',), ('Kamjanets-Podilskyi',), ('Jenakijeve',), ('Krasnyi Lut\u0161',), ('Stahanov',), ('Oleksandrija',), ('Konotop',), ('Kostjantynivka',), ('Berdyt\u0161iv',), ('Izmajil',), ('\u0160ostka',), ('Uman',), ('Brovary',), ('Mukat\u0161eve',), ('Citt\u00e0 del Vaticano',), ('Beograd',), ('Novi Sad',), ('Ni\u0161',), ('Pri\u0161tina',), ('Kragujevac',), ('Podgorica',), ('Subotica',), ('Prizren',)]"
      ],
      "rewards": [
        0.8890200708382526
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.8890200708382526,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "737": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 737,
    "query": "Return the different descriptions for templates that have been used in a document.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID"
      ],
      "observations": [
        "[('Advertisement',), ('Book',), ('Paper',), ('Presentation',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "738": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 738,
    "query": "What is the year that had the most concerts?",
    "turn_history": {
      "actions": [
        "SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1"
      ],
      "observations": [
        "[('2014', 3)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "739": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 739,
    "query": "How much does the most recent treatment cost?",
    "turn_history": {
      "actions": [
        "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
      ],
      "observations": [
        "[(Decimal('407.0000'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "740": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 740,
    "query": "How many cars has over 6 cylinders?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6"
      ],
      "observations": [
        "[(19,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "741": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 741,
    "query": "What is all the information about hiring?",
    "turn_history": {
      "actions": [
        "SELECT * FROM hiring"
      ],
      "observations": [
        "[(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "742": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 742,
    "query": "Find the number of concerts happened in the stadium with the highest capacity .",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "743": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 743,
    "query": "Which airline has most number of flights?",
    "turn_history": {
      "actions": [
        "SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1"
      ],
      "observations": [
        "[(4, 18)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "744": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 744,
    "query": "Find the names of stores whose number products is more than the average number of products.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)"
      ],
      "observations": [
        "[('HJK',), ('FC Inter',), ('FC Lahti',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "745": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 745,
    "query": "Which continent has the most diverse languages?",
    "turn_history": {
      "actions": [
        "SELECT Continent FROM countrylanguage GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1"
      ],
      "observations": [
        "Error executing query: Unknown column 'Continent' in 'field list'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "746": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 746,
    "query": "What are the ids of students who both have friends and are liked?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT f.student_id FROM Friend f JOIN Likes l ON f.student_id = l.student_id AND f.friend_id = l.liked_id"
      ],
      "observations": [
        "[(1689,), (1501,)]"
      ],
      "rewards": [
        0.25
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.25,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "747": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 747,
    "query": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
    "turn_history": {
      "actions": [
        "SELECT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008"
      ],
      "observations": [
        "[('Igor Stravinsky',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "748": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 748,
    "query": "Where is the youngest teacher from?",
    "turn_history": {
      "actions": [
        "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
      ],
      "observations": [
        "[('Farnworth Municipal Borough',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "749": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 749,
    "query": "List the Episode of all TV series sorted by rating.",
    "turn_history": {
      "actions": [
        "SELECT Episode FROM TV_series ORDER BY Rating DESC"
      ],
      "observations": [
        "[('A Love of a Lifetime',), ('Friendly Skies',), ('Game Three',), ('The Year of the Rabbit',), ('Winterland',), ('The Legend of Dylan McCleen',), ('Keepers',), ('Emily',), ('Blowback',), ('Home By Another Way',), ('Double Down',), ('The Hanged Man',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "750": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 750,
    "query": "Find the first name and country code of the player who did the most number of tours.",
    "turn_history": {
      "actions": [
        "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(*) DESC LIMIT 1)"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "751": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 751,
    "query": "Give the name, year of independence, and surface area of the country that has the lowest population.",
    "turn_history": {
      "actions": [
        "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)"
      ],
      "observations": [
        "[('Antarctica', None, 13120000.0), ('French Southern territories', None, 7780.0), ('Bouvet Island', None, 59.0), ('Heard Island and McDonald Islands', None, 359.0), ('British Indian Ocean Territory', None, 78.0), ('South Georgia and the South Sandwich Islands', None, 3903.0), ('United States Minor Outlying Islands', None, 16.0)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "752": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 752,
    "query": "What are all distinct countries where singers above age 20 are from?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Country FROM singer WHERE Age > 20"
      ],
      "observations": [
        "[('Netherlands',), ('United States',), ('France',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "753": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 753,
    "query": "Find the production code and channel of the most recently aired cartoon .",
    "turn_history": {
      "actions": [
        "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1"
      ],
      "observations": [
        "[(102.0, '701')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "754": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 754,
    "query": "Show ids for all templates that are used by more than one document.",
    "turn_history": {
      "actions": [
        "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1"
      ],
      "observations": [
        "[(11,), (14,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "755": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 755,
    "query": "Find all airlines that have fewer than 200 flights.",
    "turn_history": {
      "actions": [
        "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200"
      ],
      "observations": [
        "[(1,), (2,), (3,), (4,), (5,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "756": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 756,
    "query": "Which airports do not have departing or arriving flights?",
    "turn_history": {
      "actions": [
        "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)"
      ],
      "observations": [
        "[('Municipal ',), ('Municipal ',), ('Ambler ',), ('Municipal ',), ('Dougherty County ',), ('Arcata ',), ('Lenawee County ',), ('Adak Island Ns ',), ('Ada ',), ('Albert Lea ',), ('Municipal ',), ('Downtown ',), ('Municipal ',), ('Municipal ',), ('Alliance ',), ('Anita Bay ',), ('Municipal ',), ('Municipal ',), ('George Downer ',), ('Akhiok SPB ',), ('Colorado Plains Regional Airport ',), ('Anaktuvuk ',), ('Albany International ',), ('Municipal ',), ('Alton ',), ('Rick Husband Amarillo International ',), ('Gratiot Community ',), ('Orange County Steel Salvage Heliport ',), ('Anniston Metropolitan ',), ('Ted Stevens Anchorage International Airport ',), ('Aniak ',), ('Annette Island ',), ('Lee ',), ('Tri-State Steuben Cty ',), ('Anvik ',), ('Ainsworth ',), ('Alpena County Regional ',), ('Alyeska ',), ('Municipal ',), ('Arctic Village ',), ('Asbury Park ',), ('Aspen ',), ('Astoria ',), ('Antlers ',), ('Ohio University ',), ('Alakanuk ',), ('Algona ',), ('Akron/canton Regional ',), ('Dyess AFB ',), ('Esler Field ',), ('Holloman AFB ',), ('US Army Heliport ',), ('Spb ',), ('Akutan ',), ('Albany NAS ',), ('NAS ',), ('Rollang Field ',), ('Reilly AHP ',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "757": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 757,
    "query": "For each citizenship, how many singers are from that country?",
    "turn_history": {
      "actions": [
        "SELECT Citizenship, COUNT(*) AS Num_Singers FROM singer GROUP BY Citizenship"
      ],
      "observations": [
        "[('France', 1), ('United States', 4), ('Chile', 1), ('Australia', 1), ('Germany', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "758": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 758,
    "query": "Show all document ids, names and the number of paragraphs in each document.",
    "turn_history": {
      "actions": [
        "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name"
      ],
      "observations": [
        "[(1, 'Introduction of OS', 0), (3, 'Summer Show', 1), (76, 'Robbin CV', 0), (80, 'Welcome to NY', 2), (82, 'Data base', 0), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (801801, 'How to read a book', 0), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]"
      ],
      "rewards": [
        0.7142857142857143
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.7142857142857143,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "759": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 759,
    "query": "Return the number of  airports.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM airports"
      ],
      "observations": [
        "[(100,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "760": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 760,
    "query": "Show all template type codes that are not used by any document.",
    "turn_history": {
      "actions": [
        "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_Type_Code IS NULL"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "761": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 761,
    "query": "List the last name of the owner owning the youngest dog.",
    "turn_history": {
      "actions": [
        "SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs)"
      ],
      "observations": [
        "[('Nicolas',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "762": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 762,
    "query": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
    "turn_history": {
      "actions": [
        "SELECT conductor.Name  FROM conductor  INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID  WHERE orchestra.Year_of_Founded > 2008"
      ],
      "observations": [
        "[('Igor Stravinsky',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "763": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 763,
    "query": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
    "turn_history": {
      "actions": [
        "SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= 2014 GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1"
      ],
      "observations": [
        "[('Somerset Park', 11998)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "764": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 764,
    "query": "Find the first names of owners living in Virginia and the names of dogs they own.",
    "turn_history": {
      "actions": [
        "SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'"
      ],
      "observations": [
        "[('Melisa', 'Bessie')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "765": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 765,
    "query": "What are the names and release years for all the songs of the youngest singer?",
    "turn_history": {
      "actions": [
        "SELECT Name, Song_release_year FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE Age = (SELECT MIN(Age) FROM singer)"
      ],
      "observations": [
        "[('Tribal King', '2016'), ('Tribal King', '2016')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "766": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 766,
    "query": "Which airlines have departures from CVO but not from APG airports?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT airlines.Airline FROM airlines INNER JOIN flights ON airlines.Airline = flights.Airline WHERE flights.SourceAirport = 'CVO' AND flights.Airline NOT IN (   SELECT DISTINCT airlines.Airline   FROM airlines   INNER JOIN flights ON airlines.Airline = flights.Airline   WHERE flights.SourceAirport = 'APG' )"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "767": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 767,
    "query": "Which countries have either English or Dutch as an official language?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T') ORDER BY Name"
      ],
      "observations": [
        "[('American Samoa',), ('Anguilla',), ('Antigua and Barbuda',), ('Aruba',), ('Australia',), ('Barbados',), ('Belgium',), ('Belize',), ('Bermuda',), ('Canada',), ('Cayman Islands',), ('Christmas Island',), ('Cocos (Keeling) Islands',), ('Falkland Islands',), ('Gibraltar',), ('Guam',), ('Hong Kong',), ('Ireland',), ('Lesotho',), ('Malta',), ('Marshall Islands',), ('Montserrat',), ('Nauru',), ('Netherlands',), ('Netherlands Antilles',), ('New Zealand',), ('Niue',), ('Norfolk Island',), ('Northern Mariana Islands',), ('Palau',), ('Saint Helena',), ('Saint Kitts and Nevis',), ('Saint Lucia',), ('Saint Vincent and the Grenadines',), ('Samoa',), ('Seychelles',), ('South Africa',), ('Tokelau',), ('Tonga',), ('Turks and Caicos Islands',), ('Tuvalu',), ('United Kingdom',), ('United States',), ('United States Minor Outlying Islands',), ('Vanuatu',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Zimbabwe',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "768": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 768,
    "query": "Return the average earnings across all poker players.",
    "turn_history": {
      "actions": [
        "SELECT AVG(Earnings) FROM poker_player"
      ],
      "observations": [
        "[(301891.2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "769": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 769,
    "query": "Which template type code has most number of templates?",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[('BK',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "770": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 770,
    "query": "Find the total ranking points for each player and their first name.",
    "turn_history": {
      "actions": [
        "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "771": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 771,
    "query": "How many players are from each country?",
    "turn_history": {
      "actions": [
        "SELECT country_code, COUNT(*) FROM players GROUP BY country_code"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "772": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 772,
    "query": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "turn_history": {
      "actions": [
        "SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students)"
      ],
      "observations": [
        "[('Timmothy', 'Anna', 'Ward')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "773": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 773,
    "query": "List the record company shared by the most number of orchestras.",
    "turn_history": {
      "actions": [
        "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(DISTINCT Orchestra_ID) DESC LIMIT 1"
      ],
      "observations": [
        "[('Decca Records',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "774": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 774,
    "query": "What is the maximum accelerate for all the different cylinders?",
    "turn_history": {
      "actions": [
        "SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders"
      ],
      "observations": [
        "[(16.0,), (21.0,), (18.0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "775": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 775,
    "query": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
    "turn_history": {
      "actions": [
        "SELECT Model, MPG FROM cars_data INNER JOIN model_list ON cars_data.Id = model_list.ModelId ORDER BY MPG DESC LIMIT 1"
      ],
      "observations": [
        "[('bmw', '18.0')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "776": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 776,
    "query": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
    "turn_history": {
      "actions": [
        "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1"
      ],
      "observations": [
        "[(6, 'Stanford', 'Mona', 'Rogahn', 3)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "777": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 777,
    "query": "What are the average and maximum number of tickets bought in all visits?",
    "turn_history": {
      "actions": [
        "SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit"
      ],
      "observations": [
        "[(Decimal('10.5000'), 24)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "778": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 778,
    "query": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
    "turn_history": {
      "actions": [
        "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers WHERE Maker = 'fiat' OR Country IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 3))"
      ],
      "observations": [
        "[(1, 'usa'), (2, 'germany'), (4, 'japan'), (5, 'italy')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "779": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 779,
    "query": "What is the maker of the carr produced in the earliest year and what year was it?",
    "turn_history": {
      "actions": [
        "SELECT car_makers.Maker, MIN(cars_data.Year) AS EarliestYear FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker ORDER BY EarliestYear ASC LIMIT 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "780": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 780,
    "query": "Count the number of employees for each city.",
    "turn_history": {
      "actions": [
        "SELECT City, COUNT(*) AS Num_Employees FROM employee GROUP BY City"
      ],
      "observations": [
        "[('Bristol', 3), ('Bath', 3), ('Wasps', 2), ('Sale', 1), ('Leicester', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "781": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 781,
    "query": "How many cities in each district have a population that is above the average population across all cities?",
    "turn_history": {
      "actions": [
        "SELECT District, COUNT(*) AS NumCities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District"
      ],
      "observations": [
        "[('Kabol', 1), ('Noord-Holland', 1), ('Zuid-Holland', 2), ('Alger', 1), ('Oran', 1), ('Constantine', 1), ('Luanda', 1), ('Dubai', 1), ('Abu Dhabi', 1), ('Distrito Federal', 4), ('Buenos Aires', 12), ('C\u00f3rdoba', 1), ('Santa F\u00e9', 2), ('Tucum\u00e1n', 1), ('Salta', 1), ('Yerevan', 1), ('New South Wales', 1), ('Victoria', 1), ('Queensland', 1), ('West Australia', 1), ('South Australia', 1), ('Baki', 1), ('Dhaka', 1), ('Chittagong', 1), ('Khulna', 1), ('Antwerpen', 1), ('Atlantique', 1), ('Santa Cruz', 1), ('La Paz', 2), ('Cochabamba', 1), ('Federaatio', 1), ('S\u00e3o Paulo', 13), ('Rio de Janeiro', 8), ('Bahia', 2), ('Minas Gerais', 4), ('Cear\u00e1', 1), ('Paran\u00e1', 2), ('Pernambuco', 3), ('Rio Grande do Sul', 1), ('Amazonas', 1), ('Par\u00e1', 2), ('Goi\u00e1s', 1), ('Maranh\u00e3o', 1), ('Alagoas', 1), ('Piau\u00ed', 1), ('Rio Grande do Norte', 1), ('Mato Grosso do Sul', 1), ('Para\u00edba', 2), ('Mato Grosso', 1), ('Sergipe', 1), ('Santa Catarina', 1), ('England', 7), ('Scotland', 2), ('Grad Sofija', 1), ('Kadiogo', 1), ('Santiago', 3), ('Djibouti', 1), ('Distrito Nacional', 1), ('Guayas', 1), ('Pichincha', 1), ('Kairo', 1), ('Aleksandria', 1), ('Giza', 1), ('al-Qalyubiya', 1), ('Port Said', 1), ('Suez', 1), ('al-Gharbiya', 2), ('al-Daqahliya', 1), ('Luxor', 1), ('San Salvador', 1), ('Maekel', 1), ('Madrid', 1), ('Katalonia', 1), ('Valencia', 1), ('Andalusia', 2), ('Aragonia', 1), ('Baskimaa', 1), ('Canary Islands', 1), ('Murcia', 1), ('Western Cape', 1), ('Gauteng', 7), ('Eastern Cape', 1), ('KwaZulu-Natal', 4), ('Addis Abeba', 1), ('National Capital Reg', 12), ('Southern Mindanao', 2), ('Central Visayas', 1), ('Western Mindanao', 1), ('Southern Tagalog', 2), ('Northern Mindanao', 1), ('Western Visayas', 2), ('Estuaire', 1), ('Tbilisi', 1), ('Greater Accra', 1), ('Ashanti', 1), ('Guatemala', 1), ('Conakry', 1), ('Ouest', 1), ('Distrito Central', 1), ('Cort\u00e9s', 1), ('Kowloon and New Kowl', 1), ('Hongkong', 1), ('Jakarta Raya', 1), ('East Java', 2), ('West Java', 4), ('Sumatera Utara', 1), ('Sumatera Selatan', 1), ('Central Java', 2), ('Sulawesi Selatan', 1), ('Lampung', 1), ('Sumatera Barat', 1), ('Kalimantan Selatan', 1), ('Riau', 1), ('Bali', 1), ('Yogyakarta', 1), ('Kalimantan Barat', 1), ('Kalimantan Timur', 1), ('Jambi', 1), ('Maharashtra', 13), ('Delhi', 1), ('West Bengali', 3), ('Tamil Nadu', 5), ('Andhra Pradesh', 5), ('Gujarat', 5), ('Karnataka', 3), ('Uttar Pradesh', 12), ('Rajasthan', 5), ('Madhya Pradesh', 5), ('Punjab', 11), ('Bihar', 1), ('Jammu and Kashmir', 1), ('Haryana', 1), ('Jharkhand', 2), ('Assam', 1), ('Kerala', 3), ('Chandigarh', 1), ('Chhatisgarh', 2), ('Orissa', 2), ('Baghdad', 1), ('Ninawa', 1), ('Irbil', 1), ('al-Tamim', 1), ('Basra', 1), ('al-Sulaymaniya', 1), ('Teheran', 2), ('Khorasan', 1), ('Esfahan', 1), ('East Azerbaidzan', 1), ('Fars', 1), ('Khuzestan', 1), ('Qom', 1), ('Kermanshah', 1), ('West Azerbaidzan', 1), ('Sistan va Baluchesta', 1), ('Gilan', 1), ('Hamadan', 1), ('Kerman', 1), ('Markazi', 1), ('Leinster', 1), ('Jerusalem', 1), ('Latium', 1), ('Lombardia', 1), ('Campania', 1), ('Piemonte', 1), ('Sisilia', 1), ('Liguria', 1), ('Emilia-Romagna', 1), ('Toscana', 1), ('Wien', 1), ('Tokyo-to', 3), ('Kanagawa', 5), ('Osaka', 6), ('Aichi', 2), ('Hokkaido', 2), ('Kyoto', 1), ('Hyogo', 4), ('Fukuoka', 2), ('Hiroshima', 2), ('Miyagi', 1), ('Chiba', 4), ('Kumamoto', 1), ('Okayama', 2), ('Shizuoka', 2), ('Kagoshima', 1), ('Niigata', 1), ('Saitama', 3), ('Ehime', 1), ('Ishikawa', 1), ('Tochigi', 1), ('Oita', 1), ('Nagasaki', 1), ('Gifu', 1), ('Wakayama', 1), ('Nara', 1), ('Fukushima', 1), ('Nagano', 1), ('Sanaa', 1), ('Aden', 1), ('Amman', 1), ('al-Zarqa', 1), ('Central Serbia', 1), ('Phnom Penh', 1), ('Littoral', 1), ('Centre', 1), ('Qu\u00e9bec', 1), ('Alberta', 2), ('Ontario', 4), ('Manitoba', 1), ('British Colombia', 1), ('Almaty Qalasy', 1), ('Qaraghandy', 1), ('South Kazakstan', 1), ('Nairobi', 1), ('Coast', 1), ('Bangui', 1), ('Shanghai', 1), ('Peking', 1), ('Chongqing', 1), ('Tianjin', 1), ('Hubei', 4), ('Heilongjiang', 9), ('Liaoning', 12), ('Guangdong', 4), ('Sichuan', 3), ('Jiangsu', 7), ('Jilin', 4), ('Shaanxi', 2), ('Shandong', 7), ('Zhejiang', 3), ('Henan', 7), ('Hebei', 6), ('Shanxi', 3), ('Yunnan', 1), ('Hunan', 4), ('Jiangxi', 2), ('Fujian', 2), ('Gansu', 1), ('Guizhou', 2), ('Anhui', 5), ('Xinxiang', 1), ('Guangxi', 3), ('Inner Mongolia', 3), ('Qinghai', 1), ('Ningxia', 1), ('Hainan', 1), ('Bishkek shaary', 1), ('Santaf\u00e9 de Bogot\u00e1', 1), ('Valle', 1), ('Antioquia', 1), ('Atl\u00e1ntico', 1), ('Bol\u00edvar', 2), ('Norte de Santander', 1), ('Santander', 1), ('Tolima', 1), ('Risaralda', 1), ('Magdalena', 1), ('Brazzaville', 1), ('Kouilou', 1), ('Kinshasa', 1), ('Shaba', 2), ('East Kasai', 1), ('Haute-Za\u00efre', 1), ('West Kasai', 1), ('Pyongyang-si', 1), ('Hamgyong N', 1), ('Hamgyong P', 1), ('Nampo-si', 1), ('Seoul', 1), ('Pusan', 1), ('Inchon', 1), ('Taegu', 1), ('Taejon', 1), ('Kwangju', 1), ('Kyongsangnam', 3), ('Kyonggi', 7), ('Chollabuk', 1), ('Chungchongbuk', 1), ('Kyongsangbuk', 1), ('Attika', 1), ('Central Macedonia', 1), ('Grad Zagreb', 1), ('La Habana', 1), ('Santiago de Cuba', 1), ('Viangchan', 1), ('Riika', 1), ('Beirut', 1), ('Montserrado', 1), ('Tripoli', 1), ('Bengasi', 1), ('Vilna', 1), ('Kaunas', 1), ('Macau', 1), ('Antananarivo', 1), ('Skopje', 1), ('Blantyre', 1), ('Lilongwe', 1), ('Wilayah Persekutuan', 1), ('Perak', 1), ('Bamako', 1), ('Casablanca', 1), ('Rabat-Sal\u00e9-Zammour-Z', 2), ('Marrakech-Tensift-Al', 1), ('F\u00e8s-Boulemane', 1), ('Tanger-T\u00e9touan', 1), ('Mekn\u00e8s-Tafilalet', 1), ('Oriental', 1), ('Nouakchott', 1), ('Jalisco', 3), ('M\u00e9xico', 9), ('Puebla', 1), ('Chihuahua', 2), ('Baja California', 3), ('Guanajuato', 3), ('Nuevo Le\u00f3n', 3), ('Sinaloa', 3), ('Guerrero', 1), ('Yucat\u00e1n', 1), ('San Luis Potos\u00ed', 1), ('Aguascalientes', 1), ('Quer\u00e9taro de Arteaga', 1), ('Michoac\u00e1n de Ocampo', 1), ('Sonora', 2), ('Coahuila de Zaragoza', 2), ('Tabasco', 1), ('Durango', 1), ('Veracruz', 2), ('Chiapas', 1), ('Tamaulipas', 2), ('Quintana Roo', 1), ('Chisinau', 1), ('Ulaanbaatar', 1), ('Maputo', 2), ('Sofala', 1), ('Rangoon [Yangon]', 1), ('Mandalay', 1), ('Central', 2), ('Managua', 1), ('Niamey', 1), ('Lagos', 1), ('Oyo & Osun', 5), ('Kano & Jigawa', 1), ('Kwara & Kogi', 1), ('Ogun', 1), ('Rivers & Bayelsa', 1), ('Kaduna', 1), ('Anambra & Enugu & Eb', 1), ('Ondo & Ekiti', 1), ('Oslo', 1), ('Abidjan', 1), ('Sindh', 2), ('Nothwest Border Prov', 1), ('Baluchistan', 1), ('Islamabad', 1), ('Panam\u00e1', 1), ('Asunci\u00f3n', 1), ('Lima', 1), ('Arequipa', 1), ('La Libertad', 1), ('Lambayeque', 1), ('Callao', 1), ('Loreto', 1), ('Lisboa', 2), ('San Juan', 1), ('Mazowieckie', 1), ('Lodzkie', 1), ('Malopolskie', 1), ('Dolnoslaskie', 1), ('Wielkopolskie', 1), ('Pomorskie', 1), ('Zachodnio-Pomorskie', 1), ('Kujawsko-Pomorskie', 1), ('Lubelskie', 1), ('Doha', 1), ('\u00cele-de-France', 1), ('Provence-Alpes-C\u00f4te', 1), ('Rh\u00f4ne-Alpes', 1), ('Midi-Pyr\u00e9n\u00e9es', 1), ('Bukarest', 1), ('West G\u00f6tanmaan l\u00e4n', 1), ('Berliini', 1), ('Hamburg', 1), ('Baijeri', 2), ('Nordrhein-Westfalen', 7), ('Hessen', 1), ('Baden-W\u00fcrttemberg', 1), ('Bremen', 1), ('Niedersachsen', 1), ('Saksi', 2), ('Lusaka', 1), ('Riyadh', 1), ('Mekka', 3), ('Medina', 1), ('al-Sharqiya', 1), ('Cap-Vert', 2), ('Western', 2), ('\u2013', 1), ('Bratislava', 1), ('Banaadir', 1), ('Khartum', 3), ('Newmaa', 1), ('Damascus', 1), ('Aleppo', 1), ('Hims', 1), ('Karotegin', 1), ('Taipei', 5), ('Kaohsiung', 1), ('Taichung', 1), ('Tainan', 1), ('Keelung', 1), ('Hsinchu', 1), ('Dar es Salaam', 1), ('K\u00f8benhavn', 1), ('Bangkok', 1), ('Maritime', 1), ('Chari-Baguirmi', 1), ('Hlavn\u00ed mesto Praha', 1), ('Jizn\u00ed Morava', 1), ('Tunis', 1), ('Istanbul', 1), ('Ankara', 1), ('Izmir', 1), ('Adana', 1), ('Bursa', 1), ('Gaziantep', 1), ('Konya', 1), ('I\u00e7el', 1), ('Antalya', 1), ('Diyarbakir', 1), ('Kayseri', 1), ('Eskisehir', 1), ('Sanliurfa', 1), ('Ahal', 1), ('Kiova', 1), ('Harkova', 1), ('Dnipropetrovsk', 2), ('Donetsk', 3), ('Odesa', 1), ('Zaporizzja', 1), ('Lviv', 1), ('Mykolajiv', 1), ('Lugansk', 1), ('Vinnytsja', 1), ('Herson', 1), ('Budapest', 1), ('Montevideo', 1), ('Auckland', 1), ('Toskent Shahri', 1), ('Namangan', 1), ('Samarkand', 1), ('Horad Minsk', 1), ('Gomel', 1), ('Mogiljov', 1), ('Zulia', 1), ('Lara', 1), ('Carabobo', 1), ('Miranda', 1), ('Aragua', 1), ('Moscow (City)', 1), ('Pietari', 1), ('Novosibirsk', 1), ('Nizni Novgorod', 1), ('Sverdlovsk', 2), ('Samara', 2), ('Omsk', 1), ('Tatarstan', 2), ('Ba\u0161kortostan', 1), ('T\u0161eljabinsk', 2), ('Rostov-na-Donu', 1), ('Perm', 1), ('Volgograd', 1), ('Voronez', 1), ('Krasnojarsk', 1), ('Saratov', 1), ('Uljanovsk', 1), ('Udmurtia', 1), ('Krasnodar', 2), ('Jaroslavl', 1), ('Habarovsk', 1), ('Primorje', 1), ('Irkutsk', 1), ('Altai', 1), ('Kemerovo', 2), ('Penza', 1), ('Rjazan', 1), ('Orenburg', 1), ('Lipetsk', 1), ('Tula', 1), ('Tjumen', 1), ('Astrahan', 1), ('Tomsk', 1), ('Kirov', 1), ('Ivanovo', 1), ('T\u0161uvassia', 1), ('Brjansk', 1), ('Tver', 1), ('Kursk', 1), ('Kaliningrad', 1), ('Murmansk', 1), ('Burjatia', 1), ('Kurgan', 1), ('Arkangeli', 1), ('Smolensk', 1), ('Ho Chi Minh City', 1), ('Hanoi', 1), ('Haiphong', 1), ('Quang Nam-Da Nang', 1), ('Harjumaa', 1), ('New York', 1), ('California', 8), ('Illinois', 1), ('Texas', 6), ('Pennsylvania', 1), ('Arizona', 3), ('Michigan', 1), ('Indiana', 1), ('Florida', 2), ('Ohio', 2), ('Maryland', 1), ('Tennessee', 2), ('Wisconsin', 1), ('Massachusetts', 1), ('District of Columbia', 1), ('Washington', 1), ('Colorado', 2), ('North Carolina', 1), ('Oregon', 1), ('Oklahoma', 2), ('Louisiana', 1), ('Nevada', 1), ('New Mexico', 1), ('Missouri', 1), ('Virginia', 1), ('Georgia', 1), ('Nebraska', 1), ('Minnesota', 1), ('Hawaii', 1), ('Harare', 1), ('Bulawayo', 1), ('Gaza', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "782": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 782,
    "query": "What are the names of cities in Europe for which English is not the official language?",
    "turn_history": {
      "actions": [
        "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial <> 'T'"
      ],
      "observations": [
        "[('Tirana',), ('Tirana',), ('Andorra la Vella',), ('Andorra la Vella',), ('Andorra la Vella',), ('Wien',), ('Wien',), ('Wien',), ('Wien',), ('Wien',), ('Wien',), ('Wien',), ('Graz',), ('Graz',), ('Graz',), ('Graz',), ('Graz',), ('Graz',), ('Graz',), ('Linz',), ('Linz',), ('Linz',), ('Linz',), ('Linz',), ('Linz',), ('Linz',), ('Salzburg',), ('Salzburg',), ('Salzburg',), ('Salzburg',), ('Salzburg',), ('Salzburg',), ('Salzburg',), ('Innsbruck',), ('Innsbruck',), ('Innsbruck',), ('Innsbruck',), ('Innsbruck',), ('Innsbruck',), ('Innsbruck',), ('Klagenfurt',), ('Klagenfurt',), ('Klagenfurt',), ('Klagenfurt',), ('Klagenfurt',), ('Klagenfurt',), ('Klagenfurt',), ('Antwerpen',), ('Antwerpen',), ('Antwerpen',), ('Gent',), ('Gent',), ('Gent',), ('Charleroi',), ('Charleroi',), ('Charleroi',), ('Li\u00e8ge',), ('Li\u00e8ge',), ('Li\u00e8ge',), ('Bruxelles [Brussel]',), ('Bruxelles [Brussel]',), ('Bruxelles [Brussel]',), ('Brugge',), ('Brugge',), ('Brugge',), ('Schaerbeek',), ('Schaerbeek',), ('Schaerbeek',), ('Namur',), ('Namur',), ('Namur',), ('Mons',), ('Mons',), ('Mons',), ('Sofija',), ('Sofija',), ('Sofija',), ('Plovdiv',), ('Plovdiv',), ('Plovdiv',), ('Varna',), ('Varna',), ('Varna',), ('Burgas',), ('Burgas',), ('Burgas',), ('Ruse',), ('Ruse',), ('Ruse',), ('Stara Zagora',), ('Stara Zagora',), ('Stara Zagora',), ('Pleven',), ('Pleven',), ('Pleven',), ('Sliven',), ('Sliven',), ('Sliven',), ('Dobric',), ('Dobric',), ('Dobric',), ('\u0160umen',), ('\u0160umen',), ('\u0160umen',), ('Minsk',), ('Minsk',), ('Gomel',), ('Gomel',), ('Mogiljov',), ('Mogiljov',), ('Vitebsk',), ('Vitebsk',), ('Grodno',), ('Grodno',), ('Brest',), ('Brest',), ('Bobruisk',), ('Bobruisk',), ('Baranovit\u0161i',), ('Baranovit\u0161i',), ('Borisov',), ('Borisov',), ('Pinsk',), ('Pinsk',), ('Or\u0161a',), ('Or\u0161a',), ('Mozyr',), ('Mozyr',), ('Novopolotsk',), ('Novopolotsk',), ('Lida',), ('Lida',), ('Soligorsk',), ('Soligorsk',), ('Molodet\u0161no',), ('Molodet\u0161no',), ('Praha',), ('Praha',), ('Praha',), ('Praha',), ('Praha',), ('Praha',), ('Praha',), ('Brno',), ('Brno',), ('Brno',), ('Brno',), ('Brno',), ('Brno',), ('Brno',), ('Ostrava',), ('Ostrava',), ('Ostrava',), ('Ostrava',), ('Ostrava',), ('Ostrava',), ('Ostrava',), ('Plzen',), ('Plzen',), ('Plzen',), ('Plzen',), ('Plzen',), ('Plzen',), ('Plzen',), ('Olomouc',), ('Olomouc',), ('Olomouc',), ('Olomouc',), ('Olomouc',), ('Olomouc',), ('Olomouc',), ('Liberec',), ('Liberec',), ('Liberec',), ('Liberec',), ('Liberec',), ('Liberec',), ('Liberec',), ('Cesk\u00e9 Budejovice',), ('Cesk\u00e9 Budejovice',), ('Cesk\u00e9 Budejovice',), ('Cesk\u00e9 Budejovice',), ('Cesk\u00e9 Budejovice',), ('Cesk\u00e9 Budejovice',), ('Cesk\u00e9 Budejovice',), ('Hradec Kr\u00e1lov\u00e9',), ('Hradec Kr\u00e1lov\u00e9',), ('Hradec Kr\u00e1lov\u00e9',), ('Hradec Kr\u00e1lov\u00e9',), ('Hradec Kr\u00e1lov\u00e9',), ('Hradec Kr\u00e1lov\u00e9',), ('Hradec Kr\u00e1lov\u00e9',), ('\u00dast\u00ed nad Labem',), ('\u00dast\u00ed nad Labem',), ('\u00dast\u00ed nad Labem',), ('\u00dast\u00ed nad Labem',), ('\u00dast\u00ed nad Labem',), ('\u00dast\u00ed nad Labem',), ('\u00dast\u00ed nad Labem',), ('Pardubice',), ('Pardubice',), ('Pardubice',), ('Pardubice',), ('Pardubice',), ('Pardubice',), ('Pardubice',), ('Berlin',), ('Berlin',), ('Berlin',), ('Berlin',), ('Berlin',), ('Hamburg',), ('Hamburg',), ('Hamburg',), ('Hamburg',), ('Hamburg',), ('Munich [M\u00fcnchen]',), ('Munich [M\u00fcnchen]',), ('Munich [M\u00fcnchen]',), ('Munich [M\u00fcnchen]',), ('Munich [M\u00fcnchen]',), ('K\u00f6ln',), ('K\u00f6ln',), ('K\u00f6ln',), ('K\u00f6ln',), ('K\u00f6ln',), ('Frankfurt am Main',), ('Frankfurt am Main',), ('Frankfurt am Main',), ('Frankfurt am Main',), ('Frankfurt am Main',), ('Essen',), ('Essen',), ('Essen',), ('Essen',), ('Essen',), ('Dortmund',), ('Dortmund',), ('Dortmund',), ('Dortmund',), ('Dortmund',), ('Stuttgart',), ('Stuttgart',), ('Stuttgart',), ('Stuttgart',), ('Stuttgart',), ('D\u00fcsseldorf',), ('D\u00fcsseldorf',), ('D\u00fcsseldorf',), ('D\u00fcsseldorf',), ('D\u00fcsseldorf',), ('Bremen',), ('Bremen',), ('Bremen',), ('Bremen',), ('Bremen',), ('Duisburg',), ('Duisburg',), ('Duisburg',), ('Duisburg',), ('Duisburg',), ('Hannover',), ('Hannover',), ('Hannover',), ('Hannover',), ('Hannover',), ('Leipzig',), ('Leipzig',), ('Leipzig',), ('Leipzig',), ('Leipzig',), ('N\u00fcrnberg',), ('N\u00fcrnberg',), ('N\u00fcrnberg',), ('N\u00fcrnberg',), ('N\u00fcrnberg',), ('Dresden',), ('Dresden',), ('Dresden',), ('Dresden',), ('Dresden',), ('Bochum',), ('Bochum',), ('Bochum',), ('Bochum',), ('Bochum',), ('Wuppertal',), ('Wuppertal',), ('Wuppertal',), ('Wuppertal',), ('Wuppertal',), ('Bielefeld',), ('Bielefeld',), ('Bielefeld',), ('Bielefeld',), ('Bielefeld',), ('Mannheim',), ('Mannheim',), ('Mannheim',), ('Mannheim',), ('Mannheim',), ('Bonn',), ('Bonn',), ('Bonn',), ('Bonn',), ('Bonn',), ('Gelsenkirchen',), ('Gelsenkirchen',), ('Gelsenkirchen',), ('Gelsenkirchen',), ('Gelsenkirchen',), ('Karlsruhe',), ('Karlsruhe',), ('Karlsruhe',), ('Karlsruhe',), ('Karlsruhe',), ('Wiesbaden',), ('Wiesbaden',), ('Wiesbaden',), ('Wiesbaden',), ('Wiesbaden',), ('M\u00fcnster',), ('M\u00fcnster',), ('M\u00fcnster',), ('M\u00fcnster',), ('M\u00fcnster',), ('M\u00f6nchengladbach',), ('M\u00f6nchengladbach',), ('M\u00f6nchengladbach',), ('M\u00f6nchengladbach',), ('M\u00f6nchengladbach',), ('Chemnitz',), ('Chemnitz',), ('Chemnitz',), ('Chemnitz',), ('Chemnitz',), ('Augsburg',), ('Augsburg',), ('Augsburg',), ('Augsburg',), ('Augsburg',), ('Halle/Saale',), ('Halle/Saale',), ('Halle/Saale',), ('Halle/Saale',), ('Halle/Saale',), ('Braunschweig',), ('Braunschweig',), ('Braunschweig',), ('Braunschweig',), ('Braunschweig',), ('Aachen',), ('Aachen',), ('Aachen',), ('Aachen',), ('Aachen',), ('Krefeld',), ('Krefeld',), ('Krefeld',), ('Krefeld',), ('Krefeld',), ('Magdeburg',), ('Magdeburg',), ('Magdeburg',), ('Magdeburg',), ('Magdeburg',), ('Kiel',), ('Kiel',), ('Kiel',), ('Kiel',), ('Kiel',), ('Oberhausen',), ('Oberhausen',), ('Oberhausen',), ('Oberhausen',), ('Oberhausen',), ('L\u00fcbeck',), ('L\u00fcbeck',), ('L\u00fcbeck',), ('L\u00fcbeck',), ('L\u00fcbeck',), ('Hagen',), ('Hagen',), ('Hagen',), ('Hagen',), ('Hagen',), ('Rostock',), ('Rostock',), ('Rostock',), ('Rostock',), ('Rostock',), ('Freiburg im Breisgau',), ('Freiburg im Breisgau',), ('Freiburg im Breisgau',), ('Freiburg im Breisgau',), ('Freiburg im Breisgau',), ('Erfurt',), ('Erfurt',), ('Erfurt',), ('Erfurt',), ('Erfurt',), ('Kassel',), ('Kassel',), ('Kassel',), ('Kassel',), ('Kassel',), ('Saarbr\u00fccken',), ('Saarbr\u00fccken',), ('Saarbr\u00fccken',), ('Saarbr\u00fccken',), ('Saarbr\u00fccken',), ('Mainz',), ('Mainz',), ('Mainz',), ('Mainz',), ('Mainz',), ('Hamm',), ('Hamm',), ('Hamm',), ('Hamm',), ('Hamm',), ('Herne',), ('Herne',), ('Herne',), ('Herne',), ('Herne',), ('M\u00fclheim an der Ruhr',), ('M\u00fclheim an der Ruhr',), ('M\u00fclheim an der Ruhr',), ('M\u00fclheim an der Ruhr',), ('M\u00fclheim an der Ruhr',), ('Solingen',), ('Solingen',), ('Solingen',), ('Solingen',), ('Solingen',), ('Osnabr\u00fcck',), ('Osnabr\u00fcck',), ('Osnabr\u00fcck',), ('Osnabr\u00fcck',), ('Osnabr\u00fcck',), ('Ludwigshafen am Rhein',), ('Ludwigshafen am Rhein',), ('Ludwigshafen am Rhein',), ('Ludwigshafen am Rhein',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Leverkusen',), ('Leverkusen',), ('Leverkusen',), ('Leverkusen',), ('Oldenburg',), ('Oldenburg',), ('Oldenburg',), ('Oldenburg',), ('Oldenburg',), ('Neuss',), ('Neuss',), ('Neuss',), ('Neuss',), ('Neuss',), ('Heidelberg',), ('Heidelberg',), ('Heidelberg',), ('Heidelberg',), ('Heidelberg',), ('Darmstadt',), ('Darmstadt',), ('Darmstadt',), ('Darmstadt',), ('Darmstadt',), ('Paderborn',), ('Paderborn',), ('Paderborn',), ('Paderborn',), ('Paderborn',), ('Potsdam',), ('Potsdam',), ('Potsdam',), ('Potsdam',), ('Potsdam',), ('W\u00fcrzburg',), ('W\u00fcrzburg',), ('W\u00fcrzburg',), ('W\u00fcrzburg',), ('W\u00fcrzburg',), ('Regensburg',), ('Regensburg',), ('Regensburg',), ('Regensburg',), ('Regensburg',), ('Recklinghausen',), ('Recklinghausen',), ('Recklinghausen',), ('Recklinghausen',), ('Recklinghausen',), ('G\u00f6ttingen',), ('G\u00f6ttingen',), ('G\u00f6ttingen',), ('G\u00f6ttingen',), ('G\u00f6ttingen',), ('Bremerhaven',), ('Bremerhaven',), ('Bremerhaven',), ('Bremerhaven',), ('Bremerhaven',), ('Wolfsburg',), ('Wolfsburg',), ('Wolfsburg',), ('Wolfsburg',), ('Wolfsburg',), ('Bottrop',), ('Bottrop',), ('Bottrop',), ('Bottrop',), ('Bottrop',), ('Remscheid',), ('Remscheid',), ('Remscheid',), ('Remscheid',), ('Remscheid',), ('Heilbronn',), ('Heilbronn',), ('Heilbronn',), ('Heilbronn',), ('Heilbronn',), ('Pforzheim',), ('Pforzheim',), ('Pforzheim',), ('Pforzheim',), ('Pforzheim',), ('Offenbach am Main',), ('Offenbach am Main',), ('Offenbach am Main',), ('Offenbach am Main',), ('Offenbach am Main',), ('Ulm',), ('Ulm',), ('Ulm',), ('Ulm',), ('Ulm',), ('Ingolstadt',), ('Ingolstadt',), ('Ingolstadt',), ('Ingolstadt',), ('Ingolstadt',), ('Gera',), ('Gera',), ('Gera',), ('Gera',), ('Gera',), ('Salzgitter',), ('Salzgitter',), ('Salzgitter',), ('Salzgitter',), ('Salzgitter',), ('Cottbus',), ('Cottbus',), ('Cottbus',), ('Cottbus',), ('Cottbus',), ('Reutlingen',), ('Reutlingen',), ('Reutlingen',), ('Reutlingen',), ('Reutlingen',), ('F\u00fcrth',), ('F\u00fcrth',), ('F\u00fcrth',), ('F\u00fcrth',), ('F\u00fcrth',), ('Siegen',), ('Siegen',), ('Siegen',), ('Siegen',), ('Siegen',), ('Koblenz',), ('Koblenz',), ('Koblenz',), ('Koblenz',), ('Koblenz',), ('Moers',), ('Moers',), ('Moers',), ('Moers',), ('Moers',), ('Bergisch Gladbach',), ('Bergisch Gladbach',), ('Bergisch Gladbach',), ('Bergisch Gladbach',), ('Bergisch Gladbach',), ('Zwickau',), ('Zwickau',), ('Zwickau',), ('Zwickau',), ('Zwickau',), ('Hildesheim',), ('Hildesheim',), ('Hildesheim',), ('Hildesheim',), ('Hildesheim',), ('Witten',), ('Witten',), ('Witten',), ('Witten',), ('Witten',), ('Schwerin',), ('Schwerin',), ('Schwerin',), ('Schwerin',), ('Schwerin',), ('Erlangen',), ('Erlangen',), ('Erlangen',), ('Erlangen',), ('Erlangen',), ('Kaiserslautern',), ('Kaiserslautern',), ('Kaiserslautern',), ('Kaiserslautern',), ('Kaiserslautern',), ('Trier',), ('Trier',), ('Trier',), ('Trier',), ('Trier',), ('Jena',), ('Jena',), ('Jena',), ('Jena',), ('Jena',), ('Iserlohn',), ('Iserlohn',), ('Iserlohn',), ('Iserlohn',), ('Iserlohn',), ('G\u00fctersloh',), ('G\u00fctersloh',), ('G\u00fctersloh',), ('G\u00fctersloh',), ('G\u00fctersloh',), ('Marl',), ('Marl',), ('Marl',), ('Marl',), ('Marl',), ('L\u00fcnen',), ('L\u00fcnen',), ('L\u00fcnen',), ('L\u00fcnen',), ('L\u00fcnen',), ('D\u00fcren',), ('D\u00fcren',), ('D\u00fcren',), ('D\u00fcren',), ('D\u00fcren',), ('Ratingen',), ('Ratingen',), ('Ratingen',), ('Ratingen',), ('Ratingen',), ('Velbert',), ('Velbert',), ('Velbert',), ('Velbert',), ('Velbert',), ('Esslingen am Neckar',), ('Esslingen am Neckar',), ('Esslingen am Neckar',), ('Esslingen am Neckar',), ('Esslingen am Neckar',), ('K\u00f8benhavn',), ('K\u00f8benhavn',), ('K\u00f8benhavn',), ('K\u00f8benhavn',), ('K\u00f8benhavn',), ('\u00c5rhus',), ('\u00c5rhus',), ('\u00c5rhus',), ('\u00c5rhus',), ('\u00c5rhus',), ('Odense',), ('Odense',), ('Odense',), ('Odense',), ('Odense',), ('Aalborg',), ('Aalborg',), ('Aalborg',), ('Aalborg',), ('Aalborg',), ('Frederiksberg',), ('Frederiksberg',), ('Frederiksberg',), ('Frederiksberg',), ('Frederiksberg',), ('Madrid',), ('Madrid',), ('Madrid',), ('Barcelona',), ('Barcelona',), ('Barcelona',), ('Valencia',), ('Valencia',), ('Valencia',), ('Sevilla',), ('Sevilla',), ('Sevilla',), ('Zaragoza',), ('Zaragoza',), ('Zaragoza',), ('M\u00e1laga',), ('M\u00e1laga',), ('M\u00e1laga',), ('Bilbao',), ('Bilbao',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Las Palmas de Gran Canaria',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Murcia',), ('Murcia',), ('Palma de Mallorca',), ('Palma de Mallorca',), ('Palma de Mallorca',), ('Valladolid',), ('Valladolid',), ('Valladolid',), ('C\u00f3rdoba',), ('C\u00f3rdoba',), ('C\u00f3rdoba',), ('Vigo',), ('Vigo',), ('Vigo',), ('Alicante [Alacant]',), ('Alicante [Alacant]',), ('Alicante [Alacant]',), ('Gij\u00f3n',), ('Gij\u00f3n',), ('Gij\u00f3n',), ('L\u00b4Hospitalet de Llobregat',), ('L\u00b4Hospitalet de Llobregat',), ('L\u00b4Hospitalet de Llobregat',), ('Granada',), ('Granada',), ('Granada',), ('A Coru\u00f1a (La Coru\u00f1a)',), ('A Coru\u00f1a (La Coru\u00f1a)',), ('A Coru\u00f1a (La Coru\u00f1a)',), ('Vitoria-Gasteiz',), ('Vitoria-Gasteiz',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Santa Cruz de Tenerife',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Badalona',), ('Badalona',), ('Oviedo',), ('Oviedo',), ('Oviedo',), ('M\u00f3stoles',), ('M\u00f3stoles',), ('M\u00f3stoles',), ('Elche [Elx]',), ('Elche [Elx]',), ('Elche [Elx]',), ('Sabadell',), ('Sabadell',), ('Sabadell',), ('Santander',), ('Santander',), ('Santander',), ('Jerez de la Frontera',), ('Jerez de la Frontera',), ('Jerez de la Frontera',), ('Pamplona [Iru\u00f1a]',), ('Pamplona [Iru\u00f1a]',), ('Pamplona [Iru\u00f1a]',), ('Donostia-San Sebasti\u00e1n',), ('Donostia-San Sebasti\u00e1n',), ('Donostia-San Sebasti\u00e1n',), ('Cartagena',), ('Cartagena',), ('Cartagena',), ('Legan\u00e9s',), ('Legan\u00e9s',), ('Legan\u00e9s',), ('Fuenlabrada',), ('Fuenlabrada',), ('Fuenlabrada',), ('Almer\u00eda',), ('Almer\u00eda',), ('Almer\u00eda',), ('Terrassa',), ('Terrassa',), ('Terrassa',), ('Alcal\u00e1 de Henares',), ('Alcal\u00e1 de Henares',), ('Alcal\u00e1 de Henares',), ('Burgos',), ('Burgos',), ('Burgos',), ('Salamanca',), ('Salamanca',), ('Salamanca',), ('Albacete',), ('Albacete',), ('Albacete',), ('Getafe',), ('Getafe',), ('Getafe',), ('C\u00e1diz',), ('C\u00e1diz',), ('C\u00e1diz',), ('Alcorc\u00f3n',), ('Alcorc\u00f3n',), ('Alcorc\u00f3n',), ('Huelva',), ('Huelva',), ('Huelva',), ('Le\u00f3n',), ('Le\u00f3n',), ('Le\u00f3n',), ('Castell\u00f3n de la Plana [Castell',), ('Castell\u00f3n de la Plana [Castell',), ('Castell\u00f3n de la Plana [Castell',), ('Badajoz',), ('Badajoz',), ('Badajoz',), ('[San Crist\u00f3bal de] la Laguna',), ('[San Crist\u00f3bal de] la Laguna',), ('[San Crist\u00f3bal de] la Laguna',), ('Logro\u00f1o',), ('Logro\u00f1o',), ('Logro\u00f1o',), ('Santa Coloma de Gramenet',), ('Santa Coloma de Gramenet',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Tarragona',), ('Tarragona',), ('Lleida (L\u00e9rida)',), ('Lleida (L\u00e9rida)',), ('Lleida (L\u00e9rida)',), ('Ja\u00e9n',), ('Ja\u00e9n',), ('Ja\u00e9n',), ('Ourense (Orense)',), ('Ourense (Orense)',), ('Ourense (Orense)',), ('Matar\u00f3',), ('Matar\u00f3',), ('Matar\u00f3',), ('Algeciras',), ('Algeciras',), ('Algeciras',), ('Marbella',), ('Marbella',), ('Marbella',), ('Barakaldo',), ('Barakaldo',), ('Barakaldo',), ('Dos Hermanas',), ('Dos Hermanas',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Santiago de Compostela',), ('Santiago de Compostela',), ('Torrej\u00f3n de Ardoz',), ('Torrej\u00f3n de Ardoz',), ('Torrej\u00f3n de Ardoz',), ('Tallinn',), ('Tallinn',), ('Tallinn',), ('Tallinn',), ('Tartu',), ('Tartu',), ('Tartu',), ('Tartu',), ('Helsinki [Helsingfors]',), ('Helsinki [Helsingfors]',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Espoo',), ('Espoo',), ('Tampere',), ('Tampere',), ('Tampere',), ('Vantaa',), ('Vantaa',), ('Vantaa',), ('Turku [\u00c5bo]',), ('Turku [\u00c5bo]',), ('Turku [\u00c5bo]',), ('Oulu',), ('Oulu',), ('Oulu',), ('Lahti',), ('Lahti',), ('Lahti',), ('Paris',), ('Paris',), ('Paris',), ('Paris',), ('Paris',), ('Marseille',), ('Marseille',), ('Marseille',), ('Marseille',), ('Marseille',), ('Lyon',), ('Lyon',), ('Lyon',), ('Lyon',), ('Lyon',), ('Toulouse',), ('Toulouse',), ('Toulouse',), ('Toulouse',), ('Toulouse',), ('Nice',), ('Nice',), ('Nice',), ('Nice',), ('Nice',), ('Nantes',), ('Nantes',), ('Nantes',), ('Nantes',), ('Nantes',), ('Strasbourg',), ('Strasbourg',), ('Strasbourg',), ('Strasbourg',), ('Strasbourg',), ('Montpellier',), ('Montpellier',), ('Montpellier',), ('Montpellier',), ('Montpellier',), ('Bordeaux',), ('Bordeaux',), ('Bordeaux',), ('Bordeaux',), ('Bordeaux',), ('Rennes',), ('Rennes',), ('Rennes',), ('Rennes',), ('Rennes',), ('Le Havre',), ('Le Havre',), ('Le Havre',), ('Le Havre',), ('Le Havre',), ('Reims',), ('Reims',), ('Reims',), ('Reims',), ('Reims',), ('Lille',), ('Lille',), ('Lille',), ('Lille',), ('Lille',), ('St-\u00c9tienne',), ('St-\u00c9tienne',), ('St-\u00c9tienne',), ('St-\u00c9tienne',), ('St-\u00c9tienne',), ('Toulon',), ('Toulon',), ('Toulon',), ('Toulon',), ('Toulon',), ('Grenoble',), ('Grenoble',), ('Grenoble',), ('Grenoble',), ('Grenoble',), ('Angers',), ('Angers',), ('Angers',), ('Angers',), ('Angers',), ('Dijon',), ('Dijon',), ('Dijon',), ('Dijon',), ('Dijon',), ('Brest',), ('Brest',), ('Brest',), ('Brest',), ('Brest',), ('Le Mans',), ('Le Mans',), ('Le Mans',), ('Le Mans',), ('Le Mans',), ('Clermont-Ferrand',), ('Clermont-Ferrand',), ('Clermont-Ferrand',), ('Clermont-Ferrand',), ('Clermont-Ferrand',), ('Amiens',), ('Amiens',), ('Amiens',), ('Amiens',), ('Amiens',), ('Aix-en-Provence',), ('Aix-en-Provence',), ('Aix-en-Provence',), ('Aix-en-Provence',), ('Aix-en-Provence',), ('Limoges',), ('Limoges',), ('Limoges',), ('Limoges',), ('Limoges',), ('N\u00eemes',), ('N\u00eemes',), ('N\u00eemes',), ('N\u00eemes',), ('N\u00eemes',), ('Tours',), ('Tours',), ('Tours',), ('Tours',), ('Tours',), ('Villeurbanne',), ('Villeurbanne',), ('Villeurbanne',), ('Villeurbanne',), ('Villeurbanne',), ('Metz',), ('Metz',), ('Metz',), ('Metz',), ('Metz',), ('Besan\u00e7on',), ('Besan\u00e7on',), ('Besan\u00e7on',), ('Besan\u00e7on',), ('Besan\u00e7on',), ('Caen',), ('Caen',), ('Caen',), ('Caen',), ('Caen',), ('Orl\u00e9ans',), ('Orl\u00e9ans',), ('Orl\u00e9ans',), ('Orl\u00e9ans',), ('Orl\u00e9ans',), ('Mulhouse',), ('Mulhouse',), ('Mulhouse',), ('Mulhouse',), ('Mulhouse',), ('Rouen',), ('Rouen',), ('Rouen',), ('Rouen',), ('Rouen',), ('Boulogne-Billancourt',), ('Boulogne-Billancourt',), ('Boulogne-Billancourt',), ('Boulogne-Billancourt',), ('Boulogne-Billancourt',), ('Perpignan',), ('Perpignan',), ('Perpignan',), ('Perpignan',), ('Perpignan',), ('Nancy',), ('Nancy',), ('Nancy',), ('Nancy',), ('Nancy',), ('Roubaix',), ('Roubaix',), ('Roubaix',), ('Roubaix',), ('Roubaix',), ('Argenteuil',), ('Argenteuil',), ('Argenteuil',), ('Argenteuil',), ('Argenteuil',), ('Tourcoing',), ('Tourcoing',), ('Tourcoing',), ('Tourcoing',), ('Tourcoing',), ('Montreuil',), ('Montreuil',), ('Montreuil',), ('Montreuil',), ('Montreuil',), ('London',), ('London',), ('Birmingham',), ('Birmingham',), ('Glasgow',), ('Glasgow',), ('Liverpool',), ('Liverpool',), ('Edinburgh',), ('Edinburgh',), ('Sheffield',), ('Sheffield',), ('Manchester',), ('Manchester',), ('Leeds',), ('Leeds',), ('Bristol',), ('Bristol',), ('Cardiff',), ('Cardiff',), ('Coventry',), ('Coventry',), ('Leicester',), ('Leicester',), ('Bradford',), ('Bradford',), ('Belfast',), ('Belfast',), ('Nottingham',), ('Nottingham',), ('Kingston upon Hull',), ('Kingston upon Hull',), ('Plymouth',), ('Plymouth',), ('Stoke-on-Trent',), ('Stoke-on-Trent',), ('Wolverhampton',), ('Wolverhampton',), ('Derby',), ('Derby',), ('Swansea',), ('Swansea',), ('Southampton',), ('Southampton',), ('Aberdeen',), ('Aberdeen',), ('Northampton',), ('Northampton',), ('Dudley',), ('Dudley',), ('Portsmouth',), ('Portsmouth',), ('Newcastle upon Tyne',), ('Newcastle upon Tyne',), ('Sunderland',), ('Sunderland',), ('Luton',), ('Luton',), ('Swindon',), ('Swindon',), ('Southend-on-Sea',), ('Southend-on-Sea',), ('Walsall',), ('Walsall',), ('Bournemouth',), ('Bournemouth',), ('Peterborough',), ('Peterborough',), ('Brighton',), ('Brighton',), ('Blackpool',), ('Blackpool',), ('Dundee',), ('Dundee',), ('West Bromwich',), ('West Bromwich',), ('Reading',), ('Reading',), ('Oldbury/Smethwick (Warley)',), ('Oldbury/Smethwick (Warley)',), ('Middlesbrough',), ('Middlesbrough',), ('Huddersfield',), ('Huddersfield',), ('Oxford',), ('Oxford',), ('Poole',), ('Poole',), ('Bolton',), ('Bolton',), ('Blackburn',), ('Blackburn',), ('Newport',), ('Newport',), ('Preston',), ('Preston',), ('Stockport',), ('Stockport',), ('Norwich',), ('Norwich',), ('Rotherham',), ('Rotherham',), ('Cambridge',), ('Cambridge',), ('Watford',), ('Watford',), ('Ipswich',), ('Ipswich',), ('Slough',), ('Slough',), ('Exeter',), ('Exeter',), ('Cheltenham',), ('Cheltenham',), ('Gloucester',), ('Gloucester',), ('Saint Helens',), ('Saint Helens',), ('Sutton Coldfield',), ('Sutton Coldfield',), ('York',), ('York',), ('Oldham',), ('Oldham',), ('Basildon',), ('Basildon',), ('Worthing',), ('Worthing',), ('Chelmsford',), ('Chelmsford',), ('Colchester',), ('Colchester',), ('Crawley',), ('Crawley',), ('Gillingham',), ('Gillingham',), ('Solihull',), ('Solihull',), ('Rochdale',), ('Rochdale',), ('Birkenhead',), ('Birkenhead',), ('Worcester',), ('Worcester',), ('Hartlepool',), ('Hartlepool',), ('Halifax',), ('Halifax',), ('Woking/Byfleet',), ('Woking/Byfleet',), ('Southport',), ('Southport',), ('Maidstone',), ('Maidstone',), ('Eastbourne',), ('Eastbourne',), ('Grimsby',), ('Grimsby',), ('Saint Helier',), ('Saint Helier',), ('Douglas',), ('Douglas',), ('Gibraltar',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Budapest',), ('Budapest',), ('Budapest',), ('Budapest',), ('Budapest',), ('Debrecen',), ('Debrecen',), ('Debrecen',), ('Debrecen',), ('Debrecen',), ('Miskolc',), ('Miskolc',), ('Miskolc',), ('Miskolc',), ('Miskolc',), ('Szeged',), ('Szeged',), ('Szeged',), ('Szeged',), ('Szeged',), ('P\u00e9cs',), ('P\u00e9cs',), ('P\u00e9cs',), ('P\u00e9cs',), ('P\u00e9cs',), ('Gy\u00f6r',), ('Gy\u00f6r',), ('Gy\u00f6r',), ('Gy\u00f6r',), ('Gy\u00f6r',), ('Nyiregyh\u00e1za',), ('Nyiregyh\u00e1za',), ('Nyiregyh\u00e1za',), ('Nyiregyh\u00e1za',), ('Nyiregyh\u00e1za',), ('Kecskem\u00e9t',), ('Kecskem\u00e9t',), ('Kecskem\u00e9t',), ('Kecskem\u00e9t',), ('Kecskem\u00e9t',), ('Sz\u00e9kesfeh\u00e9rv\u00e1r',), ('Sz\u00e9kesfeh\u00e9rv\u00e1r',), ('Sz\u00e9kesfeh\u00e9rv\u00e1r',), ('Sz\u00e9kesfeh\u00e9rv\u00e1r',), ('Sz\u00e9kesfeh\u00e9rv\u00e1r',), ('Roma',), ('Roma',), ('Roma',), ('Roma',), ('Roma',), ('Roma',), ('Roma',), ('Milano',), ('Milano',), ('Milano',), ('Milano',), ('Milano',), ('Milano',), ('Milano',), ('Napoli',), ('Napoli',), ('Napoli',), ('Napoli',), ('Napoli',), ('Napoli',), ('Napoli',), ('Torino',), ('Torino',), ('Torino',), ('Torino',), ('Torino',), ('Torino',), ('Torino',), ('Palermo',), ('Palermo',), ('Palermo',), ('Palermo',), ('Palermo',), ('Palermo',), ('Palermo',), ('Genova',), ('Genova',), ('Genova',), ('Genova',), ('Genova',), ('Genova',), ('Genova',), ('Bologna',), ('Bologna',), ('Bologna',), ('Bologna',), ('Bologna',), ('Bologna',), ('Bologna',), ('Firenze',), ('Firenze',), ('Firenze',), ('Firenze',), ('Firenze',), ('Firenze',), ('Firenze',), ('Catania',), ('Catania',), ('Catania',), ('Catania',), ('Catania',), ('Catania',), ('Catania',), ('Bari',), ('Bari',), ('Bari',), ('Bari',), ('Bari',), ('Bari',), ('Bari',), ('Venezia',), ('Venezia',), ('Venezia',), ('Venezia',), ('Venezia',), ('Venezia',), ('Venezia',), ('Messina',), ('Messina',), ('Messina',), ('Messina',), ('Messina',), ('Messina',), ('Messina',), ('Verona',), ('Verona',), ('Verona',), ('Verona',), ('Verona',), ('Verona',), ('Verona',), ('Trieste',), ('Trieste',), ('Trieste',), ('Trieste',), ('Trieste',), ('Trieste',), ('Trieste',), ('Padova',), ('Padova',), ('Padova',), ('Padova',), ('Padova',), ('Padova',), ('Padova',), ('Taranto',), ('Taranto',), ('Taranto',), ('Taranto',), ('Taranto',), ('Taranto',), ('Taranto',), ('Brescia',), ('Brescia',), ('Brescia',), ('Brescia',), ('Brescia',), ('Brescia',), ('Brescia',), ('Reggio di Calabria',), ('Reggio di Calabria',), ('Reggio di Calabria',), ('Reggio di Calabria',), ('Reggio di Calabria',), ('Reggio di Calabria',), ('Reggio di Calabria',), ('Modena',), ('Modena',), ('Modena',), ('Modena',), ('Modena',), ('Modena',), ('Modena',), ('Prato',), ('Prato',), ('Prato',), ('Prato',), ('Prato',), ('Prato',), ('Prato',), ('Parma',), ('Parma',), ('Parma',), ('Parma',), ('Parma',), ('Parma',), ('Parma',), ('Cagliari',), ('Cagliari',), ('Cagliari',), ('Cagliari',), ('Cagliari',), ('Cagliari',), ('Cagliari',), ('Livorno',), ('Livorno',), ('Livorno',), ('Livorno',), ('Livorno',), ('Livorno',), ('Livorno',), ('Perugia',), ('Perugia',), ('Perugia',), ('Perugia',), ('Perugia',), ('Perugia',), ('Perugia',), ('Foggia',), ('Foggia',), ('Foggia',), ('Foggia',), ('Foggia',), ('Foggia',), ('Foggia',), ('Reggio nell\u00b4 Emilia',), ('Reggio nell\u00b4 Emilia',), ('Reggio nell\u00b4 Emilia',), ('Reggio nell\u00b4 Emilia',), ('Reggio nell\u00b4 Emilia',), ('Reggio nell\u00b4 Emilia',), ('Reggio nell\u00b4 Emilia',), ('Salerno',), ('Salerno',), ('Salerno',), ('Salerno',), ('Salerno',), ('Salerno',), ('Salerno',), ('Ravenna',), ('Ravenna',), ('Ravenna',), ('Ravenna',), ('Ravenna',), ('Ravenna',), ('Ravenna',), ('Ferrara',), ('Ferrara',), ('Ferrara',), ('Ferrara',), ('Ferrara',), ('Ferrara',), ('Ferrara',), ('Rimini',), ('Rimini',), ('Rimini',), ('Rimini',), ('Rimini',), ('Rimini',), ('Rimini',), ('Syrakusa',), ('Syrakusa',), ('Syrakusa',), ('Syrakusa',), ('Syrakusa',), ('Syrakusa',), ('Syrakusa',), ('Sassari',), ('Sassari',), ('Sassari',), ('Sassari',), ('Sassari',), ('Sassari',), ('Sassari',), ('Monza',), ('Monza',), ('Monza',), ('Monza',), ('Monza',), ('Monza',), ('Monza',), ('Bergamo',), ('Bergamo',), ('Bergamo',), ('Bergamo',), ('Bergamo',), ('Bergamo',), ('Bergamo',), ('Pescara',), ('Pescara',), ('Pescara',), ('Pescara',), ('Pescara',), ('Pescara',), ('Pescara',), ('Latina',), ('Latina',), ('Latina',), ('Latina',), ('Latina',), ('Latina',), ('Latina',), ('Vicenza',), ('Vicenza',), ('Vicenza',), ('Vicenza',), ('Vicenza',), ('Vicenza',), ('Vicenza',), ('Terni',), ('Terni',), ('Terni',), ('Terni',), ('Terni',), ('Terni',), ('Terni',), ('Forl\u00ec',), ('Forl\u00ec',), ('Forl\u00ec',), ('Forl\u00ec',), ('Forl\u00ec',), ('Forl\u00ec',), ('Forl\u00ec',), ('Trento',), ('Trento',), ('Trento',), ('Trento',), ('Trento',), ('Trento',), ('Trento',), ('Novara',), ('Novara',), ('Novara',), ('Novara',), ('Novara',), ('Novara',), ('Novara',), ('Piacenza',), ('Piacenza',), ('Piacenza',), ('Piacenza',), ('Piacenza',), ('Piacenza',), ('Piacenza',), ('Ancona',), ('Ancona',), ('Ancona',), ('Ancona',), ('Ancona',), ('Ancona',), ('Ancona',), ('Lecce',), ('Lecce',), ('Lecce',), ('Lecce',), ('Lecce',), ('Lecce',), ('Lecce',), ('Bolzano',), ('Bolzano',), ('Bolzano',), ('Bolzano',), ('Bolzano',), ('Bolzano',), ('Bolzano',), ('Catanzaro',), ('Catanzaro',), ('Catanzaro',), ('Catanzaro',), ('Catanzaro',), ('Catanzaro',), ('Catanzaro',), ('La Spezia',), ('La Spezia',), ('La Spezia',), ('La Spezia',), ('La Spezia',), ('La Spezia',), ('La Spezia',), ('Udine',), ('Udine',), ('Udine',), ('Udine',), ('Udine',), ('Udine',), ('Udine',), ('Torre del Greco',), ('Torre del Greco',), ('Torre del Greco',), ('Torre del Greco',), ('Torre del Greco',), ('Torre del Greco',), ('Torre del Greco',), ('Andria',), ('Andria',), ('Andria',), ('Andria',), ('Andria',), ('Andria',), ('Andria',), ('Brindisi',), ('Brindisi',), ('Brindisi',), ('Brindisi',), ('Brindisi',), ('Brindisi',), ('Brindisi',), ('Giugliano in Campania',), ('Giugliano in Campania',), ('Giugliano in Campania',), ('Giugliano in Campania',), ('Giugliano in Campania',), ('Giugliano in Campania',), ('Giugliano in Campania',), ('Pisa',), ('Pisa',), ('Pisa',), ('Pisa',), ('Pisa',), ('Pisa',), ('Pisa',), ('Barletta',), ('Barletta',), ('Barletta',), ('Barletta',), ('Barletta',), ('Barletta',), ('Barletta',), ('Arezzo',), ('Arezzo',), ('Arezzo',), ('Arezzo',), ('Arezzo',), ('Arezzo',), ('Arezzo',), ('Alessandria',), ('Alessandria',), ('Alessandria',), ('Alessandria',), ('Alessandria',), ('Alessandria',), ('Alessandria',), ('Cesena',), ('Cesena',), ('Cesena',), ('Cesena',), ('Cesena',), ('Cesena',), ('Cesena',), ('Pesaro',), ('Pesaro',), ('Pesaro',), ('Pesaro',), ('Pesaro',), ('Pesaro',), ('Pesaro',), ('Schaan',), ('Schaan',), ('Vaduz',), ('Vaduz',), ('Vilnius',), ('Vilnius',), ('Vilnius',), ('Vilnius',), ('Kaunas',), ('Kaunas',), ('Kaunas',), ('Kaunas',), ('Klaipeda',), ('Klaipeda',), ('Klaipeda',), ('Klaipeda',), ('\u0160iauliai',), ('\u0160iauliai',), ('\u0160iauliai',), ('\u0160iauliai',), ('Panevezys',), ('Panevezys',), ('Panevezys',), ('Panevezys',), ('Luxembourg [Luxemburg/L\u00ebtzebuerg]',), ('Luxembourg [Luxemburg/L\u00ebtzebuerg]',), ('Riga',), ('Riga',), ('Riga',), ('Riga',), ('Riga',), ('Daugavpils',), ('Daugavpils',), ('Daugavpils',), ('Daugavpils',), ('Daugavpils',), ('Liepaja',), ('Liepaja',), ('Liepaja',), ('Liepaja',), ('Liepaja',), ('Monte-Carlo',), ('Monte-Carlo',), ('Monaco-Ville',), ('Monaco-Ville',), ('Chisinau',), ('Chisinau',), ('Chisinau',), ('Chisinau',), ('Tiraspol',), ('Tiraspol',), ('Tiraspol',), ('Tiraspol',), ('Balti',), ('Balti',), ('Balti',), ('Balti',), ('Bender (T\u00eeghina)',), ('Bender (T\u00eeghina)',), ('Bender (T\u00eeghina)',), ('Bender (T\u00eeghina)',), ('Skopje',), ('Skopje',), ('Skopje',), ('Skopje',), ('Amsterdam',), ('Amsterdam',), ('Amsterdam',), ('Rotterdam',), ('Rotterdam',), ('Rotterdam',), ('Haag',), ('Haag',), ('Haag',), ('Utrecht',), ('Utrecht',), ('Utrecht',), ('Eindhoven',), ('Eindhoven',), ('Eindhoven',), ('Tilburg',), ('Tilburg',), ('Tilburg',), ('Groningen',), ('Groningen',), ('Groningen',), ('Breda',), ('Breda',), ('Breda',), ('Apeldoorn',), ('Apeldoorn',), ('Apeldoorn',), ('Nijmegen',), ('Nijmegen',), ('Nijmegen',), ('Enschede',), ('Enschede',), ('Enschede',), ('Haarlem',), ('Haarlem',), ('Haarlem',), ('Almere',), ('Almere',), ('Almere',), ('Arnhem',), ('Arnhem',), ('Arnhem',), ('Zaanstad',), ('Zaanstad',), ('Zaanstad',), ('\u00b4s-Hertogenbosch',), ('\u00b4s-Hertogenbosch',), ('\u00b4s-Hertogenbosch',), ('Amersfoort',), ('Amersfoort',), ('Amersfoort',), ('Maastricht',), ('Maastricht',), ('Maastricht',), ('Dordrecht',), ('Dordrecht',), ('Dordrecht',), ('Leiden',), ('Leiden',), ('Leiden',), ('Haarlemmermeer',), ('Haarlemmermeer',), ('Haarlemmermeer',), ('Zoetermeer',), ('Zoetermeer',), ('Zoetermeer',), ('Emmen',), ('Emmen',), ('Emmen',), ('Zwolle',), ('Zwolle',), ('Zwolle',), ('Ede',), ('Ede',), ('Ede',), ('Delft',), ('Delft',), ('Delft',), ('Heerlen',), ('Heerlen',), ('Heerlen',), ('Alkmaar',), ('Alkmaar',), ('Alkmaar',), ('Oslo',), ('Oslo',), ('Oslo',), ('Bergen',), ('Bergen',), ('Bergen',), ('Trondheim',), ('Trondheim',), ('Trondheim',), ('Stavanger',), ('Stavanger',), ('Stavanger',), ('B\u00e6rum',), ('B\u00e6rum',), ('B\u00e6rum',), ('Warszawa',), ('Warszawa',), ('Warszawa',), ('L\u00f3dz',), ('L\u00f3dz',), ('L\u00f3dz',), ('Krak\u00f3w',), ('Krak\u00f3w',), ('Krak\u00f3w',), ('Wroclaw',), ('Wroclaw',), ('Wroclaw',), ('Poznan',), ('Poznan',), ('Poznan',), ('Gdansk',), ('Gdansk',), ('Gdansk',), ('Szczecin',), ('Szczecin',), ('Szczecin',), ('Bydgoszcz',), ('Bydgoszcz',), ('Bydgoszcz',), ('Lublin',), ('Lublin',), ('Lublin',), ('Katowice',), ('Katowice',), ('Katowice',), ('Bialystok',), ('Bialystok',), ('Bialystok',), ('Czestochowa',), ('Czestochowa',), ('Czestochowa',), ('Gdynia',), ('Gdynia',), ('Gdynia',), ('Sosnowiec',), ('Sosnowiec',), ('Sosnowiec',), ('Radom',), ('Radom',), ('Radom',), ('Kielce',), ('Kielce',), ('Kielce',), ('Gliwice',), ('Gliwice',), ('Gliwice',), ('Torun',), ('Torun',), ('Torun',), ('Bytom',), ('Bytom',), ('Bytom',), ('Zabrze',), ('Zabrze',), ('Zabrze',), ('Bielsko-Biala',), ('Bielsko-Biala',), ('Bielsko-Biala',), ('Olsztyn',), ('Olsztyn',), ('Olsztyn',), ('Rzesz\u00f3w',), ('Rzesz\u00f3w',), ('Rzesz\u00f3w',), ('Ruda Slaska',), ('Ruda Slaska',), ('Ruda Slaska',), ('Rybnik',), ('Rybnik',), ('Rybnik',), ('Walbrzych',), ('Walbrzych',), ('Walbrzych',), ('Tychy',), ('Tychy',), ('Tychy',), ('Dabrowa G\u00f3rnicza',), ('Dabrowa G\u00f3rnicza',), ('Dabrowa G\u00f3rnicza',), ('Plock',), ('Plock',), ('Plock',), ('Elblag',), ('Elblag',), ('Elblag',), ('Opole',), ('Opole',), ('Opole',), ('Gorz\u00f3w Wielkopolski',), ('Gorz\u00f3w Wielkopolski',), ('Gorz\u00f3w Wielkopolski',), ('Wloclawek',), ('Wloclawek',), ('Wloclawek',), ('Chorz\u00f3w',), ('Chorz\u00f3w',), ('Chorz\u00f3w',), ('Tarn\u00f3w',), ('Tarn\u00f3w',), ('Tarn\u00f3w',), ('Zielona G\u00f3ra',), ('Zielona G\u00f3ra',), ('Zielona G\u00f3ra',), ('Koszalin',), ('Koszalin',), ('Koszalin',), ('Legnica',), ('Legnica',), ('Legnica',), ('Kalisz',), ('Kalisz',), ('Kalisz',), ('Grudziadz',), ('Grudziadz',), ('Grudziadz',), ('Slupsk',), ('Slupsk',), ('Slupsk',), ('Jastrzebie-Zdr\u00f3j',), ('Jastrzebie-Zdr\u00f3j',), ('Jastrzebie-Zdr\u00f3j',), ('Jaworzno',), ('Jaworzno',), ('Jaworzno',), ('Jelenia G\u00f3ra',), ('Jelenia G\u00f3ra',), ('Jelenia G\u00f3ra',), ('Bucuresti',), ('Bucuresti',), ('Bucuresti',), ('Bucuresti',), ('Iasi',), ('Iasi',), ('Iasi',), ('Iasi',), ('Constanta',), ('Constanta',), ('Constanta',), ('Constanta',), ('Cluj-Napoca',), ('Cluj-Napoca',), ('Cluj-Napoca',), ('Cluj-Napoca',), ('Galati',), ('Galati',), ('Galati',), ('Galati',), ('Timisoara',), ('Timisoara',), ('Timisoara',), ('Timisoara',), ('Brasov',), ('Brasov',), ('Brasov',), ('Brasov',), ('Craiova',), ('Craiova',), ('Craiova',), ('Craiova',), ('Ploiesti',), ('Ploiesti',), ('Ploiesti',), ('Ploiesti',), ('Braila',), ('Braila',), ('Braila',), ('Braila',), ('Oradea',), ('Oradea',), ('Oradea',), ('Oradea',), ('Bacau',), ('Bacau',), ('Bacau',), ('Bacau',), ('Pitesti',), ('Pitesti',), ('Pitesti',), ('Pitesti',), ('Arad',), ('Arad',), ('Arad',), ('Arad',), ('Sibiu',), ('Sibiu',), ('Sibiu',), ('Sibiu',), ('T\u00e2rgu Mures',), ('T\u00e2rgu Mures',), ('T\u00e2rgu Mures',), ('T\u00e2rgu Mures',), ('Baia Mare',), ('Baia Mare',), ('Baia Mare',), ('Baia Mare',), ('Buzau',), ('Buzau',), ('Buzau',), ('Buzau',), ('Satu Mare',), ('Satu Mare',), ('Satu Mare',), ('Satu Mare',), ('Botosani',), ('Botosani',), ('Botosani',), ('Botosani',), ('Piatra Neamt',), ('Piatra Neamt',), ('Piatra Neamt',), ('Piatra Neamt',), ('R\u00e2mnicu V\u00e2lcea',), ('R\u00e2mnicu V\u00e2lcea',), ('R\u00e2mnicu V\u00e2lcea',), ('R\u00e2mnicu V\u00e2lcea',), ('Suceava',), ('Suceava',), ('Suceava',), ('Suceava',), ('Drobeta-Turnu Severin',), ('Drobeta-Turnu Severin',), ('Drobeta-Turnu Severin',), ('Drobeta-Turnu Severin',), ('T\u00e2rgoviste',), ('T\u00e2rgoviste',), ('T\u00e2rgoviste',), ('T\u00e2rgoviste',), ('Focsani',), ('Focsani',), ('Focsani',), ('Focsani',), ('T\u00e2rgu Jiu',), ('T\u00e2rgu Jiu',), ('T\u00e2rgu Jiu',), ('T\u00e2rgu Jiu',), ('Tulcea',), ('Tulcea',), ('Tulcea',), ('Tulcea',), ('Resita',), ('Resita',), ('Resita',), ('Resita',), ('Moscow',), ('Moscow',), ('Moscow',), ('Moscow',), ('Moscow',), ('Moscow',), ('Moscow',), ('Moscow',), ('Moscow',), ('Moscow',), ('Moscow',), ('St Petersburg',), ('St Petersburg',), ('St Petersburg',), ('St Petersburg',), ('St Petersburg',), ('St Petersburg',), ('St Petersburg',), ('St Petersburg',), ('St Petersburg',), ('St Petersburg',), ('St Petersburg',), ('Novosibirsk',), ('Novosibirsk',), ('Novosibirsk',), ('Novosibirsk',), ('Novosibirsk',), ('Novosibirsk',), ('Novosibirsk',), ('Novosibirsk',), ('Novosibirsk',), ('Novosibirsk',), ('Novosibirsk',), ('Nizni Novgorod',), ('Nizni Novgorod',), ('Nizni Novgorod',), ('Nizni Novgorod',), ('Nizni Novgorod',), ('Nizni Novgorod',), ('Nizni Novgorod',), ('Nizni Novgorod',), ('Nizni Novgorod',), ('Nizni Novgorod',), ('Nizni Novgorod',), ('Jekaterinburg',), ('Jekaterinburg',), ('Jekaterinburg',), ('Jekaterinburg',), ('Jekaterinburg',), ('Jekaterinburg',), ('Jekaterinburg',), ('Jekaterinburg',), ('Jekaterinburg',), ('Jekaterinburg',), ('Jekaterinburg',), ('Samara',), ('Samara',), ('Samara',), ('Samara',), ('Samara',), ('Samara',), ('Samara',), ('Samara',), ('Samara',), ('Samara',), ('Samara',), ('Omsk',), ('Omsk',), ('Omsk',), ('Omsk',), ('Omsk',), ('Omsk',), ('Omsk',), ('Omsk',), ('Omsk',), ('Omsk',), ('Omsk',), ('Kazan',), ('Kazan',), ('Kazan',), ('Kazan',), ('Kazan',), ('Kazan',), ('Kazan',), ('Kazan',), ('Kazan',), ('Kazan',), ('Kazan',), ('Ufa',), ('Ufa',), ('Ufa',), ('Ufa',), ('Ufa',), ('Ufa',), ('Ufa',), ('Ufa',), ('Ufa',), ('Ufa',), ('Ufa',), ('T\u0161eljabinsk',), ('T\u0161eljabinsk',), ('T\u0161eljabinsk',), ('T\u0161eljabinsk',), ('T\u0161eljabinsk',), ('T\u0161eljabinsk',), ('T\u0161eljabinsk',), ('T\u0161eljabinsk',), ('T\u0161eljabinsk',), ('T\u0161eljabinsk',), ('T\u0161eljabinsk',), ('Rostov-na-Donu',), ('Rostov-na-Donu',), ('Rostov-na-Donu',), ('Rostov-na-Donu',), ('Rostov-na-Donu',), ('Rostov-na-Donu',), ('Rostov-na-Donu',), ('Rostov-na-Donu',), ('Rostov-na-Donu',), ('Rostov-na-Donu',), ('Rostov-na-Donu',), ('Perm',), ('Perm',), ('Perm',), ('Perm',), ('Perm',), ('Perm',), ('Perm',), ('Perm',), ('Perm',), ('Perm',), ('Perm',), ('Volgograd',), ('Volgograd',), ('Volgograd',), ('Volgograd',), ('Volgograd',), ('Volgograd',), ('Volgograd',), ('Volgograd',), ('Volgograd',), ('Volgograd',), ('Volgograd',), ('Voronez',), ('Voronez',), ('Voronez',), ('Voronez',), ('Voronez',), ('Voronez',), ('Voronez',), ('Voronez',), ('Voronez',), ('Voronez',), ('Voronez',), ('Krasnojarsk',), ('Krasnojarsk',), ('Krasnojarsk',), ('Krasnojarsk',), ('Krasnojarsk',), ('Krasnojarsk',), ('Krasnojarsk',), ('Krasnojarsk',), ('Krasnojarsk',), ('Krasnojarsk',), ('Krasnojarsk',), ('Saratov',), ('Saratov',), ('Saratov',), ('Saratov',), ('Saratov',), ('Saratov',), ('Saratov',), ('Saratov',), ('Saratov',), ('Saratov',), ('Saratov',), ('Toljatti',), ('Toljatti',), ('Toljatti',), ('Toljatti',), ('Toljatti',), ('Toljatti',), ('Toljatti',), ('Toljatti',), ('Toljatti',), ('Toljatti',), ('Toljatti',), ('Uljanovsk',), ('Uljanovsk',), ('Uljanovsk',), ('Uljanovsk',), ('Uljanovsk',), ('Uljanovsk',), ('Uljanovsk',), ('Uljanovsk',), ('Uljanovsk',), ('Uljanovsk',), ('Uljanovsk',), ('Izevsk',), ('Izevsk',), ('Izevsk',), ('Izevsk',), ('Izevsk',), ('Izevsk',), ('Izevsk',), ('Izevsk',), ('Izevsk',), ('Izevsk',), ('Izevsk',), ('Krasnodar',), ('Krasnodar',), ('Krasnodar',), ('Krasnodar',), ('Krasnodar',), ('Krasnodar',), ('Krasnodar',), ('Krasnodar',), ('Krasnodar',), ('Krasnodar',), ('Krasnodar',), ('Jaroslavl',), ('Jaroslavl',), ('Jaroslavl',), ('Jaroslavl',), ('Jaroslavl',), ('Jaroslavl',), ('Jaroslavl',), ('Jaroslavl',), ('Jaroslavl',), ('Jaroslavl',), ('Jaroslavl',), ('Habarovsk',), ('Habarovsk',), ('Habarovsk',), ('Habarovsk',), ('Habarovsk',), ('Habarovsk',), ('Habarovsk',), ('Habarovsk',), ('Habarovsk',), ('Habarovsk',), ('Habarovsk',), ('Vladivostok',), ('Vladivostok',), ('Vladivostok',), ('Vladivostok',), ('Vladivostok',), ('Vladivostok',), ('Vladivostok',), ('Vladivostok',), ('Vladivostok',), ('Vladivostok',), ('Vladivostok',), ('Irkutsk',), ('Irkutsk',), ('Irkutsk',), ('Irkutsk',), ('Irkutsk',), ('Irkutsk',), ('Irkutsk',), ('Irkutsk',), ('Irkutsk',), ('Irkutsk',), ('Irkutsk',), ('Barnaul',), ('Barnaul',), ('Barnaul',), ('Barnaul',), ('Barnaul',), ('Barnaul',), ('Barnaul',), ('Barnaul',), ('Barnaul',), ('Barnaul',), ('Barnaul',), ('Novokuznetsk',), ('Novokuznetsk',), ('Novokuznetsk',), ('Novokuznetsk',), ('Novokuznetsk',), ('Novokuznetsk',), ('Novokuznetsk',), ('Novokuznetsk',), ('Novokuznetsk',), ('Novokuznetsk',), ('Novokuznetsk',), ('Penza',), ('Penza',), ('Penza',), ('Penza',), ('Penza',), ('Penza',), ('Penza',), ('Penza',), ('Penza',), ('Penza',), ('Penza',), ('Rjazan',), ('Rjazan',), ('Rjazan',), ('Rjazan',), ('Rjazan',), ('Rjazan',), ('Rjazan',), ('Rjazan',), ('Rjazan',), ('Rjazan',), ('Rjazan',), ('Orenburg',), ('Orenburg',), ('Orenburg',), ('Orenburg',), ('Orenburg',), ('Orenburg',), ('Orenburg',), ('Orenburg',), ('Orenburg',), ('Orenburg',), ('Orenburg',), ('Lipetsk',), ('Lipetsk',), ('Lipetsk',), ('Lipetsk',), ('Lipetsk',), ('Lipetsk',), ('Lipetsk',), ('Lipetsk',), ('Lipetsk',), ('Lipetsk',), ('Lipetsk',), ('Nabereznyje T\u0161elny',), ('Nabereznyje T\u0161elny',), ('Nabereznyje T\u0161elny',), ('Nabereznyje T\u0161elny',), ('Nabereznyje T\u0161elny',), ('Nabereznyje T\u0161elny',), ('Nabereznyje T\u0161elny',), ('Nabereznyje T\u0161elny',), ('Nabereznyje T\u0161elny',), ('Nabereznyje T\u0161elny',), ('Nabereznyje T\u0161elny',), ('Tula',), ('Tula',), ('Tula',), ('Tula',), ('Tula',), ('Tula',), ('Tula',), ('Tula',), ('Tula',), ('Tula',), ('Tula',), ('Tjumen',), ('Tjumen',), ('Tjumen',), ('Tjumen',), ('Tjumen',), ('Tjumen',), ('Tjumen',), ('Tjumen',), ('Tjumen',), ('Tjumen',), ('Tjumen',), ('Kemerovo',), ('Kemerovo',), ('Kemerovo',), ('Kemerovo',), ('Kemerovo',), ('Kemerovo',), ('Kemerovo',), ('Kemerovo',), ('Kemerovo',), ('Kemerovo',), ('Kemerovo',), ('Astrahan',), ('Astrahan',), ('Astrahan',), ('Astrahan',), ('Astrahan',), ('Astrahan',), ('Astrahan',), ('Astrahan',), ('Astrahan',), ('Astrahan',), ('Astrahan',), ('Tomsk',), ('Tomsk',), ('Tomsk',), ('Tomsk',), ('Tomsk',), ('Tomsk',), ('Tomsk',), ('Tomsk',), ('Tomsk',), ('Tomsk',), ('Tomsk',), ('Kirov',), ('Kirov',), ('Kirov',), ('Kirov',), ('Kirov',), ('Kirov',), ('Kirov',), ('Kirov',), ('Kirov',), ('Kirov',), ('Kirov',), ('Ivanovo',), ('Ivanovo',), ('Ivanovo',), ('Ivanovo',), ('Ivanovo',), ('Ivanovo',), ('Ivanovo',), ('Ivanovo',), ('Ivanovo',), ('Ivanovo',), ('Ivanovo',), ('T\u0161eboksary',), ('T\u0161eboksary',), ('T\u0161eboksary',), ('T\u0161eboksary',), ('T\u0161eboksary',), ('T\u0161eboksary',), ('T\u0161eboksary',), ('T\u0161eboksary',), ('T\u0161eboksary',), ('T\u0161eboksary',), ('T\u0161eboksary',), ('Brjansk',), ('Brjansk',), ('Brjansk',), ('Brjansk',), ('Brjansk',), ('Brjansk',), ('Brjansk',), ('Brjansk',), ('Brjansk',), ('Brjansk',), ('Brjansk',), ('Tver',), ('Tver',), ('Tver',), ('Tver',), ('Tver',), ('Tver',), ('Tver',), ('Tver',), ('Tver',), ('Tver',), ('Tver',), ('Kursk',), ('Kursk',), ('Kursk',), ('Kursk',), ('Kursk',), ('Kursk',), ('Kursk',), ('Kursk',), ('Kursk',), ('Kursk',), ('Kursk',), ('Magnitogorsk',), ('Magnitogorsk',), ('Magnitogorsk',), ('Magnitogorsk',), ('Magnitogorsk',), ('Magnitogorsk',), ('Magnitogorsk',), ('Magnitogorsk',), ('Magnitogorsk',), ('Magnitogorsk',), ('Magnitogorsk',), ('Kaliningrad',), ('Kaliningrad',), ('Kaliningrad',), ('Kaliningrad',), ('Kaliningrad',), ('Kaliningrad',), ('Kaliningrad',), ('Kaliningrad',), ('Kaliningrad',), ('Kaliningrad',), ('Kaliningrad',), ('Nizni Tagil',), ('Nizni Tagil',), ('Nizni Tagil',), ('Nizni Tagil',), ('Nizni Tagil',), ('Nizni Tagil',), ('Nizni Tagil',), ('Nizni Tagil',), ('Nizni Tagil',), ('Nizni Tagil',), ('Nizni Tagil',), ('Murmansk',), ('Murmansk',), ('Murmansk',), ('Murmansk',), ('Murmansk',), ('Murmansk',), ('Murmansk',), ('Murmansk',), ('Murmansk',), ('Murmansk',), ('Murmansk',), ('Ulan-Ude',), ('Ulan-Ude',), ('Ulan-Ude',), ('Ulan-Ude',), ('Ulan-Ude',), ('Ulan-Ude',), ('Ulan-Ude',), ('Ulan-Ude',), ('Ulan-Ude',), ('Ulan-Ude',), ('Ulan-Ude',), ('Kurgan',), ('Kurgan',), ('Kurgan',), ('Kurgan',), ('Kurgan',), ('Kurgan',), ('Kurgan',), ('Kurgan',), ('Kurgan',), ('Kurgan',), ('Kurgan',), ('Arkangeli',), ('Arkangeli',), ('Arkangeli',), ('Arkangeli',), ('Arkangeli',), ('Arkangeli',), ('Arkangeli',), ('Arkangeli',), ('Arkangeli',), ('Arkangeli',), ('Arkangeli',), ('Sot\u0161i',), ('Sot\u0161i',), ('Sot\u0161i',), ('Sot\u0161i',), ('Sot\u0161i',), ('Sot\u0161i',), ('Sot\u0161i',), ('Sot\u0161i',), ('Sot\u0161i',), ('Sot\u0161i',), ('Sot\u0161i',), ('Smolensk',), ('Smolensk',), ('Smolensk',), ('Smolensk',), ('Smolensk',), ('Smolensk',), ('Smolensk',), ('Smolensk',), ('Smolensk',), ('Smolensk',), ('Smolensk',), ('Orjol',), ('Orjol',), ('Orjol',), ('Orjol',), ('Orjol',), ('Orjol',), ('Orjol',), ('Orjol',), ('Orjol',), ('Orjol',), ('Orjol',), ('Stavropol',), ('Stavropol',), ('Stavropol',), ('Stavropol',), ('Stavropol',), ('Stavropol',), ('Stavropol',), ('Stavropol',), ('Stavropol',), ('Stavropol',), ('Stavropol',), ('Belgorod',), ('Belgorod',), ('Belgorod',), ('Belgorod',), ('Belgorod',), ('Belgorod',), ('Belgorod',), ('Belgorod',), ('Belgorod',), ('Belgorod',), ('Belgorod',), ('Kaluga',), ('Kaluga',), ('Kaluga',), ('Kaluga',), ('Kaluga',), ('Kaluga',), ('Kaluga',), ('Kaluga',), ('Kaluga',), ('Kaluga',), ('Kaluga',), ('Vladimir',), ('Vladimir',), ('Vladimir',), ('Vladimir',), ('Vladimir',), ('Vladimir',), ('Vladimir',), ('Vladimir',), ('Vladimir',), ('Vladimir',), ('Vladimir',), ('Mahat\u0161kala',), ('Mahat\u0161kala',), ('Mahat\u0161kala',), ('Mahat\u0161kala',), ('Mahat\u0161kala',), ('Mahat\u0161kala',), ('Mahat\u0161kala',), ('Mahat\u0161kala',), ('Mahat\u0161kala',), ('Mahat\u0161kala',), ('Mahat\u0161kala',), ('T\u0161erepovets',), ('T\u0161erepovets',), ('T\u0161erepovets',), ('T\u0161erepovets',), ('T\u0161erepovets',), ('T\u0161erepovets',), ('T\u0161erepovets',), ('T\u0161erepovets',), ('T\u0161erepovets',), ('T\u0161erepovets',), ('T\u0161erepovets',), ('Saransk',), ('Saransk',), ('Saransk',), ('Saransk',), ('Saransk',), ('Saransk',), ('Saransk',), ('Saransk',), ('Saransk',), ('Saransk',), ('Saransk',), ('Tambov',), ('Tambov',), ('Tambov',), ('Tambov',), ('Tambov',), ('Tambov',), ('Tambov',), ('Tambov',), ('Tambov',), ('Tambov',), ('Tambov',), ('Vladikavkaz',), ('Vladikavkaz',), ('Vladikavkaz',), ('Vladikavkaz',), ('Vladikavkaz',), ('Vladikavkaz',), ('Vladikavkaz',), ('Vladikavkaz',), ('Vladikavkaz',), ('Vladikavkaz',), ('Vladikavkaz',), ('T\u0161ita',), ('T\u0161ita',), ('T\u0161ita',), ('T\u0161ita',), ('T\u0161ita',), ('T\u0161ita',), ('T\u0161ita',), ('T\u0161ita',), ('T\u0161ita',), ('T\u0161ita',), ('T\u0161ita',), ('Vologda',), ('Vologda',), ('Vologda',), ('Vologda',), ('Vologda',), ('Vologda',), ('Vologda',), ('Vologda',), ('Vologda',), ('Vologda',), ('Vologda',), ('Veliki Novgorod',), ('Veliki Novgorod',), ('Veliki Novgorod',), ('Veliki Novgorod',), ('Veliki Novgorod',), ('Veliki Novgorod',), ('Veliki Novgorod',), ('Veliki Novgorod',), ('Veliki Novgorod',), ('Veliki Novgorod',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Komsomolsk-na-Amure',), ('Komsomolsk-na-Amure',), ('Komsomolsk-na-Amure',), ('Komsomolsk-na-Amure',), ('Komsomolsk-na-Amure',), ('Komsomolsk-na-Amure',), ('Komsomolsk-na-Amure',), ('Komsomolsk-na-Amure',), ('Komsomolsk-na-Amure',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Kostroma',), ('Kostroma',), ('Kostroma',), ('Kostroma',), ('Kostroma',), ('Kostroma',), ('Kostroma',), ('Kostroma',), ('Kostroma',), ('Kostroma',), ('Volzski',), ('Volzski',), ('Volzski',), ('Volzski',), ('Volzski',), ('Volzski',), ('Volzski',), ('Volzski',), ('Volzski',), ('Volzski',), ('Volzski',), ('Taganrog',), ('Taganrog',), ('Taganrog',), ('Taganrog',), ('Taganrog',), ('Taganrog',), ('Taganrog',), ('Taganrog',), ('Taganrog',), ('Taganrog',), ('Taganrog',), ('Petroskoi',), ('Petroskoi',), ('Petroskoi',), ('Petroskoi',), ('Petroskoi',), ('Petroskoi',), ('Petroskoi',), ('Petroskoi',), ('Petroskoi',), ('Petroskoi',), ('Petroskoi',), ('Bratsk',), ('Bratsk',), ('Bratsk',), ('Bratsk',), ('Bratsk',), ('Bratsk',), ('Bratsk',), ('Bratsk',), ('Bratsk',), ('Bratsk',), ('Bratsk',), ('Dzerzinsk',), ('Dzerzinsk',), ('Dzerzinsk',), ('Dzerzinsk',), ('Dzerzinsk',), ('Dzerzinsk',), ('Dzerzinsk',), ('Dzerzinsk',), ('Dzerzinsk',), ('Dzerzinsk',), ('Dzerzinsk',), ('Surgut',), ('Surgut',), ('Surgut',), ('Surgut',), ('Surgut',), ('Surgut',), ('Surgut',), ('Surgut',), ('Surgut',), ('Surgut',), ('Surgut',), ('Orsk',), ('Orsk',), ('Orsk',), ('Orsk',), ('Orsk',), ('Orsk',), ('Orsk',), ('Orsk',), ('Orsk',), ('Orsk',), ('Orsk',), ('Sterlitamak',), ('Sterlitamak',), ('Sterlitamak',), ('Sterlitamak',), ('Sterlitamak',), ('Sterlitamak',), ('Sterlitamak',), ('Sterlitamak',), ('Sterlitamak',), ('Sterlitamak',), ('Sterlitamak',), ('Angarsk',), ('Angarsk',), ('Angarsk',), ('Angarsk',), ('Angarsk',), ('Angarsk',), ('Angarsk',), ('Angarsk',), ('Angarsk',), ('Angarsk',), ('Angarsk',), ('Jo\u0161kar-Ola',), ('Jo\u0161kar-Ola',), ('Jo\u0161kar-Ola',), ('Jo\u0161kar-Ola',), ('Jo\u0161kar-Ola',), ('Jo\u0161kar-Ola',), ('Jo\u0161kar-Ola',), ('Jo\u0161kar-Ola',), ('Jo\u0161kar-Ola',), ('Jo\u0161kar-Ola',), ('Jo\u0161kar-Ola',), ('Rybinsk',), ('Rybinsk',), ('Rybinsk',), ('Rybinsk',), ('Rybinsk',), ('Rybinsk',), ('Rybinsk',), ('Rybinsk',), ('Rybinsk',), ('Rybinsk',), ('Rybinsk',), ('Prokopjevsk',), ('Prokopjevsk',), ('Prokopjevsk',), ('Prokopjevsk',), ('Prokopjevsk',), ('Prokopjevsk',), ('Prokopjevsk',), ('Prokopjevsk',), ('Prokopjevsk',), ('Prokopjevsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Niznevartovsk',), ('Niznevartovsk',), ('Niznevartovsk',), ('Niznevartovsk',), ('Niznevartovsk',), ('Niznevartovsk',), ('Niznevartovsk',), ('Niznevartovsk',), ('Niznevartovsk',), ('Niznevartovsk',), ('Nalt\u0161ik',), ('Nalt\u0161ik',), ('Nalt\u0161ik',), ('Nalt\u0161ik',), ('Nalt\u0161ik',), ('Nalt\u0161ik',), ('Nalt\u0161ik',), ('Nalt\u0161ik',), ('Nalt\u0161ik',), ('Nalt\u0161ik',), ('Nalt\u0161ik',), ('Syktyvkar',), ('Syktyvkar',), ('Syktyvkar',), ('Syktyvkar',), ('Syktyvkar',), ('Syktyvkar',), ('Syktyvkar',), ('Syktyvkar',), ('Syktyvkar',), ('Syktyvkar',), ('Syktyvkar',), ('Severodvinsk',), ('Severodvinsk',), ('Severodvinsk',), ('Severodvinsk',), ('Severodvinsk',), ('Severodvinsk',), ('Severodvinsk',), ('Severodvinsk',), ('Severodvinsk',), ('Severodvinsk',), ('Severodvinsk',), ('Bijsk',), ('Bijsk',), ('Bijsk',), ('Bijsk',), ('Bijsk',), ('Bijsk',), ('Bijsk',), ('Bijsk',), ('Bijsk',), ('Bijsk',), ('Bijsk',), ('Niznekamsk',), ('Niznekamsk',), ('Niznekamsk',), ('Niznekamsk',), ('Niznekamsk',), ('Niznekamsk',), ('Niznekamsk',), ('Niznekamsk',), ('Niznekamsk',), ('Niznekamsk',), ('Niznekamsk',), ('Blagove\u0161t\u0161ensk',), ('Blagove\u0161t\u0161ensk',), ('Blagove\u0161t\u0161ensk',), ('Blagove\u0161t\u0161ensk',), ('Blagove\u0161t\u0161ensk',), ('Blagove\u0161t\u0161ensk',), ('Blagove\u0161t\u0161ensk',), ('Blagove\u0161t\u0161ensk',), ('Blagove\u0161t\u0161ensk',), ('Blagove\u0161t\u0161ensk',), ('Blagove\u0161t\u0161ensk',), ('\u0160ahty',), ('\u0160ahty',), ('\u0160ahty',), ('\u0160ahty',), ('\u0160ahty',), ('\u0160ahty',), ('\u0160ahty',), ('\u0160ahty',), ('\u0160ahty',), ('\u0160ahty',), ('\u0160ahty',), ('Staryi Oskol',), ('Staryi Oskol',), ('Staryi Oskol',), ('Staryi Oskol',), ('Staryi Oskol',), ('Staryi Oskol',), ('Staryi Oskol',), ('Staryi Oskol',), ('Staryi Oskol',), ('Staryi Oskol',), ('Staryi Oskol',), ('Zelenograd',), ('Zelenograd',), ('Zelenograd',), ('Zelenograd',), ('Zelenograd',), ('Zelenograd',), ('Zelenograd',), ('Zelenograd',), ('Zelenograd',), ('Zelenograd',), ('Zelenograd',), ('Balakovo',), ('Balakovo',), ('Balakovo',), ('Balakovo',), ('Balakovo',), ('Balakovo',), ('Balakovo',), ('Balakovo',), ('Balakovo',), ('Balakovo',), ('Balakovo',), ('Novorossijsk',), ('Novorossijsk',), ('Novorossijsk',), ('Novorossijsk',), ('Novorossijsk',), ('Novorossijsk',), ('Novorossijsk',), ('Novorossijsk',), ('Novorossijsk',), ('Novorossijsk',), ('Novorossijsk',), ('Pihkova',), ('Pihkova',), ('Pihkova',), ('Pihkova',), ('Pihkova',), ('Pihkova',), ('Pihkova',), ('Pihkova',), ('Pihkova',), ('Pihkova',), ('Pihkova',), ('Zlatoust',), ('Zlatoust',), ('Zlatoust',), ('Zlatoust',), ('Zlatoust',), ('Zlatoust',), ('Zlatoust',), ('Zlatoust',), ('Zlatoust',), ('Zlatoust',), ('Zlatoust',), ('Jakutsk',), ('Jakutsk',), ('Jakutsk',), ('Jakutsk',), ('Jakutsk',), ('Jakutsk',), ('Jakutsk',), ('Jakutsk',), ('Jakutsk',), ('Jakutsk',), ('Jakutsk',), ('Podolsk',), ('Podolsk',), ('Podolsk',), ('Podolsk',), ('Podolsk',), ('Podolsk',), ('Podolsk',), ('Podolsk',), ('Podolsk',), ('Podolsk',), ('Podolsk',), ('Petropavlovsk-Kamt\u0161atski',), ('Petropavlovsk-Kamt\u0161atski',), ('Petropavlovsk-Kamt\u0161atski',), ('Petropavlovsk-Kamt\u0161atski',), ('Petropavlovsk-Kamt\u0161atski',), ('Petropavlovsk-Kamt\u0161atski',), ('Petropavlovsk-Kamt\u0161atski',), ('Petropavlovsk-Kamt\u0161atski',), ('Petropavlovsk-Kamt\u0161atski',), ('Petropavlovsk-Kamt\u0161atski',), ('Petropavlovsk-Kamt\u0161atski',), ('Kamensk-Uralski',), ('Kamensk-Uralski',), ('Kamensk-Uralski',), ('Kamensk-Uralski',), ('Kamensk-Uralski',), ('Kamensk-Uralski',), ('Kamensk-Uralski',), ('Kamensk-Uralski',), ('Kamensk-Uralski',), ('Kamensk-Uralski',), ('Kamensk-Uralski',), ('Engels',), ('Engels',), ('Engels',), ('Engels',), ('Engels',), ('Engels',), ('Engels',), ('Engels',), ('Engels',), ('Engels',), ('Engels',), ('Syzran',), ('Syzran',), ('Syzran',), ('Syzran',), ('Syzran',), ('Syzran',), ('Syzran',), ('Syzran',), ('Syzran',), ('Syzran',), ('Syzran',), ('Grozny',), ('Grozny',), ('Grozny',), ('Grozny',), ('Grozny',), ('Grozny',), ('Grozny',), ('Grozny',), ('Grozny',), ('Grozny',), ('Grozny',), ('Novot\u0161erkassk',), ('Novot\u0161erkassk',), ('Novot\u0161erkassk',), ('Novot\u0161erkassk',), ('Novot\u0161erkassk',), ('Novot\u0161erkassk',), ('Novot\u0161erkassk',), ('Novot\u0161erkassk',), ('Novot\u0161erkassk',), ('Novot\u0161erkassk',), ('Novot\u0161erkassk',), ('Berezniki',), ('Berezniki',), ('Berezniki',), ('Berezniki',), ('Berezniki',), ('Berezniki',), ('Berezniki',), ('Berezniki',), ('Berezniki',), ('Berezniki',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Juzno-Sahalinsk',), ('Juzno-Sahalinsk',), ('Juzno-Sahalinsk',), ('Juzno-Sahalinsk',), ('Juzno-Sahalinsk',), ('Juzno-Sahalinsk',), ('Juzno-Sahalinsk',), ('Juzno-Sahalinsk',), ('Juzno-Sahalinsk',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Volgodonsk',), ('Volgodonsk',), ('Volgodonsk',), ('Volgodonsk',), ('Volgodonsk',), ('Volgodonsk',), ('Volgodonsk',), ('Volgodonsk',), ('Volgodonsk',), ('Volgodonsk',), ('Abakan',), ('Abakan',), ('Abakan',), ('Abakan',), ('Abakan',), ('Abakan',), ('Abakan',), ('Abakan',), ('Abakan',), ('Abakan',), ('Abakan',), ('Maikop',), ('Maikop',), ('Maikop',), ('Maikop',), ('Maikop',), ('Maikop',), ('Maikop',), ('Maikop',), ('Maikop',), ('Maikop',), ('Maikop',), ('Miass',), ('Miass',), ('Miass',), ('Miass',), ('Miass',), ('Miass',), ('Miass',), ('Miass',), ('Miass',), ('Miass',), ('Miass',), ('Armavir',), ('Armavir',), ('Armavir',), ('Armavir',), ('Armavir',), ('Armavir',), ('Armavir',), ('Armavir',), ('Armavir',), ('Armavir',), ('Armavir',), ('Ljubertsy',), ('Ljubertsy',), ('Ljubertsy',), ('Ljubertsy',), ('Ljubertsy',), ('Ljubertsy',), ('Ljubertsy',), ('Ljubertsy',), ('Ljubertsy',), ('Ljubertsy',), ('Ljubertsy',), ('Rubtsovsk',), ('Rubtsovsk',), ('Rubtsovsk',), ('Rubtsovsk',), ('Rubtsovsk',), ('Rubtsovsk',), ('Rubtsovsk',), ('Rubtsovsk',), ('Rubtsovsk',), ('Rubtsovsk',), ('Rubtsovsk',), ('Kovrov',), ('Kovrov',), ('Kovrov',), ('Kovrov',), ('Kovrov',), ('Kovrov',), ('Kovrov',), ('Kovrov',), ('Kovrov',), ('Kovrov',), ('Kovrov',), ('Nahodka',), ('Nahodka',), ('Nahodka',), ('Nahodka',), ('Nahodka',), ('Nahodka',), ('Nahodka',), ('Nahodka',), ('Nahodka',), ('Nahodka',), ('Nahodka',), ('Ussurijsk',), ('Ussurijsk',), ('Ussurijsk',), ('Ussurijsk',), ('Ussurijsk',), ('Ussurijsk',), ('Ussurijsk',), ('Ussurijsk',), ('Ussurijsk',), ('Ussurijsk',), ('Ussurijsk',), ('Salavat',), ('Salavat',), ('Salavat',), ('Salavat',), ('Salavat',), ('Salavat',), ('Salavat',), ('Salavat',), ('Salavat',), ('Salavat',), ('Salavat',), ('Myti\u0161t\u0161i',), ('Myti\u0161t\u0161i',), ('Myti\u0161t\u0161i',), ('Myti\u0161t\u0161i',), ('Myti\u0161t\u0161i',), ('Myti\u0161t\u0161i',), ('Myti\u0161t\u0161i',), ('Myti\u0161t\u0161i',), ('Myti\u0161t\u0161i',), ('Myti\u0161t\u0161i',), ('Myti\u0161t\u0161i',), ('Kolomna',), ('Kolomna',), ('Kolomna',), ('Kolomna',), ('Kolomna',), ('Kolomna',), ('Kolomna',), ('Kolomna',), ('Kolomna',), ('Kolomna',), ('Kolomna',), ('Elektrostal',), ('Elektrostal',), ('Elektrostal',), ('Elektrostal',), ('Elektrostal',), ('Elektrostal',), ('Elektrostal',), ('Elektrostal',), ('Elektrostal',), ('Elektrostal',), ('Elektrostal',), ('Murom',), ('Murom',), ('Murom',), ('Murom',), ('Murom',), ('Murom',), ('Murom',), ('Murom',), ('Murom',), ('Murom',), ('Murom',), ('Kolpino',), ('Kolpino',), ('Kolpino',), ('Kolpino',), ('Kolpino',), ('Kolpino',), ('Kolpino',), ('Kolpino',), ('Kolpino',), ('Kolpino',), ('Kolpino',), ('Norilsk',), ('Norilsk',), ('Norilsk',), ('Norilsk',), ('Norilsk',), ('Norilsk',), ('Norilsk',), ('Norilsk',), ('Norilsk',), ('Norilsk',), ('Norilsk',), ('Almetjevsk',), ('Almetjevsk',), ('Almetjevsk',), ('Almetjevsk',), ('Almetjevsk',), ('Almetjevsk',), ('Almetjevsk',), ('Almetjevsk',), ('Almetjevsk',), ('Almetjevsk',), ('Almetjevsk',), ('Novomoskovsk',), ('Novomoskovsk',), ('Novomoskovsk',), ('Novomoskovsk',), ('Novomoskovsk',), ('Novomoskovsk',), ('Novomoskovsk',), ('Novomoskovsk',), ('Novomoskovsk',), ('Novomoskovsk',), ('Novomoskovsk',), ('Dimitrovgrad',), ('Dimitrovgrad',), ('Dimitrovgrad',), ('Dimitrovgrad',), ('Dimitrovgrad',), ('Dimitrovgrad',), ('Dimitrovgrad',), ('Dimitrovgrad',), ('Dimitrovgrad',), ('Dimitrovgrad',), ('Dimitrovgrad',), ('Pervouralsk',), ('Pervouralsk',), ('Pervouralsk',), ('Pervouralsk',), ('Pervouralsk',), ('Pervouralsk',), ('Pervouralsk',), ('Pervouralsk',), ('Pervouralsk',), ('Pervouralsk',), ('Pervouralsk',), ('Himki',), ('Himki',), ('Himki',), ('Himki',), ('Himki',), ('Himki',), ('Himki',), ('Himki',), ('Himki',), ('Himki',), ('Himki',), ('Bala\u0161iha',), ('Bala\u0161iha',), ('Bala\u0161iha',), ('Bala\u0161iha',), ('Bala\u0161iha',), ('Bala\u0161iha',), ('Bala\u0161iha',), ('Bala\u0161iha',), ('Bala\u0161iha',), ('Bala\u0161iha',), ('Bala\u0161iha',), ('Nevinnomyssk',), ('Nevinnomyssk',), ('Nevinnomyssk',), ('Nevinnomyssk',), ('Nevinnomyssk',), ('Nevinnomyssk',), ('Nevinnomyssk',), ('Nevinnomyssk',), ('Nevinnomyssk',), ('Nevinnomyssk',), ('Nevinnomyssk',), ('Pjatigorsk',), ('Pjatigorsk',), ('Pjatigorsk',), ('Pjatigorsk',), ('Pjatigorsk',), ('Pjatigorsk',), ('Pjatigorsk',), ('Pjatigorsk',), ('Pjatigorsk',), ('Pjatigorsk',), ('Pjatigorsk',), ('Korolev',), ('Korolev',), ('Korolev',), ('Korolev',), ('Korolev',), ('Korolev',), ('Korolev',), ('Korolev',), ('Korolev',), ('Korolev',), ('Korolev',), ('Serpuhov',), ('Serpuhov',), ('Serpuhov',), ('Serpuhov',), ('Serpuhov',), ('Serpuhov',), ('Serpuhov',), ('Serpuhov',), ('Serpuhov',), ('Serpuhov',), ('Serpuhov',), ('Odintsovo',), ('Odintsovo',), ('Odintsovo',), ('Odintsovo',), ('Odintsovo',), ('Odintsovo',), ('Odintsovo',), ('Odintsovo',), ('Odintsovo',), ('Odintsovo',), ('Odintsovo',), ('Orehovo-Zujevo',), ('Orehovo-Zujevo',), ('Orehovo-Zujevo',), ('Orehovo-Zujevo',), ('Orehovo-Zujevo',), ('Orehovo-Zujevo',), ('Orehovo-Zujevo',), ('Orehovo-Zujevo',), ('Orehovo-Zujevo',), ('Orehovo-Zujevo',), ('Orehovo-Zujevo',), ('Kamy\u0161in',), ('Kamy\u0161in',), ('Kamy\u0161in',), ('Kamy\u0161in',), ('Kamy\u0161in',), ('Kamy\u0161in',), ('Kamy\u0161in',), ('Kamy\u0161in',), ('Kamy\u0161in',), ('Kamy\u0161in',), ('Kamy\u0161in',), ('Novot\u0161eboksarsk',), ('Novot\u0161eboksarsk',), ('Novot\u0161eboksarsk',), ('Novot\u0161eboksarsk',), ('Novot\u0161eboksarsk',), ('Novot\u0161eboksarsk',), ('Novot\u0161eboksarsk',), ('Novot\u0161eboksarsk',), ('Novot\u0161eboksarsk',), ('Novot\u0161eboksarsk',), ('Novot\u0161eboksarsk',), ('T\u0161erkessk',), ('T\u0161erkessk',), ('T\u0161erkessk',), ('T\u0161erkessk',), ('T\u0161erkessk',), ('T\u0161erkessk',), ('T\u0161erkessk',), ('T\u0161erkessk',), ('T\u0161erkessk',), ('T\u0161erkessk',), ('T\u0161erkessk',), ('At\u0161insk',), ('At\u0161insk',), ('At\u0161insk',), ('At\u0161insk',), ('At\u0161insk',), ('At\u0161insk',), ('At\u0161insk',), ('At\u0161insk',), ('At\u0161insk',), ('At\u0161insk',), ('At\u0161insk',), ('Magadan',), ('Magadan',), ('Magadan',), ('Magadan',), ('Magadan',), ('Magadan',), ('Magadan',), ('Magadan',), ('Magadan',), ('Magadan',), ('Magadan',), ('Mit\u0161urinsk',), ('Mit\u0161urinsk',), ('Mit\u0161urinsk',), ('Mit\u0161urinsk',), ('Mit\u0161urinsk',), ('Mit\u0161urinsk',), ('Mit\u0161urinsk',), ('Mit\u0161urinsk',), ('Mit\u0161urinsk',), ('Mit\u0161urinsk',), ('Mit\u0161urinsk',), ('Kislovodsk',), ('Kislovodsk',), ('Kislovodsk',), ('Kislovodsk',), ('Kislovodsk',), ('Kislovodsk',), ('Kislovodsk',), ('Kislovodsk',), ('Kislovodsk',), ('Kislovodsk',), ('Kislovodsk',), ('Jelets',), ('Jelets',), ('Jelets',), ('Jelets',), ('Jelets',), ('Jelets',), ('Jelets',), ('Jelets',), ('Jelets',), ('Jelets',), ('Jelets',), ('Seversk',), ('Seversk',), ('Seversk',), ('Seversk',), ('Seversk',), ('Seversk',), ('Seversk',), ('Seversk',), ('Seversk',), ('Seversk',), ('Seversk',), ('Noginsk',), ('Noginsk',), ('Noginsk',), ('Noginsk',), ('Noginsk',), ('Noginsk',), ('Noginsk',), ('Noginsk',), ('Noginsk',), ('Noginsk',), ('Noginsk',), ('Velikije Luki',), ('Velikije Luki',), ('Velikije Luki',), ('Velikije Luki',), ('Velikije Luki',), ('Velikije Luki',), ('Velikije Luki',), ('Velikije Luki',), ('Velikije Luki',), ('Velikije Luki',), ('Velikije Luki',), ('Novokuiby\u0161evsk',), ('Novokuiby\u0161evsk',), ('Novokuiby\u0161evsk',), ('Novokuiby\u0161evsk',), ('Novokuiby\u0161evsk',), ('Novokuiby\u0161evsk',), ('Novokuiby\u0161evsk',), ('Novokuiby\u0161evsk',), ('Novokuiby\u0161evsk',), ('Novokuiby\u0161evsk',), ('Novokuiby\u0161evsk',), ('Neftekamsk',), ('Neftekamsk',), ('Neftekamsk',), ('Neftekamsk',), ('Neftekamsk',), ('Neftekamsk',), ('Neftekamsk',), ('Neftekamsk',), ('Neftekamsk',), ('Neftekamsk',), ('Neftekamsk',), ('Leninsk-Kuznetski',), ('Leninsk-Kuznetski',), ('Leninsk-Kuznetski',), ('Leninsk-Kuznetski',), ('Leninsk-Kuznetski',), ('Leninsk-Kuznetski',), ('Leninsk-Kuznetski',), ('Leninsk-Kuznetski',), ('Leninsk-Kuznetski',), ('Leninsk-Kuznetski',), ('Leninsk-Kuznetski',), ('Oktjabrski',), ('Oktjabrski',), ('Oktjabrski',), ('Oktjabrski',), ('Oktjabrski',), ('Oktjabrski',), ('Oktjabrski',), ('Oktjabrski',), ('Oktjabrski',), ('Oktjabrski',), ('Oktjabrski',), ('Sergijev Posad',), ('Sergijev Posad',), ('Sergijev Posad',), ('Sergijev Posad',), ('Sergijev Posad',), ('Sergijev Posad',), ('Sergijev Posad',), ('Sergijev Posad',), ('Sergijev Posad',), ('Sergijev Posad',), ('Sergijev Posad',), ('Arzamas',), ('Arzamas',), ('Arzamas',), ('Arzamas',), ('Arzamas',), ('Arzamas',), ('Arzamas',), ('Arzamas',), ('Arzamas',), ('Arzamas',), ('Arzamas',), ('Kiseljovsk',), ('Kiseljovsk',), ('Kiseljovsk',), ('Kiseljovsk',), ('Kiseljovsk',), ('Kiseljovsk',), ('Kiseljovsk',), ('Kiseljovsk',), ('Kiseljovsk',), ('Kiseljovsk',), ('Kiseljovsk',), ('Novotroitsk',), ('Novotroitsk',), ('Novotroitsk',), ('Novotroitsk',), ('Novotroitsk',), ('Novotroitsk',), ('Novotroitsk',), ('Novotroitsk',), ('Novotroitsk',), ('Novotroitsk',), ('Novotroitsk',), ('Obninsk',), ('Obninsk',), ('Obninsk',), ('Obninsk',), ('Obninsk',), ('Obninsk',), ('Obninsk',), ('Obninsk',), ('Obninsk',), ('Obninsk',), ('Obninsk',), ('Kansk',), ('Kansk',), ('Kansk',), ('Kansk',), ('Kansk',), ('Kansk',), ('Kansk',), ('Kansk',), ('Kansk',), ('Kansk',), ('Kansk',), ('Glazov',), ('Glazov',), ('Glazov',), ('Glazov',), ('Glazov',), ('Glazov',), ('Glazov',), ('Glazov',), ('Glazov',), ('Glazov',), ('Glazov',), ('Solikamsk',), ('Solikamsk',), ('Solikamsk',), ('Solikamsk',), ('Solikamsk',), ('Solikamsk',), ('Solikamsk',), ('Solikamsk',), ('Solikamsk',), ('Solikamsk',), ('Solikamsk',), ('Sarapul',), ('Sarapul',), ('Sarapul',), ('Sarapul',), ('Sarapul',), ('Sarapul',), ('Sarapul',), ('Sarapul',), ('Sarapul',), ('Sarapul',), ('Sarapul',), ('Ust-Ilimsk',), ('Ust-Ilimsk',), ('Ust-Ilimsk',), ('Ust-Ilimsk',), ('Ust-Ilimsk',), ('Ust-Ilimsk',), ('Ust-Ilimsk',), ('Ust-Ilimsk',), ('Ust-Ilimsk',), ('Ust-Ilimsk',), ('Ust-Ilimsk',), ('\u0160t\u0161olkovo',), ('\u0160t\u0161olkovo',), ('\u0160t\u0161olkovo',), ('\u0160t\u0161olkovo',), ('\u0160t\u0161olkovo',), ('\u0160t\u0161olkovo',), ('\u0160t\u0161olkovo',), ('\u0160t\u0161olkovo',), ('\u0160t\u0161olkovo',), ('\u0160t\u0161olkovo',), ('\u0160t\u0161olkovo',), ('Mezduret\u0161ensk',), ('Mezduret\u0161ensk',), ('Mezduret\u0161ensk',), ('Mezduret\u0161ensk',), ('Mezduret\u0161ensk',), ('Mezduret\u0161ensk',), ('Mezduret\u0161ensk',), ('Mezduret\u0161ensk',), ('Mezduret\u0161ensk',), ('Mezduret\u0161ensk',), ('Mezduret\u0161ensk',), ('Usolje-Sibirskoje',), ('Usolje-Sibirskoje',), ('Usolje-Sibirskoje',), ('Usolje-Sibirskoje',), ('Usolje-Sibirskoje',), ('Usolje-Sibirskoje',), ('Usolje-Sibirskoje',), ('Usolje-Sibirskoje',), ('Usolje-Sibirskoje',), ('Usolje-Sibirskoje',), ('Usolje-Sibirskoje',), ('Elista',), ('Elista',), ('Elista',), ('Elista',), ('Elista',), ('Elista',), ('Elista',), ('Elista',), ('Elista',), ('Elista',), ('Elista',), ('Novo\u0161ahtinsk',), ('Novo\u0161ahtinsk',), ('Novo\u0161ahtinsk',), ('Novo\u0161ahtinsk',), ('Novo\u0161ahtinsk',), ('Novo\u0161ahtinsk',), ('Novo\u0161ahtinsk',), ('Novo\u0161ahtinsk',), ('Novo\u0161ahtinsk',), ('Novo\u0161ahtinsk',), ('Novo\u0161ahtinsk',), ('Votkinsk',), ('Votkinsk',), ('Votkinsk',), ('Votkinsk',), ('Votkinsk',), ('Votkinsk',), ('Votkinsk',), ('Votkinsk',), ('Votkinsk',), ('Votkinsk',), ('Votkinsk',), ('Kyzyl',), ('Kyzyl',), ('Kyzyl',), ('Kyzyl',), ('Kyzyl',), ('Kyzyl',), ('Kyzyl',), ('Kyzyl',), ('Kyzyl',), ('Kyzyl',), ('Kyzyl',), ('Serov',), ('Serov',), ('Serov',), ('Serov',), ('Serov',), ('Serov',), ('Serov',), ('Serov',), ('Serov',), ('Serov',), ('Serov',), ('Zelenodolsk',), ('Zelenodolsk',), ('Zelenodolsk',), ('Zelenodolsk',), ('Zelenodolsk',), ('Zelenodolsk',), ('Zelenodolsk',), ('Zelenodolsk',), ('Zelenodolsk',), ('Zelenodolsk',), ('Zelenodolsk',), ('Zeleznodoroznyi',), ('Zeleznodoroznyi',), ('Zeleznodoroznyi',), ('Zeleznodoroznyi',), ('Zeleznodoroznyi',), ('Zeleznodoroznyi',), ('Zeleznodoroznyi',), ('Zeleznodoroznyi',), ('Zeleznodoroznyi',), ('Zeleznodoroznyi',), ('Zeleznodoroznyi',), ('Kine\u0161ma',), ('Kine\u0161ma',), ('Kine\u0161ma',), ('Kine\u0161ma',), ('Kine\u0161ma',), ('Kine\u0161ma',), ('Kine\u0161ma',), ('Kine\u0161ma',), ('Kine\u0161ma',), ('Kine\u0161ma',), ('Kine\u0161ma',), ('Kuznetsk',), ('Kuznetsk',), ('Kuznetsk',), ('Kuznetsk',), ('Kuznetsk',), ('Kuznetsk',), ('Kuznetsk',), ('Kuznetsk',), ('Kuznetsk',), ('Kuznetsk',), ('Kuznetsk',), ('Uhta',), ('Uhta',), ('Uhta',), ('Uhta',), ('Uhta',), ('Uhta',), ('Uhta',), ('Uhta',), ('Uhta',), ('Uhta',), ('Uhta',), ('Jessentuki',), ('Jessentuki',), ('Jessentuki',), ('Jessentuki',), ('Jessentuki',), ('Jessentuki',), ('Jessentuki',), ('Jessentuki',), ('Jessentuki',), ('Jessentuki',), ('Jessentuki',), ('Tobolsk',), ('Tobolsk',), ('Tobolsk',), ('Tobolsk',), ('Tobolsk',), ('Tobolsk',), ('Tobolsk',), ('Tobolsk',), ('Tobolsk',), ('Tobolsk',), ('Tobolsk',), ('Neftejugansk',), ('Neftejugansk',), ('Neftejugansk',), ('Neftejugansk',), ('Neftejugansk',), ('Neftejugansk',), ('Neftejugansk',), ('Neftejugansk',), ('Neftejugansk',), ('Neftejugansk',), ('Neftejugansk',), ('Bataisk',), ('Bataisk',), ('Bataisk',), ('Bataisk',), ('Bataisk',), ('Bataisk',), ('Bataisk',), ('Bataisk',), ('Bataisk',), ('Bataisk',), ('Bataisk',), ('Nojabrsk',), ('Nojabrsk',), ('Nojabrsk',), ('Nojabrsk',), ('Nojabrsk',), ('Nojabrsk',), ('Nojabrsk',), ('Nojabrsk',), ('Nojabrsk',), ('Nojabrsk',), ('Nojabrsk',), ('Bala\u0161ov',), ('Bala\u0161ov',), ('Bala\u0161ov',), ('Bala\u0161ov',), ('Bala\u0161ov',), ('Bala\u0161ov',), ('Bala\u0161ov',), ('Bala\u0161ov',), ('Bala\u0161ov',), ('Bala\u0161ov',), ('Bala\u0161ov',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zukovski',), ('Zukovski',), ('Zukovski',), ('Zukovski',), ('Zukovski',), ('Zukovski',), ('Zukovski',), ('Zukovski',), ('Zukovski',), ('Zukovski',), ('Zukovski',), ('Anzero-Sudzensk',), ('Anzero-Sudzensk',), ('Anzero-Sudzensk',), ('Anzero-Sudzensk',), ('Anzero-Sudzensk',), ('Anzero-Sudzensk',), ('Anzero-Sudzensk',), ('Anzero-Sudzensk',), ('Anzero-Sudzensk',), ('Anzero-Sudzensk',), ('Anzero-Sudzensk',), ('Bugulma',), ('Bugulma',), ('Bugulma',), ('Bugulma',), ('Bugulma',), ('Bugulma',), ('Bugulma',), ('Bugulma',), ('Bugulma',), ('Bugulma',), ('Bugulma',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Zeleznogorsk',), ('Novouralsk',), ('Novouralsk',), ('Novouralsk',), ('Novouralsk',), ('Novouralsk',), ('Novouralsk',), ('Novouralsk',), ('Novouralsk',), ('Novouralsk',), ('Novouralsk',), ('Novouralsk',), ('Pu\u0161kin',), ('Pu\u0161kin',), ('Pu\u0161kin',), ('Pu\u0161kin',), ('Pu\u0161kin',), ('Pu\u0161kin',), ('Pu\u0161kin',), ('Pu\u0161kin',), ('Pu\u0161kin',), ('Pu\u0161kin',), ('Pu\u0161kin',), ('Vorkuta',), ('Vorkuta',), ('Vorkuta',), ('Vorkuta',), ('Vorkuta',), ('Vorkuta',), ('Vorkuta',), ('Vorkuta',), ('Vorkuta',), ('Vorkuta',), ('Vorkuta',), ('Derbent',), ('Derbent',), ('Derbent',), ('Derbent',), ('Derbent',), ('Derbent',), ('Derbent',), ('Derbent',), ('Derbent',), ('Derbent',), ('Derbent',), ('Kirovo-T\u0161epetsk',), ('Kirovo-T\u0161epetsk',), ('Kirovo-T\u0161epetsk',), ('Kirovo-T\u0161epetsk',), ('Kirovo-T\u0161epetsk',), ('Kirovo-T\u0161epetsk',), ('Kirovo-T\u0161epetsk',), ('Kirovo-T\u0161epetsk',), ('Kirovo-T\u0161epetsk',), ('Kirovo-T\u0161epetsk',), ('Kirovo-T\u0161epetsk',), ('Krasnogorsk',), ('Krasnogorsk',), ('Krasnogorsk',), ('Krasnogorsk',), ('Krasnogorsk',), ('Krasnogorsk',), ('Krasnogorsk',), ('Krasnogorsk',), ('Krasnogorsk',), ('Krasnogorsk',), ('Krasnogorsk',), ('Klin',), ('Klin',), ('Klin',), ('Klin',), ('Klin',), ('Klin',), ('Klin',), ('Klin',), ('Klin',), ('Klin',), ('Klin',), ('T\u0161aikovski',), ('T\u0161aikovski',), ('T\u0161aikovski',), ('T\u0161aikovski',), ('T\u0161aikovski',), ('T\u0161aikovski',), ('T\u0161aikovski',), ('T\u0161aikovski',), ('T\u0161aikovski',), ('T\u0161aikovski',), ('T\u0161aikovski',), ('Novyi Urengoi',), ('Novyi Urengoi',), ('Novyi Urengoi',), ('Novyi Urengoi',), ('Novyi Urengoi',), ('Novyi Urengoi',), ('Novyi Urengoi',), ('Novyi Urengoi',), ('Novyi Urengoi',), ('Novyi Urengoi',), ('Novyi Urengoi',), ('Longyearbyen',), ('Bratislava',), ('Bratislava',), ('Bratislava',), ('Bratislava',), ('Ko\u0161ice',), ('Ko\u0161ice',), ('Ko\u0161ice',), ('Ko\u0161ice',), ('Pre\u0161ov',), ('Pre\u0161ov',), ('Pre\u0161ov',), ('Pre\u0161ov',), ('Ljubljana',), ('Ljubljana',), ('Maribor',), ('Maribor',), ('Stockholm',), ('Stockholm',), ('Stockholm',), ('Stockholm',), ('Stockholm',), ('Gothenburg [G\u00f6teborg]',), ('Gothenburg [G\u00f6teborg]',), ('Gothenburg [G\u00f6teborg]',), ('Gothenburg [G\u00f6teborg]',), ('Gothenburg [G\u00f6teborg]',), ('Malm\u00f6',), ('Malm\u00f6',), ('Malm\u00f6',), ('Malm\u00f6',), ('Malm\u00f6',), ('Uppsala',), ('Uppsala',), ('Uppsala',), ('Uppsala',), ('Uppsala',), ('Link\u00f6ping',), ('Link\u00f6ping',), ('Link\u00f6ping',), ('Link\u00f6ping',), ('Link\u00f6ping',), ('V\u00e4ster\u00e5s',), ('V\u00e4ster\u00e5s',), ('V\u00e4ster\u00e5s',), ('V\u00e4ster\u00e5s',), ('V\u00e4ster\u00e5s',), ('\u00d6rebro',), ('\u00d6rebro',), ('\u00d6rebro',), ('\u00d6rebro',), ('\u00d6rebro',), ('Norrk\u00f6ping',), ('Norrk\u00f6ping',), ('Norrk\u00f6ping',), ('Norrk\u00f6ping',), ('Norrk\u00f6ping',), ('Helsingborg',), ('Helsingborg',), ('Helsingborg',), ('Helsingborg',), ('Helsingborg',), ('J\u00f6nk\u00f6ping',), ('J\u00f6nk\u00f6ping',), ('J\u00f6nk\u00f6ping',), ('J\u00f6nk\u00f6ping',), ('J\u00f6nk\u00f6ping',), ('Ume\u00e5',), ('Ume\u00e5',), ('Ume\u00e5',), ('Ume\u00e5',), ('Ume\u00e5',), ('Lund',), ('Lund',), ('Lund',), ('Lund',), ('Lund',), ('Bor\u00e5s',), ('Bor\u00e5s',), ('Bor\u00e5s',), ('Bor\u00e5s',), ('Bor\u00e5s',), ('Sundsvall',), ('Sundsvall',), ('Sundsvall',), ('Sundsvall',), ('Sundsvall',), ('G\u00e4vle',), ('G\u00e4vle',), ('G\u00e4vle',), ('G\u00e4vle',), ('G\u00e4vle',), ('Kyiv',), ('Kyiv',), ('Kyiv',), ('Kyiv',), ('Kyiv',), ('Kyiv',), ('Harkova [Harkiv]',), ('Harkova [Harkiv]',), ('Harkova [Harkiv]',), ('Harkova [Harkiv]',), ('Harkova [Harkiv]',), ('Harkova [Harkiv]',), ('Dnipropetrovsk',), ('Dnipropetrovsk',), ('Dnipropetrovsk',), ('Dnipropetrovsk',), ('Dnipropetrovsk',), ('Dnipropetrovsk',), ('Donetsk',), ('Donetsk',), ('Donetsk',), ('Donetsk',), ('Donetsk',), ('Donetsk',), ('Odesa',), ('Odesa',), ('Odesa',), ('Odesa',), ('Odesa',), ('Odesa',), ('Zaporizzja',), ('Zaporizzja',), ('Zaporizzja',), ('Zaporizzja',), ('Zaporizzja',), ('Zaporizzja',), ('Lviv',), ('Lviv',), ('Lviv',), ('Lviv',), ('Lviv',), ('Lviv',), ('Kryvyi Rig',), ('Kryvyi Rig',), ('Kryvyi Rig',), ('Kryvyi Rig',), ('Kryvyi Rig',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mykolajiv',), ('Mykolajiv',), ('Mykolajiv',), ('Mykolajiv',), ('Mykolajiv',), ('Mariupol',), ('Mariupol',), ('Mariupol',), ('Mariupol',), ('Mariupol',), ('Mariupol',), ('Lugansk',), ('Lugansk',), ('Lugansk',), ('Lugansk',), ('Lugansk',), ('Lugansk',), ('Vinnytsja',), ('Vinnytsja',), ('Vinnytsja',), ('Vinnytsja',), ('Vinnytsja',), ('Vinnytsja',), ('Makijivka',), ('Makijivka',), ('Makijivka',), ('Makijivka',), ('Makijivka',), ('Makijivka',), ('Herson',), ('Herson',), ('Herson',), ('Herson',), ('Herson',), ('Herson',), ('Sevastopol',), ('Sevastopol',), ('Sevastopol',), ('Sevastopol',), ('Sevastopol',), ('Sevastopol',), ('Simferopol',), ('Simferopol',), ('Simferopol',), ('Simferopol',), ('Simferopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Pultava [Poltava]',), ('Pultava [Poltava]',), ('Pultava [Poltava]',), ('Pultava [Poltava]',), ('Pultava [Poltava]',), ('T\u0161ernigiv',), ('T\u0161ernigiv',), ('T\u0161ernigiv',), ('T\u0161ernigiv',), ('T\u0161ernigiv',), ('T\u0161ernigiv',), ('T\u0161erkasy',), ('T\u0161erkasy',), ('T\u0161erkasy',), ('T\u0161erkasy',), ('T\u0161erkasy',), ('T\u0161erkasy',), ('Gorlivka',), ('Gorlivka',), ('Gorlivka',), ('Gorlivka',), ('Gorlivka',), ('Gorlivka',), ('Zytomyr',), ('Zytomyr',), ('Zytomyr',), ('Zytomyr',), ('Zytomyr',), ('Zytomyr',), ('Sumy',), ('Sumy',), ('Sumy',), ('Sumy',), ('Sumy',), ('Sumy',), ('Dniprodzerzynsk',), ('Dniprodzerzynsk',), ('Dniprodzerzynsk',), ('Dniprodzerzynsk',), ('Dniprodzerzynsk',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Kirovograd',), ('Kirovograd',), ('Kirovograd',), ('Kirovograd',), ('Kirovograd',), ('Hmelnytskyi',), ('Hmelnytskyi',), ('Hmelnytskyi',), ('Hmelnytskyi',), ('Hmelnytskyi',), ('Hmelnytskyi',), ('T\u0161ernivtsi',), ('T\u0161ernivtsi',), ('T\u0161ernivtsi',), ('T\u0161ernivtsi',), ('T\u0161ernivtsi',), ('T\u0161ernivtsi',), ('Rivne',), ('Rivne',), ('Rivne',), ('Rivne',), ('Rivne',), ('Rivne',), ('Krement\u0161uk',), ('Krement\u0161uk',), ('Krement\u0161uk',), ('Krement\u0161uk',), ('Krement\u0161uk',), ('Krement\u0161uk',), ('Ivano-Frankivsk',), ('Ivano-Frankivsk',), ('Ivano-Frankivsk',), ('Ivano-Frankivsk',), ('Ivano-Frankivsk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Ternopil',), ('Ternopil',), ('Ternopil',), ('Ternopil',), ('Ternopil',), ('Lutsk',), ('Lutsk',), ('Lutsk',), ('Lutsk',), ('Lutsk',), ('Lutsk',), ('Bila Tserkva',), ('Bila Tserkva',), ('Bila Tserkva',), ('Bila Tserkva',), ('Bila Tserkva',), ('Bila Tserkva',), ('Kramatorsk',), ('Kramatorsk',), ('Kramatorsk',), ('Kramatorsk',), ('Kramatorsk',), ('Kramatorsk',), ('Melitopol',), ('Melitopol',), ('Melitopol',), ('Melitopol',), ('Melitopol',), ('Melitopol',), ('Kert\u0161',), ('Kert\u0161',), ('Kert\u0161',), ('Kert\u0161',), ('Kert\u0161',), ('Kert\u0161',), ('Nikopol',), ('Nikopol',), ('Nikopol',), ('Nikopol',), ('Nikopol',), ('Nikopol',), ('Berdjansk',), ('Berdjansk',), ('Berdjansk',), ('Berdjansk',), ('Berdjansk',), ('Berdjansk',), ('Pavlograd',), ('Pavlograd',), ('Pavlograd',), ('Pavlograd',), ('Pavlograd',), ('Pavlograd',), ('Sjeverodonetsk',), ('Sjeverodonetsk',), ('Sjeverodonetsk',), ('Sjeverodonetsk',), ('Sjeverodonetsk',), ('Sjeverodonetsk',), ('Slovjansk',), ('Slovjansk',), ('Slovjansk',), ('Slovjansk',), ('Slovjansk',), ('Slovjansk',), ('Uzgorod',), ('Uzgorod',), ('Uzgorod',), ('Uzgorod',), ('Uzgorod',), ('Uzgorod',), ('Alt\u0161evsk',), ('Alt\u0161evsk',), ('Alt\u0161evsk',), ('Alt\u0161evsk',), ('Alt\u0161evsk',), ('Alt\u0161evsk',), ('Lysyt\u0161ansk',), ('Lysyt\u0161ansk',), ('Lysyt\u0161ansk',), ('Lysyt\u0161ansk',), ('Lysyt\u0161ansk',), ('Lysyt\u0161ansk',), ('Jevpatorija',), ('Jevpatorija',), ('Jevpatorija',), ('Jevpatorija',), ('Jevpatorija',), ('Jevpatorija',), ('Kamjanets-Podilskyi',), ('Kamjanets-Podilskyi',), ('Kamjanets-Podilskyi',), ('Kamjanets-Podilskyi',), ('Kamjanets-Podilskyi',), ('Kamjanets-Podilskyi',), ('Jenakijeve',), ('Jenakijeve',), ('Jenakijeve',), ('Jenakijeve',), ('Jenakijeve',), ('Jenakijeve',), ('Krasnyi Lut\u0161',), ('Krasnyi Lut\u0161',), ('Krasnyi Lut\u0161',), ('Krasnyi Lut\u0161',), ('Krasnyi Lut\u0161',), ('Krasnyi Lut\u0161',), ('Stahanov',), ('Stahanov',), ('Stahanov',), ('Stahanov',), ('Stahanov',), ('Stahanov',), ('Oleksandrija',), ('Oleksandrija',), ('Oleksandrija',), ('Oleksandrija',), ('Oleksandrija',), ('Oleksandrija',), ('Konotop',), ('Konotop',), ('Konotop',), ('Konotop',), ('Konotop',), ('Konotop',), ('Kostjantynivka',), ('Kostjantynivka',), ('Kostjantynivka',), ('Kostjantynivka',), ('Kostjantynivka',), ('Kostjantynivka',), ('Berdyt\u0161iv',), ('Berdyt\u0161iv',), ('Berdyt\u0161iv',), ('Berdyt\u0161iv',), ('Berdyt\u0161iv',), ('Berdyt\u0161iv',), ('Izmajil',), ('Izmajil',), ('Izmajil',), ('Izmajil',), ('Izmajil',), ('Izmajil',), ('\u0160ostka',), ('\u0160ostka',), ('\u0160ostka',), ('\u0160ostka',), ('\u0160ostka',), ('\u0160ostka',), ('Uman',), ('Uman',), ('Uman',), ('Uman',), ('Uman',), ('Uman',), ('Brovary',), ('Brovary',), ('Brovary',), ('Brovary',), ('Brovary',), ('Brovary',), ('Mukat\u0161eve',), ('Mukat\u0161eve',), ('Mukat\u0161eve',), ('Mukat\u0161eve',), ('Mukat\u0161eve',), ('Mukat\u0161eve',), ('Beograd',), ('Beograd',), ('Beograd',), ('Beograd',), ('Beograd',), ('Novi Sad',), ('Novi Sad',), ('Novi Sad',), ('Novi Sad',), ('Novi Sad',), ('Ni\u0161',), ('Ni\u0161',), ('Ni\u0161',), ('Ni\u0161',), ('Ni\u0161',), ('Pri\u0161tina',), ('Pri\u0161tina',), ('Pri\u0161tina',), ('Pri\u0161tina',), ('Pri\u0161tina',), ('Kragujevac',), ('Kragujevac',), ('Kragujevac',), ('Kragujevac',), ('Kragujevac',), ('Podgorica',), ('Podgorica',), ('Podgorica',), ('Podgorica',), ('Podgorica',), ('Subotica',), ('Subotica',), ('Subotica',), ('Subotica',), ('Subotica',), ('Prizren',), ('Prizren',), ('Prizren',), ('Prizren',), ('Prizren',)]"
      ],
      "rewards": [
        0.15601783060921248
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.15601783060921248,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "783": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 783,
    "query": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
    "turn_history": {
      "actions": [
        "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'"
      ],
      "observations": [
        "[('44.7%', '22.7%')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "784": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 784,
    "query": "What is the last name of the student who has a cat that is 3 years old?",
    "turn_history": {
      "actions": [
        "SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3"
      ],
      "observations": [
        "[('Smith',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "785": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 785,
    "query": "What are the names of the singers who are not French citizens?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM singer WHERE Citizenship <> 'French'"
      ],
      "observations": [
        "[('Liliane Bettencourt',), ('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]"
      ],
      "rewards": [
        0.875
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.875,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "786": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 786,
    "query": "find the name of employee who was awarded the most times in the evaluation.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation GROUP BY Employee_ID ORDER BY COUNT(*) DESC LIMIT 1)"
      ],
      "observations": [
        "[('George Chuter',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "787": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 787,
    "query": "What is the first name and country code of the player with the most tours?",
    "turn_history": {
      "actions": [
        "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(*) DESC LIMIT 1)"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "788": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 788,
    "query": "What is the official language used in the country the name of whose head of state is Beatrix.",
    "turn_history": {
      "actions": [
        "SELECT Language FROM countrylanguage WHERE CountryCode = (     SELECT Code FROM country     WHERE HeadOfState = 'Beatrix' ) AND IsOfficial = 'T'"
      ],
      "observations": [
        "Error executing query: Subquery returns more than 1 row"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "789": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 789,
    "query": "what are all the addresses including line 1 and line 2?",
    "turn_history": {
      "actions": [
        "SELECT line_1, line_2 FROM Addresses"
      ],
      "observations": [
        "[('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "790": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 790,
    "query": "What is the most commmon hometowns for teachers?",
    "turn_history": {
      "actions": [
        "SELECT Hometown, COUNT(*) AS count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1"
      ],
      "observations": [
        "[('Blackrod Urban District', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "791": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 791,
    "query": "Show all template type codes and descriptions.",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types"
      ],
      "observations": [
        "[('AD', 'Advertisement'), ('BK', 'Book'), ('CV', 'CV'), ('PP', 'Paper'), ('PPT', 'Presentation')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "792": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 792,
    "query": "What is the name of the different car makers who produced a car in 1970?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Maker FROM car_makers WHERE Id IN (SELECT Id FROM model_list WHERE Maker IN (SELECT Make FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year = 1970)))"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "793": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 793,
    "query": "What are the names of documents that use templates with the code BK?",
    "turn_history": {
      "actions": [
        "SELECT Document_Name FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'"
      ],
      "observations": [
        "[('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "794": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 794,
    "query": "What is the total number of languages used in Aruba?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW'"
      ],
      "observations": [
        "[(4,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "795": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 795,
    "query": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
    "turn_history": {
      "actions": [
        "SELECT MAX(Horsepower), Maker FROM cars_data INNER JOIN model_list ON cars_data.Id = model_list.ModelId INNER JOIN car_makers ON model_list.Maker = car_makers.Maker WHERE Cylinders = 3"
      ],
      "observations": [
        "Error executing query: Column 'Maker' in field list is ambiguous"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "796": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 796,
    "query": "How many available features are there in total?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Other_Available_Features"
      ],
      "observations": [
        "[(3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "797": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 797,
    "query": "What are the codes of template types that have fewer than 3 templates?",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3)"
      ],
      "observations": [
        "[('CV',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "798": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 798,
    "query": "Return the lowest version number, along with its corresponding template type code.",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code, MIN(Version_Number) FROM Templates GROUP BY Template_Type_Code"
      ],
      "observations": [
        "[('AD', 7), ('BK', 2), ('CV', 5), ('PP', 0), ('PPT', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "799": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 799,
    "query": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Country FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey'"
      ],
      "observations": [
        "[('United Kingdom',), ('Italy',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "800": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 800,
    "query": "How many documents do we have?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Documents"
      ],
      "observations": [
        "[(14,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "801": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 801,
    "query": "How many courses in total are listed?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Courses"
      ],
      "observations": [
        "[(15,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "802": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 802,
    "query": "What is the average attendance of shows?",
    "turn_history": {
      "actions": [
        "SELECT AVG(Attendance) FROM show"
      ],
      "observations": [
        "Error executing query: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'show' at line 1"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "803": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 803,
    "query": "What is the maximum capacity and the average of all stadiums ?",
    "turn_history": {
      "actions": [
        "SELECT MAX(Capacity), AVG(Capacity) FROM stadium"
      ],
      "observations": [
        "[(52500, Decimal('10621.6667'))]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "804": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 804,
    "query": "How many states are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE"
      ],
      "observations": [
        "[(51,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "805": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 805,
    "query": "What are the countries that have greater surface area than any country in Europe?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "806": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 806,
    "query": "Show names for all stadiums except for stadiums having a concert in year 2014.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)"
      ],
      "observations": [
        "[('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',), ('Recreation Park',), ('Balmoor',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "807": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 807,
    "query": "what are the different names of the singers that have sales more than 300000?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000"
      ],
      "observations": [
        "[('Liliane Bettencourt',), ('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]"
      ],
      "rewards": [
        0.75
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.75,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "808": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 808,
    "query": "How is the math course described?",
    "turn_history": {
      "actions": [
        "SELECT course_description FROM Courses WHERE course_name = 'Math'"
      ],
      "observations": [
        "[('q',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "809": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 809,
    "query": "Which languages are spoken by only one country in republic governments?",
    "turn_history": {
      "actions": [
        "SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm LIKE '%Republic%'  GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1"
      ],
      "observations": [
        "[('Abhyasi',), ('Acholi',), ('Adja',), ('Aizo',), ('Ambo',), ('Amhara',), ('Ami',), ('Ane',), ('Arabic-French',), ('Arabic-French-English',), ('Araucan',), ('Asami',), ('Assyrian',), ('Atayal',), ('Avarian',), ('Bajad',), ('Bakhtyari',), ('Balante',), ('Bali',), ('Bambara',), ('Bamileke-bamum',), ('Banda',), ('Banja',), ('Bari',), ('Bariba',), ('Bashkir',), ('Bassa',), ('Batakki',), ('Beja',), ('Bemba',), ('Berberi',), ('Bhojpuri',), ('Bicol',), ('Bilin',), ('Bislama',), ('Boa',), ('Brahui',), ('Bubi',), ('Bugi',), ('Bullom-sherbro',), ('Bura',), ('Burmese',), ('Buryat',), ('Busansi',), ('Cakchiquel',), ('Caprivi',), ('Cebuano',), ('Chaga and Pare',), ('Chakma',), ('Chechen',), ('Chewa',), ('Chichewa',), ('Chilluk',), ('Chin',), ('Chuabo',), ('Chuvash',), ('Comorian',), ('Comorian-Arabic',), ('Comorian-French',), ('Comorian-madagassi',), ('Comorian-Swahili',), ('Cuna',), ('Czech and Moravian',), ('Dagara',), ('Dariganga',), ('Dhivehi',), ('Dinka',), ('Dong',), ('Dorbet',), ('Duala',), ('Dyula',), ('Edo',), ('Embera',), ('Fijian',), ('Fon',), ('Friuli',), ('Fur',), ('Ga-adangme',), ('Gagauzi',), ('Ganda',), ('Garifuna',), ('Garo',), ('Gbaya',), ('Georgiana',), ('Gilaki',), ('Gio',), ('Gisu',), ('Goajiro',), ('Gogo',), ('Gorane',), ('Grebo',), ('Guaym\u00ed',), ('Gujarati',), ('Gur',), ('Gurage',), ('Gusii',), ('Ha',), ('Hadareb',), ('Hadjarai',), ('Haiti Creole',), ('Hakka',), ('Hassaniya',), ('Haya',), ('Hebrew',), ('Hehet',), ('Herero',), ('Hiligaynon',), ('Hindko',), ('Hui',), ('Ibibio',), ('Ibo',), ('Icelandic',), ('Ijo',), ('Ilocano',), ('Irish',), ('Javanese',), ('Kaby\u00e9',), ('Kachin',), ('Kalenjin',), ('Kamba',), ('Kanem-bornu',), ('Kannada',), ('Karakalpak',), ('Karen',), ('Kavango',), ('Kayah',), ('Kekch\u00ed',), ('Khasi',), ('Khmer',), ('Khoekhoe',), ('Kiga',), ('Kikuyu',), ('Kirgiz',), ('Kirundi',), ('Kissi',), ('Kono-vai',), ('Kosrean',), ('Kotokoli',), ('Kuranko',), ('Lango',), ('Lao',), ('Lao-Soung',), ('Latvian',), ('Lezgian',), ('Limba',), ('Lotuko',), ('Lozi',), ('Luba',), ('Luchazi',), ('Lugbara',), ('Luguru',), ('Luhya',), ('Luimbe-nganguela',), ('Luo',), ('Luri',), ('Luvale',), ('Madura',), ('Maguindanao',), ('Maka',), ('Makonde',), ('Makua',), ('Malagasy',), ('Malajalam',), ('Maltese',), ('Mam',), ('Man',), ('Mandara',), ('Mandarin Chinese',), ('Mandjia',), ('Mandyako',), ('Mano',), ('Mant\u0161u',), ('Maranao',), ('Marendje',), ('Mari',), ('Marma',), ('Marshallese',), ('Masai',), ('Masana',), ('Mayo-kebbi',), ('Mazandarani',), ('Mboshi',), ('Mbum',), ('Mbundu',), ('Mende',), ('Meru',), ('Min',), ('Minangkabau',), ('Mixed Languages',), ('Mixtec',), ('Moba',), ('Mon',), ('Mon-khmer',), ('Mongo',), ('Moravian',), ('Mordva',), ('Mortlock',), ('Mpongwe',), ('Muong',), ('Nahua',), ('N\u00e1huatl',), ('Nama',), ('Naudemba',), ('Nauru',), ('Ngala and Bangi',), ('Ngbaka',), ('Ngoni',), ('Nkole',), ('Northsotho',), ('Nsenga',), ('Nubian Languages',), ('Nuer',), ('Nung',), ('Nyakusa',), ('Nyamwesi',), ('Nyaneka-nkhumbi',), ('Nyika',), ('Orija',), ('Oromo',), ('Osseetti',), ('Otom\u00ed',), ('Ouaddai',), ('Ovambo',), ('Ovimbundu',), ('Paiwan',), ('Palau',), ('Pampango',), ('Pangasinan',), ('Pashto',), ('Philippene Languages',), ('Pilipino',), ('Pohnpei',), ('Punu',), ('Punu-sira-nzebi',), ('Puyi',), ('Quich\u00e9',), ('Rakhine',), ('Rapa nui',), ('Ronga',), ('Rundi',), ('Saame',), ('Saho',), ('Sango',), ('Santhali',), ('Saraiki',), ('Sardinian',), ('Sena',), ('Senufo and Minianka',), ('Serer',), ('Seselwa',), ('Shambala',), ('Shan',), ('Sidamo',), ('Silesiana',), ('Sinaberberi',), ('Sindhi',), ('Singali',), ('Soga',), ('Somba',), ('Songhai',), ('Songhai-zerma',), ('Soqutri',), ('Southern Slavic Languages',), ('Southsotho',), ('Sranantonga',), ('Sumo',), ('Sunda',), ('Susu',), ('Swazi',), ('Swedish',), ('Tagalog',), ('Tandjile',), ('Telugu',), ('Temne',), ('Teso',), ('Tho',), ('Tibetan',), ('Tigre',), ('Tikar',), ('Tiv',), ('Tongan',), ('Tripuri',), ('Trukese',), ('Tswa',), ('Tujia',), ('Tukulor',), ('Turkana',), ('Udmur',), ('Uighur',), ('Ukrainian and Russian',), ('Venda',), ('Walaita',), ('Waray-waray',), ('Warrau',), ('Watyi',), ('Wolea',), ('Xhosa',), ('Yao',), ('Yap',), ('Yi',), ('Yucatec',), ('Zapotec',), ('Zenaga',), ('Zhuang',), ('Zulu',), ('[South]Mande',)]"
      ],
      "rewards": [
        0.7625
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.7625,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "810": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 810,
    "query": "For each continent, list its id, name, and how many countries it has?",
    "turn_history": {
      "actions": [
        "SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumOfCountries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent"
      ],
      "observations": [
        "[(1, 'america', 3), (2, 'europe', 6), (3, 'asia', 2), (4, 'africa', 2), (5, 'australia', 2)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "811": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 811,
    "query": "What is the document id with least number of paragraphs?",
    "turn_history": {
      "actions": [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1"
      ],
      "observations": [
        "[(3540024,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "812": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 812,
    "query": "What are the names and grades for each high schooler?",
    "turn_history": {
      "actions": [
        "SELECT name, grade FROM Highschooler"
      ],
      "observations": [
        "[('John', 12), ('Haley', 10), ('Alexis', 11), ('Jordan', 12), ('Austin', 11), ('Tiffany', 9), ('Kris', 10), ('Jessica', 11), ('Jordan', 9), ('Brittany', 10), ('Logan', 12), ('Gabriel', 9), ('Cassandra', 9), ('Andrew', 10), ('Gabriel', 11), ('Kyle', 12)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "813": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 813,
    "query": "How many car models are produced in the usa?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM model_list WHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'usa')"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "814": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 814,
    "query": "What are the names of the contestants whose names are not 'Jessie Alloway'",
    "turn_history": {
      "actions": [
        "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'"
      ],
      "observations": [
        "[('Edwina Burnam',), ('Tabatha Gehling',), ('Kelly Clauss',), ('Alana Bregman',), ('Jessie Eichman',), ('Allie Rogalski',), ('Nita Coster',), ('Kurt Walser',), ('Ericka Dieter',), ('Loraine NygrenTania Mattioli',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "815": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 815,
    "query": "What is the record company used by the greatest number of orchestras?",
    "turn_history": {
      "actions": [
        "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Num_Orchestras FROM orchestra GROUP BY Record_Company ORDER BY Num_Orchestras DESC LIMIT 1"
      ],
      "observations": [
        "[('Decca Records', 2)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "816": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 816,
    "query": "What is the last transcript release date?",
    "turn_history": {
      "actions": [
        "SELECT MAX(transcript_date) FROM Transcripts"
      ],
      "observations": [
        "[(datetime.datetime(2013, 6, 30, 13, 1, 40),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "817": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 817,
    "query": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
    "turn_history": {
      "actions": [
        "SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000"
      ],
      "observations": [
        "[(Decimal('480753000'), 1344763.722222)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "818": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 818,
    "query": "Give the number of Jetblue Airways flights.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "819": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 819,
    "query": "Return the number of likes that the high schooler named Kyle has.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')"
      ],
      "observations": [
        "[(1,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "820": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 820,
    "query": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
    "turn_history": {
      "actions": [
        "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'"
      ],
      "observations": [
        "[('Sky Famiglia',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "821": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 821,
    "query": "What are the cost and treatment type description of each treatment?",
    "turn_history": {
      "actions": [
        "SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
      ],
      "observations": [
        "[(Decimal('429.0000'), 'Physical examination'), (Decimal('313.0000'), 'Physical examination'), (Decimal('852.0000'), 'Physical examination'), (Decimal('407.0000'), 'Physical examination'), (Decimal('428.0000'), 'Physical examination'), (Decimal('147.0000'), 'Vaccination'), (Decimal('266.0000'), 'Vaccination'), (Decimal('668.0000'), 'Vaccination'), (Decimal('514.0000'), 'Vaccination'), (Decimal('945.0000'), 'Vaccination'), (Decimal('567.0000'), 'Take for a Walk'), (Decimal('139.0000'), 'Take for a Walk'), (Decimal('681.0000'), 'Take for a Walk'), (Decimal('349.0000'), 'Take for a Walk'), (Decimal('656.0000'), 'Take for a Walk')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "822": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 822,
    "query": "Which first names are used for professionals or owners but are not used as dog names?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT first_name FROM (     SELECT first_name FROM Owners     UNION     SELECT first_name FROM Professionals ) AS names WHERE names.first_name NOT IN (     SELECT name FROM Dogs )"
      ],
      "observations": [
        "[('Nora',), ('Melisa',), ('Jaclyn',), ('Tre',), ('Johann',), ('Kade',), ('Emelie',), ('Rolando',), ('Adelle',), ('Lorenz',), ('Gay',), ('Orlando',), ('Cindy',), ('Rachelle',), ('Heather',), ('Taryn',), ('Jayson',), ('Olaf',), ('Vernice',), ('Danny',), ('Ruben',), ('Velva',), ('Karley',), ('Monte',), ('Domenica',), ('Brady',), ('Winfield',), ('Ericka',), ('Sigurd',), ('Lesly',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "823": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 823,
    "query": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
    "turn_history": {
      "actions": [
        "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'"
      ],
      "observations": [
        "[('Justin Brown', 'France')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "824": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 824,
    "query": "find the names of loser and winner who played in the match with greatest number of minutes.",
    "turn_history": {
      "actions": [
        "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "825": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 825,
    "query": "Which model has the most version(make) of cars?",
    "turn_history": {
      "actions": [
        "SELECT Model, COUNT(DISTINCT MakeId) AS Num_Makes FROM car_names GROUP BY Model ORDER BY Num_Makes DESC LIMIT 1"
      ],
      "observations": [
        "[('ford', 53)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "826": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 826,
    "query": "How many countries are listed?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM countries"
      ],
      "observations": [
        "[(15,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "827": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 827,
    "query": "For each stadium, how many concerts play there?",
    "turn_history": {
      "actions": [
        "SELECT stadium.Name, COUNT(concert.concert_ID) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name"
      ],
      "observations": [
        "[(\"Stark's Park\", 1), ('Somerset Park', 2), ('Bayview Stadium', 0), ('Hampden Park', 0), ('Forthbank Stadium', 0), ('Gayfield Park', 0), ('Recreation Park', 1), ('Balmoor', 1), ('Glebe Park', 1)]"
      ],
      "rewards": [
        0.5555555555555556
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.5555555555555556,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "828": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 828,
    "query": "Show the names of singers that have more than one song.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1)"
      ],
      "observations": [
        "[('Liliane Bettencourt',), ('Christy Walton',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "829": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 829,
    "query": "How many cars have a larger accelerate than the car with the largest horsepower?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))"
      ],
      "observations": [
        "[(6,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "830": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 830,
    "query": "How many professionals did not operate any treatment on dogs?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)"
      ],
      "observations": [
        "[(7,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "831": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 831,
    "query": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland')"
      ],
      "observations": [
        "[(16514113,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "832": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 832,
    "query": "List the name of the conductor with the most years of work.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
      ],
      "observations": [
        "[('Robert Craft',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "833": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 833,
    "query": "What is the program id and the summary of the degree that has the most students enrolled?",
    "turn_history": {
      "actions": [
        "SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id = (     SELECT degree_program_id     FROM Student_Enrolment     GROUP BY degree_program_id     ORDER BY COUNT(*) DESC     LIMIT 1 )"
      ],
      "observations": [
        "[(9, 'Bachelor')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "834": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 834,
    "query": "Find the name of tourney that has more than 10 matches.",
    "turn_history": {
      "actions": [
        "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "835": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 835,
    "query": "List all cartoon directed by \"Ben Jones\".",
    "turn_history": {
      "actions": [
        "SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones'"
      ],
      "observations": [
        "[(1.0, 'The Rise of the Blue Beetle!', 'Ben Jones', 'Michael Jelenic', 'November14,2008', 101.0, '700'), (4.0, 'Day of the Dark Knight!', 'Ben Jones', 'J. M. DeMatteis', 'January2,2009', 104.0, '704'), (7.0, 'Dawn of the Dead Man!', 'Ben Jones', 'Steven Melching', 'January16,2009', 107.0, '707'), (10.0, 'The Eyes of Despero!', 'Ben Jones', 'J. M. DeMatteis', 'February6,2009', 110.0, '728')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "836": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 836,
    "query": "How many singers are from each country?",
    "turn_history": {
      "actions": [
        "SELECT Country, COUNT(*) FROM singer GROUP BY Country"
      ],
      "observations": [
        "[('Netherlands', 1), ('United States', 1), ('France', 4)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "837": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 837,
    "query": "What are the population, name and leader of the country with the largest area?",
    "turn_history": {
      "actions": [
        "SELECT Name, HeadOfState, Population FROM country ORDER BY SurfaceArea DESC LIMIT 1"
      ],
      "observations": [
        "[('Russian Federation', 'Vladimir Putin', 146934000)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "838": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 838,
    "query": "What are the number of votes from state 'NY' or 'CA'?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')"
      ],
      "observations": [
        "[(3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "839": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 839,
    "query": "What is the first name of every student who has a dog but does not have a cat?",
    "turn_history": {
      "actions": [
        "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog') AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')))"
      ],
      "observations": [
        "[('Tracy',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "840": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 840,
    "query": "Find the average weight for each pet type.",
    "turn_history": {
      "actions": [
        "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType"
      ],
      "observations": [
        "[('cat', 12.0), ('dog', 11.350000000000001)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "841": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 841,
    "query": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
    "turn_history": {
      "actions": [
        "SELECT TV_Channel.series_name, TV_series.Channel FROM TV_Channel INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'"
      ],
      "observations": [
        "[('Sky Radio', '700')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "842": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 842,
    "query": "Show the name of the conductor that has conducted the most number of orchestras.",
    "turn_history": {
      "actions": [
        "SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1"
      ],
      "observations": [
        "[('Antal Dor\u00e1ti',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "843": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 843,
    "query": "Which airline has abbreviation 'UAL'?",
    "turn_history": {
      "actions": [
        "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'"
      ],
      "observations": [
        "[('United Airlines',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "844": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 844,
    "query": "How many flights depart from 'APG'?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'"
      ],
      "observations": [
        "[(1,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "845": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 845,
    "query": "What is the count of singers?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM singer"
      ],
      "observations": [
        "[(8,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "846": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 846,
    "query": "What are the titles of the cartoons sorted alphabetically?",
    "turn_history": {
      "actions": [
        "SELECT Title FROM Cartoon ORDER BY Title ASC"
      ],
      "observations": [
        "[('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "847": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 847,
    "query": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
    "turn_history": {
      "actions": [
        "SELECT Has_Pet.StuID, COUNT(Has_Pet.PetID) AS num_pets FROM Has_Pet GROUP BY Has_Pet.StuID"
      ],
      "observations": [
        "[(1001, 1), (1002, 2)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "848": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 848,
    "query": "List the number of different series names and contents in the TV Channel table.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel"
      ],
      "observations": [
        "[(15, 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "849": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 849,
    "query": "Which shops' number products is above the average? Give me the shop names.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)"
      ],
      "observations": [
        "[('HJK',), ('FC Inter',), ('FC Lahti',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "850": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 850,
    "query": "What is the language spoken by the largest percentage of people in each country?",
    "turn_history": {
      "actions": [
        "SELECT CountryCode, Language FROM countrylanguage WHERE Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = cl.CountryCode)"
      ],
      "observations": [
        "Error executing query: Unknown column 'cl.CountryCode' in 'where clause'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "851": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 851,
    "query": "What is the full name of each car maker, along with its id and how many models it produces?",
    "turn_history": {
      "actions": [
        "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumModels FROM car_makers LEFT JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName"
      ],
      "observations": [
        "[(1, 'American Motor Company', 0), (2, 'Volkswagen', 0), (3, 'BMW', 0), (4, 'General Motors', 0), (5, 'Ford Motor Company', 0), (6, 'Chrysler', 0), (7, 'Citroen', 0), (8, 'Nissan Motors', 0), (9, 'Fiat', 0), (10, 'hi', 0), (11, 'Honda', 0), (12, 'Mazda', 0), (13, 'Daimler Benz', 0), (14, 'Opel', 0), (15, 'Peugeaut', 0), (16, 'Renault', 0), (17, 'Saab', 0), (18, 'Subaru', 0), (19, 'Toyota', 0), (20, 'Triumph', 0), (21, 'Volvo', 0), (22, 'Kia Motors', 0), (23, 'Hyundai', 0)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "852": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 852,
    "query": "Which owner owns the most dogs? List the owner id, first name and last name.",
    "turn_history": {
      "actions": [
        "SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (     SELECT owner_id     FROM Dogs     GROUP BY owner_id     ORDER BY COUNT(*) DESC     LIMIT 1 )"
      ],
      "observations": [
        "[(14, 'Rachelle', 'Funk')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "853": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 853,
    "query": "What are airlines that have some flight departing from airport 'AHD'?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT airlines.Airline FROM airlines INNER JOIN flights ON airlines.Airline = flights.Airline WHERE flights.SourceAirport = 'AHD'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "854": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 854,
    "query": "What are all the song names by singers who are older than average?",
    "turn_history": {
      "actions": [
        "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)"
      ],
      "observations": [
        "[('You',), ('Sun',), ('Gentleman',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "855": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 855,
    "query": "How many official languages does Afghanistan have?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "856": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 856,
    "query": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "turn_history": {
      "actions": [
        "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'"
      ],
      "observations": [
        "[('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "857": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 857,
    "query": "What is average life expectancy in the countries where English is not the official language?",
    "turn_history": {
      "actions": [
        "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'English')"
      ],
      "observations": [
        "[(65.4827,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "858": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 858,
    "query": "List singer names and number of concerts for each singer.",
    "turn_history": {
      "actions": [
        "SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name"
      ],
      "observations": [
        "[('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "859": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 859,
    "query": "What are the names and descriptions of all the sections?",
    "turn_history": {
      "actions": [
        "SELECT section_name, section_description FROM Sections"
      ],
      "observations": [
        "[('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "860": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 860,
    "query": "Return the names of poker players sorted by their earnings descending.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC"
      ],
      "observations": [
        "[('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "861": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 861,
    "query": "What is the content of the series Sky Radio?",
    "turn_history": {
      "actions": [
        "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'"
      ],
      "observations": [
        "[('music',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "862": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 862,
    "query": "What is the official language spoken in the country whose head of state is Beatrix?",
    "turn_history": {
      "actions": [
        "SELECT Language FROM countrylanguage  WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix') AND IsOfficial = 'T'"
      ],
      "observations": [
        "Error executing query: Subquery returns more than 1 row"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "863": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 863,
    "query": "What is the document id with 1 to 2 paragraphs?",
    "turn_history": {
      "actions": [
        "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2"
      ],
      "observations": [
        "[(3,), (80,), (3830,), (33930,), (50123,), (651512,), (3540024,), (16514113,), (385906526,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "864": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 864,
    "query": "What are the names of poker players whose earnings is higher than 300000?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Earnings > 300000"
      ],
      "observations": [
        "[('Aleksey Ostapenko',), ('Maksim Botin',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "865": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 865,
    "query": "What are the names of properties that are either houses or apartments with more than 1 room?",
    "turn_history": {
      "actions": [
        "SELECT property_name FROM Properties WHERE (property_type_code = 'APT' OR property_type_code = 'HSE') AND room_count > 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "866": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 866,
    "query": "What are the record companies of orchestras in descending order of years in which they were founded?",
    "turn_history": {
      "actions": [
        "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
      ],
      "observations": [
        "[('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "867": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 867,
    "query": "How many different loser names are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT loser_name) FROM matches"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "868": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 868,
    "query": "What is the average rank for winners in all matches?",
    "turn_history": {
      "actions": [
        "SELECT AVG(winner_rank) FROM matches"
      ],
      "observations": [
        "[(None,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "869": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 869,
    "query": "What are the major record formats of orchestras, sorted by their frequency?",
    "turn_history": {
      "actions": [
        "SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC"
      ],
      "observations": [
        "[('CD', 10), ('CD / LP', 1), ('DVD', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "870": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 870,
    "query": "Find the number of owners who do not own any dogs at this moment.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)"
      ],
      "observations": [
        "[(15,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "871": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 871,
    "query": "Give the name of the nation that uses the greatest amount of languages.",
    "turn_history": {
      "actions": [
        "SELECT country.Name FROM country JOIN (     SELECT CountryCode, COUNT(*) AS num_languages     FROM countrylanguage     GROUP BY CountryCode     ORDER BY num_languages DESC     LIMIT 1 ) AS lang_count ON country.Code = lang_count.CountryCode"
      ],
      "observations": [
        "[('Canada',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "872": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 872,
    "query": "What are the country codes for countries that do not speak English?",
    "turn_history": {
      "actions": [
        "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')"
      ],
      "observations": [
        "[('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BVT',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HMD',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IOT',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SGS',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]"
      ],
      "rewards": [
        0.9664804469273743
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.9664804469273743,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "873": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 873,
    "query": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
    "turn_history": {
      "actions": [
        "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) >= 2) AND Id IN (SELECT MakeId FROM car_names GROUP BY MakeId HAVING COUNT(*) > 3)"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "874": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 874,
    "query": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "turn_history": {
      "actions": [
        "SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang')"
      ],
      "observations": [
        "[('Sky Radio', 'Italy'), ('Music Box Italia', 'Italy'), ('MTV Hits', 'Italy'), ('MTV Rocks', 'United Kingdom'), ('MTV Dance', 'United Kingdom'), ('Classica', 'Italy')]"
      ],
      "rewards": [
        0.16666666666666666
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.16666666666666666,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "875": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 875,
    "query": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
    "turn_history": {
      "actions": [
        "SELECT District FROM shop GROUP BY District HAVING SUM(CASE WHEN Number_products < 3000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Number_products > 10000 THEN 1 ELSE 0 END) > 0"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "876": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 876,
    "query": "What are the countries that are not playing cartoons written by Todd Casey?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (     SELECT Channel     FROM Cartoon     WHERE Written_by = 'Todd Casey' )"
      ],
      "observations": [
        "[('Italy',), ('United Kingdom',), ('Poland',)]"
      ],
      "rewards": [
        0.3333333333333333
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.3333333333333333,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "877": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 877,
    "query": "Find the number of professionals who have not treated any dogs.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)"
      ],
      "observations": [
        "[(7,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "878": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 878,
    "query": "How many people live in Gelderland district?",
    "turn_history": {
      "actions": [
        "SELECT SUM(Population) FROM city WHERE District = 'Gelderland'"
      ],
      "observations": [
        "[(Decimal('545548'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "879": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 879,
    "query": "How many dogs have an age below the average?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)"
      ],
      "observations": [
        "[(9,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "880": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 880,
    "query": "What is the name of the country with the most car makers?",
    "turn_history": {
      "actions": [
        "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1"
      ],
      "observations": [
        "[('japan',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "881": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 881,
    "query": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
    "turn_history": {
      "actions": [
        "SELECT Model FROM model_list WHERE Maker != 'Ford Motor Company' AND ModelId IN (     SELECT Id     FROM cars_data     WHERE Weight < 3500 )"
      ],
      "observations": [
        "[('bmw',), ('buick',), ('cadillac',), ('dodge',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "882": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 882,
    "query": "Return the type code of the template type that the most templates belong to.",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
      ],
      "observations": [
        "[('BK',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "883": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 883,
    "query": "How many conductors are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM conductor"
      ],
      "observations": [
        "[(12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "884": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 884,
    "query": "How many templates have template type code CV?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "885": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 885,
    "query": "What are the names of the teachers and how many courses do they teach?",
    "turn_history": {
      "actions": [
        "SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS 'Number of Courses' FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name"
      ],
      "observations": [
        "[('Gustaaf Deloor', 1), ('Vicente Carretero', 1), ('Kearsley Brown', 1), ('Anne Walker', 2), ('Lucy Wong', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "886": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 886,
    "query": "What are the Asian countries which have a population larger than that of any country in Africa?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > ALL (SELECT Population FROM country WHERE Continent = 'Africa')"
      ],
      "observations": [
        "[('Bangladesh',), ('China',), ('Indonesia',), ('India',), ('Japan',), ('Pakistan',)]"
      ],
      "rewards": [
        0.11764705882352941
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.11764705882352941,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "887": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 887,
    "query": "How many concerts occurred in 2014 or 2015?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)"
      ],
      "observations": [
        "[(6,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "888": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 888,
    "query": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
    "turn_history": {
      "actions": [
        "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (     SELECT professional_id     FROM Treatments     WHERE cost_of_treatment < (         SELECT AVG(cost_of_treatment)         FROM Treatments     ) )"
      ],
      "observations": [
        "[('Domenica', 'Jacobs'), ('Vernice', 'Tillman'), ('Karley', 'Hyatt'), ('Ruben', \"O'Reilly\"), ('Monte', 'Kshlerin')]"
      ],
      "rewards": [
        0.3333333333333333
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.3333333333333333,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "889": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 889,
    "query": "List the name, date and result of each battle.",
    "turn_history": {
      "actions": [
        "SELECT name, date, result FROM battle"
      ],
      "observations": [
        "[('Battle of Adrianople', '14 April 1205', 'Bulgarian victory'), ('Battle of Serres', 'June 1205', 'Bulgarian victory'), ('Battle of Rusion', '31 January 1206', 'Bulgarian victory'), ('Battle of Rodosto', 'February 1206', 'Bulgarian victory'), ('Battle of Messinopolis', '4 September 1207', 'Bulgarian victory'), ('Battle of Boruy', 'June 1205', 'Bulgarian victory'), ('Battle of Philippopolis', '31 June 1208', 'Latin victory'), ('Siege of Constantinople', '1235', 'Two Year Truce')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "890": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 890,
    "query": "Which African countries have a smaller population than that of any country in Asia?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')"
      ],
      "observations": [
        "[('British Indian Ocean Territory',), ('Mayotte',), ('Saint Helena',), ('Sao Tome and Principe',), ('Seychelles',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "891": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 891,
    "query": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "turn_history": {
      "actions": [
        "SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')"
      ],
      "observations": [
        "[('Sky Radio', 'Italy'), ('Music Box Italia', 'Italy'), ('MTV Hits', 'Italy'), ('MTV Rocks', 'United Kingdom'), ('MTV Dance', 'United Kingdom'), ('MTV Dance', 'United Kingdom'), ('Classica', 'Italy'), ('MTV Dance', 'United Kingdom')]"
      ],
      "rewards": [
        0.125
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.125,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "892": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 892,
    "query": "Find the name and rank of the 3 youngest winners across all matches.",
    "turn_history": {
      "actions": [
        "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "893": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 893,
    "query": "Find the cities that have more than one employee under age 30.",
    "turn_history": {
      "actions": [
        "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1"
      ],
      "observations": [
        "[('Bath',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "894": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 894,
    "query": "Find the average number of staff working for the museums that were open before 2009.",
    "turn_history": {
      "actions": [
        "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009"
      ],
      "observations": [
        "[(Decimal('31.3333'),)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "895": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 895,
    "query": "How many different degree names are offered?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs"
      ],
      "observations": [
        "[(3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "896": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 896,
    "query": "Count the number of matches.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM matches"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "897": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 897,
    "query": "Which shops run with no employees? Find the shop names",
    "turn_history": {
      "actions": [
        "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)"
      ],
      "observations": [
        "[('FC Honka',), ('KuPS',), ('IFK Mariehamn',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "898": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 898,
    "query": "find the number of players for each country.",
    "turn_history": {
      "actions": [
        "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "899": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 899,
    "query": "For each shop, return the number of employees working there and the name of the shop.",
    "turn_history": {
      "actions": [
        "SELECT shop.Name, COUNT(hiring.Employee_ID) AS num_employees FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID"
      ],
      "observations": [
        "[('FC Haka', 2), ('HJK', 1), ('FC Honka', 0), ('FC Inter', 1), ('FF Jaro', 1), ('FC KooTeePee', 1), ('KuPS', 0), ('FC Lahti', 1), ('IFK Mariehamn', 0)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "900": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 900,
    "query": "Give the names of nations that speak both English and French.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 'T') ORDER BY Name"
      ],
      "observations": [
        "[('Canada',), ('Seychelles',), ('Vanuatu',)]"
      ],
      "rewards": [
        0.5
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.5,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "901": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 901,
    "query": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
    "turn_history": {
      "actions": [
        "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3"
      ],
      "observations": [
        "[('A Love of a Lifetime', '5.8'), ('Friendly Skies', '5.3'), ('Game Three', '4.4')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "902": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 902,
    "query": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
    "turn_history": {
      "actions": [
        "SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumCountries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent"
      ],
      "observations": [
        "[(1, 'america', 3), (2, 'europe', 6), (3, 'asia', 2), (4, 'africa', 2), (5, 'australia', 2)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "903": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 903,
    "query": "How much surface area do the countires in the Carribean cover together?",
    "turn_history": {
      "actions": [
        "SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean'"
      ],
      "observations": [
        "[(None,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "904": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 904,
    "query": "What are the names , themes , and number of singers for every concert ?",
    "turn_history": {
      "actions": [
        "SELECT concert_Name, Theme, COUNT(Singer_ID) AS Number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID"
      ],
      "observations": [
        "[('Auditions', 'Free choice', 3), ('Super bootcamp', 'Free choice 2', 2), ('Home Visits', 'Bleeding Love', 1), ('Week 1', 'Wide Awake', 1), ('Week 1', 'Happy Tonight', 2), ('Week 2', 'Party All Night', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "905": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 905,
    "query": "What is maximum and minimum death toll caused each time?",
    "turn_history": {
      "actions": [
        "SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death"
      ],
      "observations": [
        "[(29, 0)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "906": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 906,
    "query": "What is the episode for the TV series named \"Sky Radio\"?",
    "turn_history": {
      "actions": [
        "SELECT Episode FROM TV_series WHERE series_name = 'Sky Radio'"
      ],
      "observations": [
        "Error executing query: Unknown column 'series_name' in 'where clause'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "907": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 907,
    "query": "What are the names of nations speak both English and French?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2"
      ],
      "observations": [
        "[('Canada',), ('Monaco',), ('Seychelles',), ('United States',), ('Vanuatu',), ('Virgin Islands, U.S.',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "908": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 908,
    "query": "What are the notes of the death events which has substring 'East'?",
    "turn_history": {
      "actions": [
        "SELECT note FROM death WHERE note LIKE '%East%'"
      ],
      "observations": [
        "[('East Champaran, Bihar',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "909": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 909,
    "query": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
    "turn_history": {
      "actions": [
        "SELECT cars_data.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3"
      ],
      "observations": [
        "Error executing query: Unknown column 'cars_data.MakeId' in 'field list'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "910": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 910,
    "query": "How many friends does each student have?",
    "turn_history": {
      "actions": [
        "SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id"
      ],
      "observations": [
        "[(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "911": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 911,
    "query": "What is the average expected life expectancy for countries in the region of Central Africa?",
    "turn_history": {
      "actions": [
        "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'"
      ],
      "observations": [
        "[(50.31111,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "912": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 912,
    "query": "Count the number of high schoolers.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Highschooler"
      ],
      "observations": [
        "[(16,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "913": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 913,
    "query": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
    "turn_history": {
      "actions": [
        "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) >= 2"
      ],
      "observations": [
        "[('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "914": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 914,
    "query": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
    "turn_history": {
      "actions": [
        "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (     SELECT professional_id     FROM Treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 )"
      ],
      "observations": [
        "[(1, 'Braun', '(275)939-2435x80863'), (8, 'Hyatt', '328.842.3792'), (9, 'Kshlerin', '962-983-8109x3509')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "915": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 915,
    "query": "What are the different template type codes?",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code FROM Ref_Template_Types"
      ],
      "observations": [
        "[('AD',), ('BK',), ('CV',), ('PP',), ('PPT',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "916": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 916,
    "query": "What is name of the country that speaks the largest number of languages?",
    "turn_history": {
      "actions": [
        "SELECT country.Name FROM country JOIN (     SELECT CountryCode, COUNT(*) AS numLanguages     FROM countrylanguage     WHERE IsOfficial = 'T'     GROUP BY CountryCode     ORDER BY numLanguages DESC     LIMIT 1 ) AS langCount ON country.Code = langCount.CountryCode"
      ],
      "observations": [
        "[('Switzerland',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "917": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 917,
    "query": "What is the first name and country code of the oldest player?",
    "turn_history": {
      "actions": [
        "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "918": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 918,
    "query": "List the earnings of poker players in descending order.",
    "turn_history": {
      "actions": [
        "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
      ],
      "observations": [
        "[(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "919": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 919,
    "query": "Who is the first student to register? List the first name, middle name and last name.",
    "turn_history": {
      "actions": [
        "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
      ],
      "observations": [
        "[('Timmothy', 'Anna', 'Ward')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "920": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 920,
    "query": "What are the locations and names of all stations with capacity between 5000 and 10000?",
    "turn_history": {
      "actions": [
        "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "921": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 921,
    "query": "What are flight numbers of flights arriving at Airport \"APG\"?",
    "turn_history": {
      "actions": [
        "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "922": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 922,
    "query": "How many professionals have performed any treatment to dogs?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT professional_id) FROM Treatments"
      ],
      "observations": [
        "[(8,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "923": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 923,
    "query": "List the names of people that are not poker players.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
      ],
      "observations": [
        "[('Roman Bragin',), ('Sergey Grankin',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "924": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 924,
    "query": "How many car makers are there in france?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM car_makers WHERE Country = 'France'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "925": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 925,
    "query": "What are the ids and names of each document, as well as the number of paragraphs in each?",
    "turn_history": {
      "actions": [
        "SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name"
      ],
      "observations": [
        "[(1, 'Introduction of OS', 0), (3, 'Summer Show', 1), (76, 'Robbin CV', 0), (80, 'Welcome to NY', 2), (82, 'Data base', 0), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (801801, 'How to read a book', 0), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]"
      ],
      "rewards": [
        0.7142857142857143
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.7142857142857143,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "926": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 926,
    "query": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
    "turn_history": {
      "actions": [
        "SELECT continent, SUM(population), AVG(lifeexpectancy) FROM country WHERE lifeexpectancy < 72 GROUP BY continent"
      ],
      "observations": [
        "[('Asia', Decimal('3480378000'), 63.91622), ('Africa', Decimal('768579000'), 50.90377), ('Europe', Decimal('267630700'), 69.0), ('North America', Decimal('138422000'), 67.61538), ('South America', Decimal('260351000'), 67.62857), ('Oceania', Decimal('6866000'), 66.20769)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "927": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 927,
    "query": "Which Asian countries have a population that is larger than any country in Africa?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')"
      ],
      "observations": [
        "[('Bangladesh',), ('China',), ('Indonesia',), ('India',), ('Japan',), ('Pakistan',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "928": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 928,
    "query": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
    "turn_history": {
      "actions": [
        "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)"
      ],
      "observations": [
        "[(1, 'Employee', 'deanna.schuster@example.com'), (2, 'Employee', 'lucile.shanahan@example.org'), (3, 'Employee', 'uboehm@example.org'), (11, 'Employee', 'west.eula@example.net'), (12, 'Veterenari', 'marquardt.furman@example.org'), (13, 'Veterenari', 'delphine29@example.com'), (15, 'Employee', 'jeichmann@example.com')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "929": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 929,
    "query": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'"
      ],
      "observations": [
        "[('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Lucy Wong',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "930": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 930,
    "query": "List the name and tonnage ordered by in descending alphaetical order for the names.",
    "turn_history": {
      "actions": [
        "SELECT name, tonnage FROM ship ORDER BY name DESC"
      ],
      "observations": [
        "[('Three Brothers', 't'), ('Mary', 't'), ('Lettice', 't'), ('HMS Avon', '391'), ('HMS Atalanta', '225'), ('Bon Accord', 't'), ('Bacchus', 't')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "931": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 931,
    "query": "What are  the different countries with singers above age 20?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Country FROM singer WHERE Age > 20"
      ],
      "observations": [
        "[('Netherlands',), ('United States',), ('France',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "932": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 932,
    "query": "Find the average and maximum age for each type of pet.",
    "turn_history": {
      "actions": [
        "SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType"
      ],
      "observations": [
        "[('cat', Decimal('3.0000'), 3), ('dog', Decimal('1.5000'), 2)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "933": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 933,
    "query": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
    "turn_history": {
      "actions": [
        "SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'"
      ],
      "observations": [
        "[('Battle of Adrianople', 'Bulgarian victory'), ('Battle of Serres', 'Bulgarian victory'), ('Battle of Rusion', 'Bulgarian victory'), ('Battle of Rodosto', 'Bulgarian victory'), ('Battle of Messinopolis', 'Bulgarian victory'), ('Siege of Constantinople', 'Two Year Truce')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "934": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 934,
    "query": "Show ids for all templates not used by any document.",
    "turn_history": {
      "actions": [
        "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents)"
      ],
      "observations": [
        "[(19,), (9,), (23,), (15,), (16,), (18,), (24,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "935": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 935,
    "query": "Which grades have 4 or more high schoolers?",
    "turn_history": {
      "actions": [
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4"
      ],
      "observations": [
        "[(12,), (10,), (11,), (9,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "936": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 936,
    "query": "What are the names of the nations with the 3 lowest populations?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
      ],
      "observations": [
        "[('Antarctica',), ('Bouvet Island',), ('French Southern territories',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "937": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 937,
    "query": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "turn_history": {
      "actions": [
        "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "938": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 938,
    "query": "Show the date and id of the transcript with at least 2 course results.",
    "turn_history": {
      "actions": [
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (     SELECT transcript_id FROM Transcript_Contents     GROUP BY transcript_id     HAVING COUNT(student_course_id) >= 2 )"
      ],
      "observations": [
        "[(5, datetime.datetime(2013, 6, 30, 13, 1, 40)), (6, datetime.datetime(2010, 12, 13, 10, 55, 15)), (8, datetime.datetime(1975, 5, 6, 12, 4, 47)), (15, datetime.datetime(1998, 11, 22, 12, 18, 29))]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "939": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 939,
    "query": "How many TV Channel using language English?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'"
      ],
      "observations": [
        "[(3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "940": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 940,
    "query": "What are the paragraph texts for the document with the name 'Customer reviews'?",
    "turn_history": {
      "actions": [
        "SELECT Paragraph_Text FROM Paragraphs  INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID  WHERE Documents.Document_Name = 'Customer reviews'"
      ],
      "observations": [
        "[('Korea',), ('Ukraine',), ('Korea',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "941": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 941,
    "query": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "942": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 942,
    "query": "What are the names and ranks of the three youngest winners across all matches?",
    "turn_history": {
      "actions": [
        "SELECT winner_name, winner_rank FROM matches WHERE winner_age IN (     SELECT winner_age     FROM matches     ORDER BY winner_age ASC     LIMIT 3 ) ORDER BY winner_age ASC"
      ],
      "observations": [
        "Error executing query: This version of MySQL doesn't yet support 'LIMIT & IN/ALL/ANY/SOME subquery'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "943": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 943,
    "query": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
    "turn_history": {
      "actions": [
        "SELECT Cartoon.Title  FROM Cartoon  INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id  WHERE TV_Channel.series_name = 'Sky Radio'"
      ],
      "observations": [
        "[('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "944": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 944,
    "query": "What are the names of the winner and loser who played in the longest match?",
    "turn_history": {
      "actions": [
        "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "945": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 945,
    "query": "Show the hometowns shared by at least two teachers.",
    "turn_history": {
      "actions": [
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) > 1"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "946": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 946,
    "query": "Tell me the age of the oldest dog.",
    "turn_history": {
      "actions": [
        "SELECT MAX(age) FROM Dogs"
      ],
      "observations": [
        "[('9',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "947": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 947,
    "query": "Show different citizenship of singers and the number of singers of each citizenship.",
    "turn_history": {
      "actions": [
        "SELECT Citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Citizenship"
      ],
      "observations": [
        "[('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "948": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 948,
    "query": "Which city and country is the Alton airport at?",
    "turn_history": {
      "actions": [
        "SELECT City, Country FROM airports WHERE AirportName = 'Alton'"
      ],
      "observations": [
        "[('Alton ', 'United States ')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "949": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 949,
    "query": "Return the name of the high school student with the most friends.",
    "turn_history": {
      "actions": [
        "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY COUNT(f.friend_id) DESC LIMIT 1"
      ],
      "observations": [
        "[('Andrew',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "950": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 950,
    "query": "How many flights depart from City Aberdeen?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "951": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 951,
    "query": "Return the ids corresponding to templates with the description 'Presentation'.",
    "turn_history": {
      "actions": [
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')"
      ],
      "observations": [
        "[(6,), (7,), (10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "952": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 952,
    "query": "What are the names of the employees who never received any evaluation?",
    "turn_history": {
      "actions": [
        "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
      ],
      "observations": [
        "[('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "953": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 953,
    "query": "find the id, name and age for visitors who visited some museums more than once.",
    "turn_history": {
      "actions": [
        "SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(DISTINCT visit.Museum_ID) > 1"
      ],
      "observations": [
        "[(3, 'Arjen Robben', 27), (5, 'Fernando Gago', 36), (6, 'Rafael van der Vaart', 25)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "954": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 954,
    "query": "What are the first names of every student who has a cat or dog as a pet?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType IN ('cat', 'dog')"
      ],
      "observations": [
        "[('Linda',), ('Tracy',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "955": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 955,
    "query": "What are the names, countries, and ages for every singer in descending order of age?",
    "turn_history": {
      "actions": [
        "SELECT Name, Country, Age FROM singer ORDER BY Age DESC"
      ],
      "observations": [
        "[('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "956": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 956,
    "query": "Return the ids of templates that have the code PP or PPT.",
    "turn_history": {
      "actions": [
        "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')"
      ],
      "observations": [
        "[(1,), (18,), (22,), (24,), (25,), (6,), (7,), (10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "957": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 957,
    "query": "Return the names of conductors that do not have the nationality \"USA\".",
    "turn_history": {
      "actions": [
        "SELECT Name FROM conductor WHERE Nationality != 'USA'"
      ],
      "observations": [
        "[('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "958": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 958,
    "query": "What are the makers and models?",
    "turn_history": {
      "actions": [
        "SELECT Maker, Model FROM model_list"
      ],
      "observations": [
        "[(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "959": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 959,
    "query": "Which model of the car has the minimum horsepower?",
    "turn_history": {
      "actions": [
        "SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)"
      ],
      "observations": [
        "Error executing query: Unknown column 'Model' in 'field list'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "960": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 960,
    "query": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Model FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Maker INNER JOIN cars_data ON car_makers.Id = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "961": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 961,
    "query": "What are the ids of the students who do not own cats as pets?",
    "turn_history": {
      "actions": [
        "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')"
      ],
      "observations": [
        "[(1002,), (1003,), (1004,), (1005,), (1006,), (1007,), (1008,), (1009,), (1010,), (1011,), (1012,), (1014,), (1015,), (1016,), (1017,), (1018,), (1019,), (1020,), (1021,), (1022,), (1023,), (1024,), (1025,), (1026,), (1027,), (1028,), (1029,), (1030,), (1031,), (1032,), (1033,), (1034,), (1035,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "962": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 962,
    "query": "How much does each charge type costs? List both charge type and amount.",
    "turn_history": {
      "actions": [
        "SELECT charge_type, charge_amount FROM Charges"
      ],
      "observations": [
        "[('Daily Acco', Decimal('98.0000')), ('Drugs', Decimal('322.0000')), ('Health Che', Decimal('640.0000'))]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "963": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 963,
    "query": "Show the ID of the high schooler named Kyle.",
    "turn_history": {
      "actions": [
        "SELECT ID FROM Highschooler WHERE name = 'Kyle'"
      ],
      "observations": [
        "[(1934,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "964": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 964,
    "query": "Show the date of the transcript which shows the least number of results, also list the id.",
    "turn_history": {
      "actions": [
        "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   ORDER BY COUNT(*) ASC   LIMIT 1 )"
      ],
      "observations": [
        "Error executing query: This version of MySQL doesn't yet support 'LIMIT & IN/ALL/ANY/SOME subquery'"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        false
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "965": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 965,
    "query": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
    "turn_history": {
      "actions": [
        "SELECT created, state, phone_number FROM VOTES WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')"
      ],
      "observations": [
        "[(datetime.datetime(2018, 3, 10, 0, 3, 21), 'NY', 2147483647)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "966": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 966,
    "query": "Give the mean life expectancy of countries in which English is not the official language.",
    "turn_history": {
      "actions": [
        "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'English')"
      ],
      "observations": [
        "[(65.4827,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "967": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 967,
    "query": "What are the ids of all tv channels that have more than 2 TV channels?",
    "turn_history": {
      "actions": [
        "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "968": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 968,
    "query": "Count the number of friends Kyle has.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id WHERE H.name = 'Kyle'"
      ],
      "observations": [
        "[(1,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "969": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 969,
    "query": "What is the document id and name with greatest number of paragraphs?",
    "turn_history": {
      "actions": [
        "SELECT Documents.Document_ID, Documents.Document_Name FROM Documents INNER JOIN (     SELECT Document_ID, COUNT(*) AS num_paragraphs     FROM Paragraphs     GROUP BY Document_ID     ORDER BY num_paragraphs DESC     LIMIT 1 ) AS max_paragraphs ON Documents.Document_ID = max_paragraphs.Document_ID"
      ],
      "observations": [
        "[(2394, 'Customer reviews')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "970": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 970,
    "query": "Show the name and theme for all concerts and the number of singers in each concert.",
    "turn_history": {
      "actions": [
        "SELECT concert_Name, Theme, COUNT(Singer_ID) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID"
      ],
      "observations": [
        "[('Auditions', 'Free choice', 3), ('Super bootcamp', 'Free choice 2', 2), ('Home Visits', 'Bleeding Love', 1), ('Week 1', 'Wide Awake', 1), ('Week 1', 'Happy Tonight', 2), ('Week 2', 'Party All Night', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "971": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 971,
    "query": "Show name of all students who have some friends and also are liked by someone else.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT h.name FROM Highschooler h, Friend f, Likes l WHERE h.ID = f.student_id AND h.ID = l.student_id AND f.friend_id = l.liked_id"
      ],
      "observations": [
        "[('Gabriel',), ('Jessica',)]"
      ],
      "rewards": [
        0.25
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.25,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "972": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 972,
    "query": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
    "turn_history": {
      "actions": [
        "SELECT Accelerate FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  WHERE car_names.Model = 'hornet sportabout (sw)' AND car_names.Make = 'amc'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "973": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 973,
    "query": "Give the names of the nations that were founded after 1950.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM country WHERE IndepYear > 1950"
      ],
      "observations": [
        "[('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('C\u00f4te d\u2019Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "974": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 974,
    "query": "How many airports do we have?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM airports"
      ],
      "observations": [
        "[(100,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "975": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 975,
    "query": "What are the towns from which at least two teachers come from?",
    "turn_history": {
      "actions": [
        "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "976": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 976,
    "query": "Show the name of the teacher for the math course.",
    "turn_history": {
      "actions": [
        "SELECT teacher.Name  FROM teacher  JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID  JOIN course ON course_arrange.Course_ID = course.Course_ID  WHERE course.Course = 'math'"
      ],
      "observations": [
        "[('Vicente Carretero',), ('Kearsley Brown',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "977": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 977,
    "query": "What are the birth years and citizenships of the singers?",
    "turn_history": {
      "actions": [
        "SELECT Birth_Year, Citizenship FROM singer"
      ],
      "observations": [
        "[(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "978": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 978,
    "query": "What is the id and type code for the template used by the most documents?",
    "turn_history": {
      "actions": [
        "SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_ID = (     SELECT Documents.Template_ID     FROM Documents     GROUP BY Documents.Template_ID     ORDER BY COUNT(*) DESC     LIMIT 1 )"
      ],
      "observations": [
        "[(11, 'BK')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "979": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 979,
    "query": "How many people are there of each nationality?",
    "turn_history": {
      "actions": [
        "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality"
      ],
      "observations": [
        "[('Russia', 6), ('Bulgaria', 1)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "980": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 980,
    "query": "Find the kind of program which most number of students are enrolled in?",
    "turn_history": {
      "actions": [
        "SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id = (     SELECT degree_program_id     FROM Student_Enrolment     GROUP BY degree_program_id     ORDER BY COUNT(*) DESC     LIMIT 1 )"
      ],
      "observations": [
        "[('Bachelor',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "981": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 981,
    "query": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "turn_history": {
      "actions": [
        "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "982": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 982,
    "query": "Show the name and the release year of the song by the youngest singer.",
    "turn_history": {
      "actions": [
        "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)"
      ],
      "observations": [
        "[('Tribal King', '2016')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "983": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 983,
    "query": "List the name of singers whose citizenship is not \"France\".",
    "turn_history": {
      "actions": [
        "SELECT Name FROM singer WHERE Citizenship <> 'France'"
      ],
      "observations": [
        "[('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "984": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 984,
    "query": "Find the name of the employee who got the highest one time bonus.",
    "turn_history": {
      "actions": [
        "SELECT Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation                      WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation))"
      ],
      "observations": [
        "[('Louis Deacon',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "985": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 985,
    "query": "What are the names and id of courses having at most 2 sections?",
    "turn_history": {
      "actions": [
        "SELECT course_id, course_name FROM Courses WHERE course_id IN (     SELECT course_id FROM Sections     GROUP BY course_id     HAVING COUNT(*) <= 2 )"
      ],
      "observations": [
        "[(1, 'ds'), (2, 'math'), (4, 'en'), (5, 'fr'), (6, 'la'), (7, 'cal'), (8, 'nlp'), (9, 'dl'), (10, 'ml'), (12, 'db'), (14, 'pl')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "986": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 986,
    "query": "Give the flight numbers of flights leaving from APG.",
    "turn_history": {
      "actions": [
        "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'"
      ],
      "observations": [
        "[(28,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "987": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 987,
    "query": "What are the name, independence year, and surface area of the country with the smallest population?",
    "turn_history": {
      "actions": [
        "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1"
      ],
      "observations": [
        "[('Antarctica', None, 13120000.0)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "988": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 988,
    "query": "Show all template type codes and number of templates for each.",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code, COUNT(*) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code"
      ],
      "observations": [
        "[('AD', 3), ('BK', 6), ('CV', 2), ('PP', 5), ('PPT', 3)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "989": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 989,
    "query": "What is the average earnings of poker players with height higher than 200?",
    "turn_history": {
      "actions": [
        "SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200"
      ],
      "observations": [
        "[(309445.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "990": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 990,
    "query": "What is the number of cars with a horsepower greater than 150?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150"
      ],
      "observations": [
        "[(10,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "991": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 991,
    "query": "Return the id and name of the document with the most paragraphs.",
    "turn_history": {
      "actions": [
        "SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN (     SELECT Document_ID, COUNT(*) AS num_paragraphs     FROM Paragraphs     GROUP BY Document_ID     ORDER BY num_paragraphs DESC     LIMIT 1 ) p ON d.Document_ID = p.Document_ID"
      ],
      "observations": [
        "[(2394, 'Customer reviews')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "992": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 992,
    "query": "How many people live in countries that do not speak English?",
    "turn_history": {
      "actions": [
        "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')"
      ],
      "observations": [
        "[(Decimal('5619590650'),)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "993": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 993,
    "query": "Find the type and weight of the youngest pet.",
    "turn_history": {
      "actions": [
        "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)"
      ],
      "observations": [
        "[('dog', 9.3)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "994": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 994,
    "query": "Which states have both owners and professionals living there?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT state FROM Owners WHERE state IN (SELECT state FROM Professionals)"
      ],
      "observations": [
        "[('Wisconsin',), ('Indiana',), ('Mississippi',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "995": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 995,
    "query": "Return the number of United Airlines flights leaving from AHD Airport.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'"
      ],
      "observations": [
        "[(0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "996": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 996,
    "query": "Give me all the information about hiring.",
    "turn_history": {
      "actions": [
        "SELECT * FROM hiring"
      ],
      "observations": [
        "[(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "997": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 997,
    "query": "Show the names of students who have at least 2 likes.",
    "turn_history": {
      "actions": [
        "SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 2"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "998": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 998,
    "query": "Count the number of templates of the type CV.",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "999": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 999,
    "query": "Find the first name of students who have cat or dog pet.",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType IN ('cat', 'dog')"
      ],
      "observations": [
        "[('Linda',), ('Tracy',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "1000": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1000,
    "query": "What are the names of the high schoolers and how many friends does each have?",
    "turn_history": {
      "actions": [
        "SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY num_friends DESC, Highschooler.name ASC"
      ],
      "observations": [
        "[('Andrew', 3), ('Alexis', 2), ('Gabriel', 2), ('Jordan', 2), ('Kris', 2), ('Austin', 1), ('Cassandra', 1), ('Gabriel', 1), ('Haley', 1), ('Jessica', 1), ('Jordan', 1), ('Kyle', 1), ('Logan', 1), ('Tiffany', 1), ('Brittany', 0), ('John', 0)]"
      ],
      "rewards": [
        0.875
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.875,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "1001": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1001,
    "query": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
    "turn_history": {
      "actions": [
        "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974"
      ],
      "observations": [
        "[(4141,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "1002": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1002,
    "query": "What are flight numbers of flights departing from City \"Aberdeen \"?",
    "turn_history": {
      "actions": [
        "SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "1003": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1003,
    "query": "How many contestants did not get voted?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)"
      ],
      "observations": [
        "[(8,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "1004": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1004,
    "query": "Return the codes of countries that do not speak English and do not have Republics for governments.",
    "turn_history": {
      "actions": [
        "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND GovernmentForm NOT LIKE '%Republic%'"
      ],
      "observations": [
        "[('ABW',), ('AFG',), ('AND',), ('ANT',), ('ARE',), ('ATA',), ('ATF',), ('BEL',), ('BHR',), ('BHS',), ('BRN',), ('BTN',), ('BVT',), ('CHE',), ('COK',), ('DNK',), ('ESH',), ('ESP',), ('FRO',), ('GLP',), ('GRD',), ('GRL',), ('GUF',), ('HMD',), ('IOT',), ('JAM',), ('JOR',), ('JPN',), ('KHM',), ('KWT',), ('LBY',), ('LIE',), ('LUX',), ('MAC',), ('MAR',), ('MCO',), ('MTQ',), ('MYS',), ('MYT',), ('NCL',), ('NLD',), ('NOR',), ('NPL',), ('OMN',), ('PCN',), ('PNG',), ('PRI',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('SAU',), ('SGS',), ('SJM',), ('SLB',), ('SPM',), ('SWE',), ('SWZ',), ('THA',), ('TMP',), ('VAT',), ('WLF',)]"
      ],
      "rewards": [
        0.5975609756097561
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.5975609756097561,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "1005": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1005,
    "query": "How many transcripts are listed?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Transcripts"
      ],
      "observations": [
        "[(15,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "1006": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1006,
    "query": "What is the version number and template type code for the template with version number later than 5?",
    "turn_history": {
      "actions": [
        "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5"
      ],
      "observations": [
        "[(8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "1007": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1007,
    "query": "List each owner's first name, last name, and the size of his for her dog.",
    "turn_history": {
      "actions": [
        "SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code"
      ],
      "observations": [
        "[('Jaclyn', 'Stoltenberg', 'Large'), ('Gay', 'Feil', 'Large'), ('Rachelle', 'Funk', 'Large'), ('Cindy', 'Schmitt', 'Large'), ('Nora', 'Haley', 'Medium'), ('Emelie', 'Mertz', 'Medium'), ('Johann', 'Fisher', 'Medium'), ('Jaclyn', 'Stoltenberg', 'Medium'), ('Melisa', 'DuBuque', 'Medium'), ('Kade', 'Rippin', 'Medium'), ('Orlando', 'Price', 'Medium'), ('Rachelle', 'Funk', 'Medium'), ('Lorenz', 'Nicolas', 'Medium'), ('Rachelle', 'Funk', 'Small'), ('Rolando', 'Prohaska', 'Small')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "1008": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1008,
    "query": "Find the number of employees hired in each shop; show the shop name as well.",
    "turn_history": {
      "actions": [
        "SELECT shop.Name, COUNT(hiring.Employee_ID) AS Num_Employees_Hired FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name"
      ],
      "observations": [
        "[('FC Haka', 2), ('HJK', 1), ('FC Inter', 1), ('FF Jaro', 1), ('FC KooTeePee', 1), ('FC Lahti', 1)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "1009": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1009,
    "query": "Show all the grades of the high schoolers.",
    "turn_history": {
      "actions": [
        "SELECT grade FROM Highschooler"
      ],
      "observations": [
        "[(12,), (10,), (11,), (12,), (11,), (9,), (10,), (11,), (9,), (10,), (12,), (9,), (9,), (10,), (11,), (12,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "1010": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1010,
    "query": "How many different nationalities do conductors have?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT Nationality) FROM conductor"
      ],
      "observations": [
        "[(3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "1011": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1011,
    "query": "What are the average ages of losers and winners across matches?",
    "turn_history": {
      "actions": [
        "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches"
      ],
      "observations": [
        "[(None, None)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "1012": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1012,
    "query": "What are the distinct states and create time of all votes?",
    "turn_history": {
      "actions": [
        "SELECT DISTINCT state, created FROM VOTES"
      ],
      "observations": [
        "[('NY', datetime.datetime(2018, 3, 10, 0, 3, 21)), ('NY', datetime.datetime(2018, 3, 10, 0, 3, 36)), ('CA', datetime.datetime(2018, 3, 10, 0, 3, 39)), ('NJ', datetime.datetime(2018, 3, 10, 0, 3, 40))]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "1013": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1013,
    "query": "Which regions speak Dutch or English?",
    "turn_history": {
      "actions": [
        "SELECT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('Dutch', 'English') AND IsOfficial = 'T') GROUP BY Region"
      ],
      "observations": [
        "[('Caribbean',), ('Polynesia',), ('Australia and New Zealand',), ('Western Europe',), ('Central America',), ('North America',), ('South America',), ('British Islands',), ('Southern Europe',), ('Micronesia',), ('Eastern Asia',), ('Southern Africa',), ('Western Africa',), ('Eastern Africa',), ('Micronesia/Caribbean',), ('Melanesia',)]"
      ],
      "rewards": [
        0.8
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.8,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "1014": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1014,
    "query": "Show me all grades that have at least 4 students.",
    "turn_history": {
      "actions": [
        "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4"
      ],
      "observations": [
        "[(12,), (10,), (11,), (9,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "1015": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1015,
    "query": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
    "turn_history": {
      "actions": [
        "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'"
      ],
      "observations": [
        "[(43.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "1016": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1016,
    "query": "Find the city with the largest population that uses English.",
    "turn_history": {
      "actions": [
        "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1"
      ],
      "observations": [
        "[('New York',)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "1017": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1017,
    "query": "Find the number of dog pets that are raised by female students (with sex F).",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog'"
      ],
      "observations": [
        "[(2,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "1018": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1018,
    "query": "What is the average age of the dogs who have gone through any treatments?",
    "turn_history": {
      "actions": [
        "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)"
      ],
      "observations": [
        "[(5.111111111111111,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "1019": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1019,
    "query": "What is the first and second line for all addresses?",
    "turn_history": {
      "actions": [
        "SELECT line_1, line_2 FROM Addresses"
      ],
      "observations": [
        "[('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "1020": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1020,
    "query": "For each semester, what is the name and id of the one with the most students registered?",
    "turn_history": {
      "actions": [
        "SELECT semester_id, semester_name FROM Semesters WHERE semester_id = (     SELECT semester_id     FROM Student_Enrolment     GROUP BY semester_id     ORDER BY COUNT(student_id) DESC     LIMIT 1 )"
      ],
      "observations": [
        "[(2, 'summer 2010')]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "1021": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1021,
    "query": "What are the ids for templates that are not used in any documents?",
    "turn_history": {
      "actions": [
        "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents)"
      ],
      "observations": [
        "[(19,), (9,), (23,), (15,), (16,), (18,), (24,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "1022": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1022,
    "query": "Find the name and age of the visitor who bought the most tickets at once.",
    "turn_history": {
      "actions": [
        "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1"
      ],
      "observations": [
        "[('Arjen Robben', 27)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "1023": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1023,
    "query": "What is minimum and maximum share of TV series?",
    "turn_history": {
      "actions": [
        "SELECT MIN(Share), MAX(Share) FROM TV_series"
      ],
      "observations": [
        "[(5.0, 9.0)]"
      ],
      "rewards": [
        0.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 0.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "1024": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1024,
    "query": "What is the number of cars with more than 4 cylinders?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4"
      ],
      "observations": [
        "[(22,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "1025": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1025,
    "query": "How many different addresses do the students currently live?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(DISTINCT current_address_id) FROM Students"
      ],
      "observations": [
        "[(9,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "1026": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1026,
    "query": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
    "turn_history": {
      "actions": [
        "SELECT h.name FROM Highschooler h, Friend f WHERE h.ID = f.student_id AND h.grade > 5 GROUP BY h.ID HAVING COUNT(*) >= 2"
      ],
      "observations": [
        "[('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "hard"
  },
  "1027": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1027,
    "query": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
    "turn_history": {
      "actions": [
        "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1"
      ],
      "observations": [
        "[('Kacey', '6', '7.57'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  },
  "1028": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1028,
    "query": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
    "turn_history": {
      "actions": [
        "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000"
      ],
      "observations": [
        "[(26.0,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "1029": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1029,
    "query": "How many teachers are there?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM teacher"
      ],
      "observations": [
        "[(7,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "1030": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1030,
    "query": "How many owners temporarily do not have any dogs?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL"
      ],
      "observations": [
        "[(3,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "extra"
  },
  "1031": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1031,
    "query": "How many transcripts are released?",
    "turn_history": {
      "actions": [
        "SELECT COUNT(*) FROM Transcripts"
      ],
      "observations": [
        "[(15,)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "1032": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1032,
    "query": "Find the codes of countries that have more than 50 players.",
    "turn_history": {
      "actions": [
        "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50"
      ],
      "observations": [
        "[]"
      ],
      "rewards": [
        1
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "easy"
  },
  "1033": {
    "environment": "ic_sql",
    "dataset": "./data/spider/dev_spider.json",
    "task_id": 1033,
    "query": "What are the different template type codes, and how many documents use each type?",
    "turn_history": {
      "actions": [
        "SELECT Template_Type_Code, COUNT(*) AS Num_Documents FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code"
      ],
      "observations": [
        "[('AD', 3), ('BK', 5), ('PP', 3), ('PPT', 3)]"
      ],
      "rewards": [
        1.0
      ],
      "valid_action": [
        true
      ]
    },
    "summary": {
      "max_reward": 1.0,
      "max_reward_idx": 0,
      "turns_taken": 1,
      "turns_max": 1
    },
    "hardness": "medium"
  }
}