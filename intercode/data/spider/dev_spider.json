[
  {
    "db": "poker_player",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
    "query": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "query": "Find the name of airports which do not have any flight in and out.",
    "hardness": "hard",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
    "query": "What is the average GNP and total population in all nations whose government is US territory?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT count(DISTINCT Nationality) FROM conductor",
    "query": "Count the number of different nationalities of conductors.",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_id , version_number , template_type_code FROM Templates",
    "query": "What are the ids, version numbers, and type codes for each template?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "query": "What is the money rank of the tallest poker player?",
    "hardness": "hard",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
    "query": "For each hometown, how many teachers are there?",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "query": "What are the cities whose population is between 160000 and 900000?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Paragraphs",
    "query": "Count the number of paragraphs.",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT avg(loser_age) , avg(winner_age) FROM matches",
    "query": "Find the average age of losers and winners of all matches.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Title FROM Cartoon ORDER BY title",
    "query": "List the title of all cartoons in alphabetical order.",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
    "query": "Which countries in europe have at least 3 car manufacturers?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "query": "Please show the record formats of orchestras in ascending order of count.",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
    "query": "How many people live in Asia, and what is the largest GNP among them?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "query": "What is the maximum and minimum share for the TV series?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Name FROM teacher ORDER BY Age ASC",
    "query": "What are the names of the teachers ordered by ascending age?",
    "hardness": "easy",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "query": "Please show the most common citizenship of singers.",
    "hardness": "hard",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
    "query": "What is the accelerate of the car make amc hornet sportabout (sw)?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
    "query": "What are the date and the operating professional's first name of each treatment?",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "query": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country WHERE IndepYear > 1950",
    "query": "What are the names of all the countries that became independent after 1950?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT DISTINCT breed_code , size_code FROM dogs",
    "query": "What are all the possible breed type and size type combinations?",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT min(Number_products) , max(Number_products) FROM shop",
    "query": "What are the minimum and maximum number of products across all the shops?",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
    "query": "How many pets are owned by students that have an age greater than 20?",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
    "query": "Give the names of poker players who have earnings above 300000.",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "query": "What is the horsepower of the car with the largest accelerate?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
    "query": "Give the mean GNP and total population of nations which are considered US territory.",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(*) FROM players",
    "query": "How many players are there?",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
    "query": "Which abbreviation corresponds to Jetblue Airways?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980;",
    "query": "What is the average horsepower of the cars before 1980?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the ship id and name that caused most total injuries?",
    "hardness": "extra",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "query": "How many flights arriving in Aberdeen city?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
    "query": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "query": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
    "hardness": "hard",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
    "query": "Show the names of high schoolers who have likes, and numbers of likes for each.",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
    "query": "Show the names of high school students and their corresponding number of friends.",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
    "query": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
    "hardness": "hard",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype",
    "query": "What is the average weight for each type of pet?",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
    "query": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
    "hardness": "extra",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
    "query": "List all singer names in concerts in year 2014.",
    "hardness": "hard",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
    "query": "What are the different first names and ages of the students who do have pets?",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "query": "What is the horsepower of the car with the greatest accelerate?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
    "query": "What country is Jetblue Airways affiliated with?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
    "query": "How many car models were produced by the maker with full name American Motor Company?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
    "query": "Find the first name and gender of student who have more than one pet.",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT count(*) FROM pets WHERE weight > 10",
    "query": "Find the number of pets whose weight is heavier than 10.",
    "hardness": "easy",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "query": "What is the description of the treatment type that costs the least money in total?",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
    "query": "How many battles did not lose any ship with tonnage '225'?",
    "hardness": "extra",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT name FROM Highschooler WHERE grade = 10",
    "query": "Show the names of all high schoolers in grade 10.",
    "hardness": "easy",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
    "query": "list all cartoon titles and their directors ordered by their air date",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the area code in which the most voters voted?",
    "hardness": "extra",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query": "For each citizenship, what is the maximum net worth?",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "query": "What are the names of all cartoons directed by Ben Jones?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "query": "Find the weight of the youngest dog.",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT min(Version_Number) , template_type_code FROM Templates",
    "query": "What the smallest version number and its template type code?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "query": "How many departments offer any degree?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
    "query": "What is the template type descriptions for template type code \"AD\".",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "query": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
    "query": "Find the first name and age of students who have a pet.",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT student_id , count(*) FROM Friend GROUP BY student_id",
    "query": "Show the student IDs and numbers of friends corresponding to each.",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
    "query": "What are the distinct template type descriptions for the templates ever used by any document?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
    "query": "What is the average edispl of the cars of model volvo?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "query": "Find the name of the shops that do not hire any employee.",
    "hardness": "hard",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "query": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
    "hardness": "hard",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_id , count(*) FROM Documents GROUP BY template_id",
    "query": "Show all template ids and number of documents using each template.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
    "query": "What are the names of the singers who performed in a concert in 2014?",
    "hardness": "hard",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
    "query": "Show the stadium name and the number of concerts in each stadium.",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
    "query": "What are the orchestras that do not have any performances?",
    "hardness": "hard",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code , template_type_description FROM Ref_template_types",
    "query": "What are the type codes and descriptions for all template types?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
    "query": "What are the names of the teachers who teach at least two courses?",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
    "query": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
    "hardness": "extra",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
    "query": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
    "hardness": "hard",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
    "query": "What is the average, minimum, and maximum age of all singers from France?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
    "query": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
    "hardness": "hard",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
    "query": "What are years of founding for orchestras that have had more than a single performance?",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
    "query": "What are the names of tournaments that have more than 10 matches?",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
    "query": "How many orchestras does each record company manage?",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
    "query": "What are different nationalities of people and the corresponding number of people from each nation?",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR = 1980;",
    "query": "In 1980, how many cars were made?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(*) FROM country WHERE GovernmentForm = \"Republic\"",
    "query": "How many countries have governments that are republics?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
    "query": "What are the first names of all players, and their average rankings?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
    "query": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
    "query": "Please show the different record companies and the corresponding number of orchestras.",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "query": "Find the abbreviation and country of the airline that has fewest number of flights?",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "query": "List the language used least number of TV Channel. List language and number of TV Channel.",
    "hardness": "hard",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
    "query": "Return the codes of countries for which Spanish is the predominantly spoken language.",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Name FROM conductor ORDER BY Age ASC",
    "query": "What are the names of conductors, ordered by age?",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT count(*) FROM teacher",
    "query": "What is the total count of teachers?",
    "hardness": "easy",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "query": "Find the number of professionals who have ever treated dogs.",
    "hardness": "easy",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR = 1980;",
    "query": "how many cars were produced in 1980?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT Maker , Model FROM MODEL_LIST;",
    "query": "What are all the makers and models?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
    "query": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
    "query": "What is the average miles per gallon of all the cards with 4 cylinders?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM CONTINENTS;",
    "query": "How many continents are there?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "query": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
    "query": "List all document ids with at least two paragraphs.",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "query": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
    "query": "What is the name of the museum that had no visitor yet?",
    "hardness": "hard",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "query": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
    "query": "What are the song titles and singer names?",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "query": "Return the id of the document with the fewest paragraphs.",
    "hardness": "hard",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "query": "How many dogs went through any treatments?",
    "hardness": "easy",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
    "query": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
    "query": "List the cost of each treatment and the corresponding treatment type description.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT avg(transcript_date) FROM Transcripts",
    "query": "What is the average transcript date?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower > 150;",
    "query": "What is the number of the cars with horsepower more than 150?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "query": "List the first and last name of all players who are left / L hand in the order of birth date.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the degree summary name that has the most number of students enrolled?",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "query": "What are the names of people who are not from Russia?",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
    "query": "Find the first name of students who have both cat and dog pets .",
    "hardness": "extra",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "query": "What is the name of the conductor who has conducted the most orchestras?",
    "hardness": "extra",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
    "query": "How many countries has more than 2 car makers ?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "query": "Which language is spoken by the largest number of countries?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT name , country , age FROM singer ORDER BY age DESC",
    "query": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query": "For all of the 4 cylinder cars, which model has the most horsepower?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
    "query": "Give the names of countries that are in Europe and have a population equal to 80000.",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
    "query": "How many dog pets are raised by female students?",
    "hardness": "hard",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
    "query": "Which airlines have less than 200 flights?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "query": "Count the number of dogs that went through a treatment.",
    "hardness": "easy",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT DISTINCT breed_code , size_code FROM dogs",
    "query": "Find the distinct breed type and size type combinations for dogs.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
    "query": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
    "query": "How many official languages are spoken in Afghanistan?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
    "query": "List the first name of all the professionals along with the description of the treatment they have done.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT count(*) FROM Highschooler",
    "query": "How many high schoolers are there?",
    "hardness": "easy",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Continent FROM country WHERE Name = \"Anguilla\"",
    "query": "What is the continent name which Anguilla belongs to?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "query": "What other details can you tell me about students in reverse alphabetical order?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
    "query": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "select t2.name , t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1",
    "query": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
    "hardness": "extra",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Continent FROM country WHERE Name = \"Anguilla\"",
    "query": "Which continent is Anguilla in?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "query": "What's the name of the course with most number of enrollments?",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
    "query": "What is the count of the car models produced in the United States?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
    "query": "Find the number of cartoons directed by each of the listed directors.",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT name FROM employee ORDER BY age",
    "query": "List the names of employees and sort in ascending order of age.",
    "hardness": "easy",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query": "What are the names and areas of countries with the top 5 largest area?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
    "query": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "query": "Return the names of the 3 most populated countries.",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
    "query": "What is the total surface area of the countries in the Caribbean region?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
    "query": "Show names of all high school students who do not have any friends.",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
    "query": "How many different winners both participated in the WTA Championships and were left handed?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Age , Hometown FROM teacher",
    "query": "What is the age and hometown of every teacher?",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "query": "What is the department description for the one whose name has the word computer?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
    "query": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
    "query": "What is the name and directors of all the cartoons that are ordered by air date?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
    "query": "How many documents are using the template with type code 'PPT'?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "query": "Which city is the most frequent source airport?",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT grade , count(*) FROM Highschooler GROUP BY grade",
    "query": "Show the number of high schoolers for each grade.",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "query": "What is the name and capacity for the stadium with the highest average attendance?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
    "query": "What are the opening year and staff number of the museum named Plaza Museum?",
    "hardness": "medium",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "query": "What is the first, middle, and last name of the earliest school graduate?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders > 4;",
    "query": "How many cars have more than 4 cylinders?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
    "query": "What are the countries having at least one car maker? List name and id.",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
    "query": "Which makers designed more than 3 car models? List full name and the id.",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
    "query": "Show paragraph details for paragraph with text 'Korea ' .",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(*) FROM country WHERE GovernmentForm = \"Republic\"",
    "query": "How many countries have a republic as their form of government?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "query": "How many different degrees are offered?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT count(*) FROM poker_player",
    "query": "Count the number of poker players.",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
    "query": "How many different forms of governments are there in Africa?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "query": "What are the name, population, and life expectancy of the largest Asian country by land?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "query": "Which employee received the most awards in evaluations? Give me the employee name.",
    "hardness": "extra",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT count(DISTINCT pettype) FROM pets",
    "query": "How many different types of pet are there?",
    "hardness": "easy",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
    "query": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
    "hardness": "hard",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "query": "Which city has most number of arriving flights?",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT avg(Attendance) FROM SHOW",
    "query": "Return the average attendance across all shows.",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
    "query": "What major is every student who does not own a cat as a pet, and also how old are they?",
    "hardness": "extra",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
    "query": "How many matches were played in 2013 or 2016?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
    "query": "Return the names of friends of the high school student Kyle.",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
    "query": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
    "query": "What is the average grade of students who have friends?",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "query": "What is the name of the conductor who has worked the greatest number of years?",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
    "query": "How many degrees does the engineering department offer?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
    "query": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
    "hardness": "extra",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
    "query": "What is the average and maximum age for each pet type?",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
    "query": "Which distinct car models are the produced after 1980?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
    "query": "What are each professional's first name and description of the treatment they have performed?",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select avg(horsepower) from cars_data where year < 1980;",
    "query": "What is the average horsepower for all cars produced before 1980 ?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
    "query": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
    "query": "How many countries speak both English and Dutch?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
    "query": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(DISTINCT template_id) FROM Documents",
    "query": "Count the number of different templates used for documents.",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "query": "Which city has the most frequent destination airport?",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
    "query": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "hardness": "hard",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "query": "Give the language that is spoken in the most countries.",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';",
    "query": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
    "query": "What are the death and injury situations caused by the ship with tonnage 't'?",
    "hardness": "medium",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "query": "How many flights does airline 'JetBlue Airways' have?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
    "query": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT count(*) FROM pets WHERE weight > 10",
    "query": "How many pets have a greater weight than 10?",
    "hardness": "easy",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
    "query": "Show the names of high schoolers who have at least 3 friends.",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "query": "What are the languages used by the least number of TV Channels and how many channels use it?",
    "hardness": "hard",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
    "query": "Find the average age of students who do not have any pet .",
    "hardness": "extra",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
    "query": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "query": "List each language and the number of TV Channels using it.",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
    "query": "Show names of teachers and the courses they are arranged to teach.",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "query": "Give the name, population, and head of state for the country that has the largest area.",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "query": "What is the sname of every sing that does not have any song?",
    "hardness": "hard",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "query": "What is the name of the singer who is worth the most?",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Return the id and type code of the template that is used for the greatest number of documents.",
    "hardness": "extra",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT min(loser_rank) FROM matches",
    "query": "Find the highest rank of losers in all matches.",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
    "query": "How many 'United Airlines' flights depart from Airport 'AHD'?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the name of the shop that is hiring the largest number of employees?",
    "hardness": "extra",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
    "query": "For the countries founded before 1930, what is the total number of distinct official languages?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
    "query": "What are the names of the singers whose birth years are either 1948 or 1949?",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
    "query": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
    "hardness": "hard",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
    "query": "How many flights land in Aberdeen or Abilene?",
    "hardness": "hard",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "query": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
    "query": "What are the names of high schoolers who have 3 or more friends?",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "query": "What are the names of the teachers whose courses have not been arranged?",
    "hardness": "hard",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
    "query": "What are the regions that use English or Dutch?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(*) , hand FROM players GROUP BY hand",
    "query": "Find the number of players for each hand type.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
    "query": "Find the model of the car whose weight is below the average weight.",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
    "query": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
    "query": "Give the city and country for the Alton airport.",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select count(*) , t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
    "query": "How many car models are produced by each maker ? Only list the count and the maker full name .",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT max(area_code) , min(area_code) FROM area_code_state",
    "query": "What are the maximum and minimum values of area codes?",
    "hardness": "medium",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT date_arrived , date_departed FROM Dogs",
    "query": "List the arrival date and the departure date for all the dogs.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2",
    "query": "What are the contestant numbers and names of the contestants who had at least two votes?",
    "hardness": "medium",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
    "query": "Show the names of conductors and the orchestras they have conducted.",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Paragraphs",
    "query": "How many paragraphs in total?",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
    "query": "What is the most common singer citizenship ?",
    "hardness": "hard",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "query": "What is the most populace city that speaks English?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(*) FROM players",
    "query": "Find the total number of players.",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
    "query": "How many different series and contents are listed in the TV Channel table?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Name FROM teacher ORDER BY Age ASC",
    "query": "List the names of teachers in ascending order of age.",
    "hardness": "easy",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
    "query": "What is the number of nations that use English and Dutch?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\"",
    "query": "How many airlines are from USA?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
    "query": "Find the make and production time of the cars that were produced in the earliest year?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(DISTINCT template_id) FROM Documents",
    "query": "How many different templates do all document use?",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
    "query": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
    "hardness": "hard",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id , document_name , document_description FROM Documents",
    "query": "What are the ids, names, and descriptions for all documents?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
    "query": "What are the ids of templates with template type code PP or PPT?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "query": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM COUNTRIES;",
    "query": "How many countries exist?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
    "query": "Count the number of paragraphs in the document named 'Summer Show'.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "query": "Which template type code is used by most number of documents?",
    "hardness": "extra",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT count(*) FROM singer",
    "query": "How many singers are there?",
    "hardness": "easy",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
    "query": "Tell me the number of dogs that have not received any treatment .",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT name FROM Highschooler WHERE grade = 10",
    "query": "What are the names of all high schoolers in grade 10?",
    "hardness": "easy",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "query": "Show names of people whose nationality is not \"Russia\".",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
    "query": "Show the years in which orchestras that have given more than one performance are founded.",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "query": "How much does the youngest dog weigh?",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "select avg(capacity) , max(capacity) from stadium",
    "query": "What is the average and maximum capacities for all stadiums ?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "query": "Give the nationality that is most common across all people.",
    "hardness": "hard",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "query": "Return the money rank of the player with the greatest earnings.",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "query": "What airline serves the most flights?",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
    "query": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
    "query": "What are each owner's first name, last name, and the size of their dog?",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
    "query": "How many museums were opened after 2013 or before 2008?",
    "hardness": "medium",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION",
    "query": "Find the number of shops in each location.",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
    "query": "Give the total surface area covered by countries in Asia or Europe.",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT avg(age) FROM visitor WHERE Level_of_membership <= 4",
    "query": "What is the average age of the visitors whose membership level is not higher than 4?",
    "hardness": "easy",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
    "query": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT avg(age) FROM Dogs",
    "query": "Compute the average age of all the dogs.",
    "hardness": "easy",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
    "query": "Give the flight numbers of flights landing at APG.",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
    "query": "How many type of governments are in Africa?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "query": "What is the money rank of the poker player with the highest earnings?",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "query": "Find the total number of tours for each ranking date.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
    "query": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
    "hardness": "hard",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT max(weight) , petType FROM pets GROUP BY petType",
    "query": "List the maximum weight and type for each type of pet.",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
    "query": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
    "hardness": "hard",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
    "query": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
    "hardness": "hard",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
    "query": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
    "hardness": "hard",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
    "query": "What is the average, minimum, and maximum age for all French singers?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
    "query": "Return the code of the template type that is most commonly used in documents.",
    "hardness": "extra",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
    "query": "What are the names of poker players?",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
    "query": "List all song names by singers above the average age.",
    "hardness": "hard",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
    "query": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
    "query": "What is the template type code for template type description \"Book\".",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
    "query": "What is the average life expectancy in African countries that are republics?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "query": "Find the name and rank points of the winner who won the most times.",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
    "query": "What is the date and id of the transcript with at least 2 courses listed?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
    "query": "What are the ids of documents that have 2 or more paragraphs?",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
    "query": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
    "query": "What languages are only used by a single country with a republic government?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
    "query": "How many languages are spoken in Aruba?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
    "query": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT date_arrived , date_departed FROM Dogs",
    "query": "What are the arriving date and the departing date of all the dogs?",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
    "query": "Which airlines have a flight with destination airport AHD?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
    "query": "What are the names of the singers and number of concerts for each person?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "query": "When was the last transcript released?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "query": "Give the flight numbers of flights arriving in Aberdeen.",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES",
    "query": "What is the total number of airlines?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
    "query": "How many flights fly from Aberdeen to Ashley?",
    "hardness": "hard",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the airport code of the airport with the most flights?",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "query": "What language is predominantly spoken in Aruba?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "query": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
    "query": "Which airlines have departing flights from both APG and CVO airports?",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT name FROM employee ORDER BY age",
    "query": "Sort employee names by their age in ascending order.",
    "hardness": "easy",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
    "query": "List the names of poker players ordered by the final tables made in ascending order.",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT section_description FROM Sections WHERE section_name = 'h'",
    "query": "Describe the section h.",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "query": "What is the description of the department whose name has the substring the computer?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
    "query": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
    "query": "What are the manager name and district of the shop that sells the largest number of products?",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "query": "What are the first name and last name of the professionals who have done treatment with cost below average?",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "query": "Find the id and name of the museum that has the most staff members?",
    "hardness": "medium",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT count(*) FROM singer",
    "query": "How many singers do we have?",
    "hardness": "easy",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
    "query": "Show countries where a singer above age 40 and a singer below 30 are from.",
    "hardness": "hard",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
    "query": "What are airlines that have flights arriving at airport 'AHD'?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
    "query": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "hardness": "hard",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
    "query": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT count(DISTINCT RESULT) FROM battle",
    "query": "How many different results are there for the battles?",
    "hardness": "easy",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "query": "Whose permanent address is different from his or her current address? List his or her first name.",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM CONTINENTS;",
    "query": "What is the number of continents?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Which address holds the most number of students currently? List the address id and all lines.",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
    "query": "What are the full names of all left handed players, in order of birth date?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "query": "Show ids of all students who do not have any friends.",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "query": "Show the ids of high schoolers who have friends and are also liked by someone else.",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
    "query": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
    "hardness": "hard",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "query": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
    "query": "List the name of singers that do not have any song.",
    "hardness": "hard",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id , document_name , document_description FROM Documents",
    "query": "List document IDs, document names, and document descriptions for all documents.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
    "query": "What are the different models for the cards produced after 1980?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query": "What is the content of TV Channel with serial name \"Sky Radio\"?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
    "query": "What are each owner's first name and their dogs's name?",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the id, line 1, and line 2 of the address with the most students?",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
    "query": "How many friends does the high school student Kyle have?",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "query": "What is the country with the most number of TV Channels and how many does it have?",
    "hardness": "hard",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "query": "Show me the cost of the most recently performed treatment.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "query": "Return the birth date of the poker player with the lowest earnings.",
    "hardness": "hard",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
    "query": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
    "query": "Find the number of flights landing in the city of Aberdeen or Abilene.",
    "hardness": "hard",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "query": "Show the stadium names without any concert.",
    "hardness": "hard",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
    "query": "What is the first name and gender of the all the students who have more than one pet?",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT count(*) FROM visitor WHERE age < 30",
    "query": "How many visitors below age 30 are there?",
    "hardness": "easy",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "query": "Which continent speaks the most languages?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT max(charge_amount) FROM Charges",
    "query": "What is the charge amount of the most expensive charge type?",
    "hardness": "easy",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
    "query": "Return the nationalities for which there are two or more people.",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "query": "What is the maximum accelerate for different number of cylinders?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
    "query": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
    "query": "What are the names of all European countries with at least 3 manufacturers?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select max(mpg) from cars_data where cylinders = 8 or year < 1980",
    "query": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
    "query": "Return the money rank of the poker player with the greatest height.",
    "hardness": "hard",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Return the owner id, first name and last name of the owner who has the most dogs.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
    "query": "What are the names of all courses that have some students enrolled?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "query": "What are names of countries with the top 3 largest population?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
    "query": "Find the minimum grade of students who have no friends.",
    "hardness": "extra",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'",
    "query": "How many ships ended up being 'Captured'?",
    "hardness": "easy",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the code of airport that has the highest number of flights?",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
    "query": "How many continents speak Chinese?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
    "query": "Return the template type code of the template that is used by a document named Data base.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
    "query": "Give average earnings of poker players who are taller than 200.",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(*) , hand FROM players GROUP BY hand",
    "query": "How many players are there for each hand type?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
    "query": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
    "query": "Which language is the most popular in Aruba?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT petid , weight FROM pets WHERE pet_age > 1",
    "query": "Find the id and weight of all pets whose age is older than 1.",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
    "query": "Give the names of countries with English and French as official languages.",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "query": "Give the code of the airport with the least flights.",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
    "query": "Which countries have greater area than that of any country in Europe?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
    "query": "What are the codes of template types that are not used for any document?",
    "hardness": "hard",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
    "query": "List the date of each treatment, together with the first name of the professional who operated it.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT max(created) FROM votes WHERE state = 'CA'",
    "query": "What is last date created of votes from the state 'CA'?",
    "hardness": "easy",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT email_address , cell_number , home_phone FROM professionals",
    "query": "What are the email, cell phone and home phone of each professional?",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
    "query": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
    "hardness": "hard",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
    "query": "Find the arriving date and the departing date of the dogs that received a treatment.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
    "query": "What are the names and ids of every course with less than 2 sections?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
    "query": "Count the number of flights into ATO.",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
    "query": "What are the names of players who won in both 2013 and 2016?",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "query": "Return the names and template ids for documents that contain the letter w in their description.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "query": "What are airport names at City 'Aberdeen'?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code",
    "query": "What are the different template type codes, and how many templates correspond to each?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT country , count(*) FROM singer GROUP BY country",
    "query": "Show all countries and the number of singers in each country.",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
    "query": "Find the last name of the student who has a cat that is age 3.",
    "hardness": "hard",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10",
    "query": "What are the ids and names of the battles that led to more than 10 people killed in total.",
    "hardness": "hard",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Documents",
    "query": "Count the number of documents.",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "select t2.department_name , t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
    "query": "What is the name and id of the department with the most number of degrees ?",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
    "query": "Which region is the city Kabul located in?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
    "query": "What is the zip code for Port Chelsea?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
    "query": "Give me the description of the treatment type whose total cost is the lowest.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "query": "Which year had the most matches?",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "query": "Give the ids of documents that have between one and two paragraphs.",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
    "query": "What are the ids of high school students who do not have friends?",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "query": "Find the first names that are used for professionals or owners but are not used as dog names.",
    "hardness": "hard",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\"",
    "query": "Which unique cities are in Asian countries where Chinese is the official language ?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
    "query": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "query": "Which grade has the most high schoolers?",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "query": "What are the country codes of countries where people use languages other than English?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
    "query": "Return the template type description of the template type with the code AD.",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
    "query": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
    "hardness": "medium",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
    "query": "What are the nationalities that are shared by at least two people?",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
    "query": "List the names of all winners who played in both 2013 and 2016.",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT count(*) , city FROM employee GROUP BY city",
    "query": "What is the number of employees from each city?",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "query": "Give the name of the country in Asia with the lowest life expectancy.",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Find the program which most number of students are enrolled in. List both the id and the summary.",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
    "query": "For each singer name, what is the total sales for their songs?",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "query": "find the code of the country where has the greatest number of players.",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
    "query": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Age , Hometown FROM teacher",
    "query": "What are the age and hometown of teachers?",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
    "query": "Return the grade for the high schooler named Kyle.",
    "hardness": "easy",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
    "query": "How many car makers are there in each continents? List the continent name and the count.",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "query": "What is the most common nationality of people?",
    "hardness": "hard",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
    "query": "List the airport code and name in the city of Anthony.",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT avg(winner_rank) FROM matches",
    "query": "Find the average rank of winners in all matches.",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "query": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
    "query": "Find the major and age of students who do not have a cat pet.",
    "hardness": "extra",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
    "query": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(*) FROM country WHERE continent = \"Asia\"",
    "query": "Count the number of countries in Asia.",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query": "For the cars with 4 cylinders, which model has the largest horsepower?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
    "query": "List the number of all matches who played in years of 2013 or 2016.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
    "query": "Find the first name and country code of the oldest player.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
    "query": "What are the names of the countries with no car makers?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
    "query": "Return the name, location and district of all shops in descending order of number of products.",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(*) FROM matches",
    "query": "Find the total number of matches.",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
    "query": "List the first name and birth date of all players from the country with code USA.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "query": "Which year has most number of concerts?",
    "hardness": "hard",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "query": "Return the grade that has the greatest number of high schoolers.",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT t2.visitor_id , t1.name , t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
    "query": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
    "hardness": "extra",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "query": "What is the name of country that has the shortest life expectancy in Asia?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "query": "How many cartoons were written by \"Joseph Kuhr\"?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
    "query": "Count the number of United Airlines flights that arrive in Aberdeen.",
    "hardness": "hard",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
    "query": "Find the manager name and district of the shop whose number of products is the largest.",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
    "query": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
    "hardness": "hard",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
    "query": "Count the number of dogs of an age below the average.",
    "hardness": "hard",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
    "query": "Return the document id, template id, and description for the document with the name Robbin CV.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
    "query": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
    "hardness": "medium",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
    "query": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the code of the country with the most players?",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
    "query": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
    "hardness": "extra",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
    "query": "What grade is Kyle in?",
    "hardness": "easy",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
    "query": "What are the names of high schoolers who have likes, and how many likes does each have?",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
    "query": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
    "hardness": "hard",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Name FROM conductor ORDER BY Age ASC",
    "query": "List the names of conductors in ascending order of age.",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "real_estate_properties",
    "gold": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
    "query": "Show the property type descriptions of properties belonging to that code.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Feature_Types": [
        "feature_type_code",
        "feature_type_name"
      ],
      "Ref_Property_Types": [
        "property_type_code",
        "property_type_description"
      ],
      "Other_Available_Features": [
        "feature_id",
        "feature_type_code",
        "feature_name",
        "feature_description"
      ],
      "Properties": [
        "property_id",
        "property_type_code",
        "date_on_market",
        "date_sold",
        "property_name",
        "property_address",
        "room_count",
        "vendor_requested_price",
        "buyer_offered_price",
        "agreed_selling_price",
        "apt_feature_1",
        "apt_feature_2",
        "apt_feature_3",
        "fld_feature_1",
        "fld_feature_2",
        "fld_feature_3",
        "hse_feature_1",
        "hse_feature_2",
        "hse_feature_3",
        "oth_feature_1",
        "oth_feature_2",
        "oth_feature_3",
        "shp_feature_1",
        "shp_feature_2",
        "shp_feature_3",
        "other_property_details"
      ],
      "Other_Property_Features": [
        "property_id",
        "feature_id",
        "property_feature_description"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "query": "When is the first transcript released? List the date and details.",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
    "query": "What is the code of airport that has fewest number of flights?",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
    "query": "What are the names of the teachers who are aged either 32 or 33?",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT first_name , last_name FROM players ORDER BY birth_date",
    "query": "What are the full names of all players, sorted by birth date?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
    "query": "What are flight numbers of flights departing from Airport \"APG\"?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
    "query": "What are the population and life expectancies in Brazil?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT student_id , count(*) FROM Likes GROUP BY student_id",
    "query": "Count the number of likes for each student id.",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT min(Number_products) , max(Number_products) FROM shop",
    "query": "find the minimum and maximum number of products of all stores.",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "query": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
    "query": "List the names of orchestras that have no performance.",
    "hardness": "hard",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
    "query": "Give the average life expectancy for countries in Africa which are republics?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT first_name , last_name FROM players ORDER BY birth_date",
    "query": "List the first and last name of all players in the order of birth date.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
    "query": "How many degrees does the engineering department have?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "query": "List all the student details in reversed lexicographical order.",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "query": "What is the number of distinct languages used around the world?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "query": "Find the states where both owners and professionals live.",
    "hardness": "hard",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
    "query": "What is the average age for all students who do not own any pets ?",
    "hardness": "extra",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT section_name , section_description FROM Sections",
    "query": "What are the names and descriptions for all the sections?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "query": "Which breed do the most dogs have? Give me the breed name.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
    "query": "Find the number of left handed winners who participated in the WTA Championships.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "query": "List the names of the dogs of the rarest breed and the treatment dates of them.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
    "query": "How long is the people\u2019s average life expectancy in Central Africa?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
    "query": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
    "hardness": "hard",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
    "query": "What is Kyle's id?",
    "hardness": "easy",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
    "query": "What is the total surface area of the continents Asia and Europe?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
    "query": "Give the airport code and airport name corresonding to the city Anthony.",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT count(DISTINCT Nationality) FROM people",
    "query": "Count the number of different nationalities.",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "query": "Give the country codes for countries in which people speak langauges that are not English.",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT email_address , cell_number , home_phone FROM professionals",
    "query": "List the email, cell phone and home phone of all the professionals.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
    "query": "Return the name of the airport with code 'AKO'.",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "query": "Which employee received the biggest bonus? Give me the employee name.",
    "hardness": "hard",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
    "query": "How many United Airlines flights go to City 'Aberdeen'?",
    "hardness": "hard",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
    "query": "Show titles of songs and names of singers.",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT max(weight) , petType FROM pets GROUP BY petType",
    "query": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
    "query": "Show all paragraph texts for the document \"Customer reviews\".",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
    "query": "What are the template ids of any templates used in more than a single document?",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT vote_id , phone_number , state FROM votes",
    "query": "List the vote ids, phone numbers and states of all votes.",
    "hardness": "medium",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "query": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(*) , YEAR FROM matches GROUP BY YEAR",
    "query": "Find the number of matches happened in each year.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the semester which most student registered in? Show both the name and the id.",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
    "query": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
    "query": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
    "hardness": "medium",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
    "query": "What is the name of each teacher and what course they teach?",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Birth_Year , Citizenship FROM singer",
    "query": "What are the birth year and citizenship of singers?",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Which department offers the most number of degrees? List department name and id.",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "real_estate_properties",
    "gold": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = \"AirCon\"",
    "query": "What is the feature type name of feature AirCon?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Feature_Types": [
        "feature_type_code",
        "feature_type_name"
      ],
      "Ref_Property_Types": [
        "property_type_code",
        "property_type_description"
      ],
      "Other_Available_Features": [
        "feature_id",
        "feature_type_code",
        "feature_name",
        "feature_description"
      ],
      "Properties": [
        "property_id",
        "property_type_code",
        "date_on_market",
        "date_sold",
        "property_name",
        "property_address",
        "room_count",
        "vendor_requested_price",
        "buyer_offered_price",
        "agreed_selling_price",
        "apt_feature_1",
        "apt_feature_2",
        "apt_feature_3",
        "fld_feature_1",
        "fld_feature_2",
        "fld_feature_3",
        "hse_feature_1",
        "hse_feature_2",
        "hse_feature_3",
        "oth_feature_1",
        "oth_feature_2",
        "oth_feature_3",
        "shp_feature_1",
        "shp_feature_2",
        "shp_feature_3",
        "other_property_details"
      ],
      "Other_Property_Features": [
        "property_id",
        "feature_id",
        "property_feature_description"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
    "query": "Find the semester when both Master students and Bachelor students got enrolled in.",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
    "query": "What are the students' first names who have both cats and dogs as pets?",
    "hardness": "extra",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT count(DISTINCT pettype) FROM pets",
    "query": "Find the number of distinct type of pets.",
    "hardness": "easy",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
    "query": "What are the names and ids of all countries with at least one car maker?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
    "query": "What is the total population and maximum GNP in Asia?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
    "query": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
    "hardness": "extra",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT max(population) FROM country WHERE Continent = \"Asia\")",
    "query": "What are the African countries that have a  population less than any country in Asia?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
    "query": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
    "query": "What is the id of the pet owned by the student whose last name is 'Smith'?",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)",
    "query": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
    "hardness": "hard",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
    "query": "Return the country codes for countries that do not speak English.",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
    "query": "What are the names of all stadiums that did not have a concert in 2014?",
    "hardness": "hard",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "query": "What is the date and id of the transcript with the least number of results?",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
    "query": "What are the final tables made and best finishes for all poker players?",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
    "query": "Find the average grade of all students who have some friends.",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
    "query": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Population , Region FROM country WHERE Name = \"Angola\"",
    "query": "What region does Angola belong to and what is its population?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
    "query": "Show the names of all of the high schooler Kyle's friends.",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT name , grade FROM Highschooler",
    "query": "Show the names and grades of each high schooler.",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "query": "What is the document name and template id for document with description with the letter 'w' in it?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
    "query": "Return the type code of the template type with the description \"Book\".",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
    "query": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "query": "Give the flight numbers of flights leaving from Aberdeen.",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
    "query": "Which airlines have a flight with source airport AHD?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
    "query": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
    "query": "Show the names of conductors that have conducted more than one orchestras.",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
    "query": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "select name from city where population between 160000 and 900000",
    "query": "Return the names of cities that have a population between 160000 and 900000 .",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "query": "Which of the countries has the most car makers? List the country name.",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
    "query": "Find number of pets owned by students who are older than 20.",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
    "query": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
    "hardness": "hard",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
    "query": "What type of pet is the youngest animal, and how much does it weigh?",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
    "query": "Show names of teachers and the number of courses they teach.",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
    "query": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
    "query": "What is the mobile phone number of the student named Timmothy Ward ?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
    "query": "What are the names of the people who teach math courses?",
    "hardness": "hard",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011",
    "query": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
    "hardness": "extra",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
    "query": "What are the first names of all players, and their total ranking points?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
    "query": "List pairs of the owner's first name and the dogs's name.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT max(age) FROM Dogs",
    "query": "What is the age of the oldest dog?",
    "hardness": "easy",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "query": "Return the number of flights departing from Aberdeen.",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "query": "What model has the most different versions?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "query": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
    "query": "List the names and birth dates of people in ascending alphabetical order of name.",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
    "query": "How many 'United Airlines' flights go to Airport 'ASY'?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "query": "Show all document ids and the number of paragraphs in each document. Order by document id.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "query": "For each language, list the number of TV Channels that use it.",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the name of the high schooler who has the greatest number of likes?",
    "hardness": "extra",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(*) FROM Courses",
    "query": "How many courses are there?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "query": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "query": "What is the earliest date of a transcript release, and what details can you tell me?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
    "query": "Give the airline with abbreviation 'UAL'.",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "query": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = \"Asia\"",
    "query": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
    "query": "How many concerts are there in year 2014 or 2015?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT charge_type , charge_amount FROM Charges",
    "query": "List each charge type and its amount.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Episode FROM TV_series ORDER BY rating",
    "query": "What are all of the episodes ordered by ratings?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(Population) FROM city WHERE District = \"Gelderland\"",
    "query": "What is the total population of Gelderland district?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "query": "What is the language that is used by the largest number of Asian nations?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "query": "What is the name and capacity for the stadium with highest average attendance?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
    "query": "How many flights have destination ATO?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(*) , YEAR FROM matches GROUP BY YEAR",
    "query": "How many matches were played in each year?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
    "query": "What is the average weight of cars each year?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "select contestant_name from contestants where contestant_name like \"%al%\"",
    "query": "Return the names of the contestants whose names contain the substring 'Al' .",
    "hardness": "medium",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
    "query": "Show the names of singers and the total sales of their songs.",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "query": "Return the names of the 3 countries with the fewest people.",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query": "When did the episode \"A Love of a Lifetime\" air?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT petid , weight FROM pets WHERE pet_age > 1",
    "query": "What is the id and weight of every pet who is older than 1?",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
    "query": "What is the number of makers of care in France?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
    "query": "Find the number of cities in each district whose population is greater than the average population of cities?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "query": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
    "query": "Find the names of employees who never won any award in the evaluation.",
    "hardness": "hard",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
    "query": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
    "query": "What are the template ids with template type description \"Presentation\".",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "query": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT DISTINCT template_type_code FROM Templates",
    "query": "Show all distinct template type codes for all templates.",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Which shop has the most employees? Give me the shop name.",
    "hardness": "extra",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "query": "Show different citizenships and the maximum net worth of singers of each citizenship.",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "hardness": "hard",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\"",
    "query": "Return the number of airlines in the USA.",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "query": "List names of conductors in descending order of years of work.",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
    "query": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
    "query": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "hardness": "medium",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Population , Region FROM country WHERE Name = \"Angola\"",
    "query": "What are the region and population of Angola?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
    "query": "What are all the course names of the courses which ever have students enrolled in?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
    "query": "Give me Brazil\u2019s population and life expectancies.",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select t2.makeid , t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders < 4;",
    "query": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT count(DISTINCT LOCATION) FROM shop",
    "query": "How many different store locations are there?",
    "hardness": "easy",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select max(mpg) from cars_data where cylinders = 8 or year < 1980",
    "query": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
    "query": "What are flight numbers of Airline \"United Airlines\"?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
    "query": "What are the id and name of the museum visited most times?",
    "hardness": "extra",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
    "query": "What is the average weight and year for each year?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
    "query": "What is the birth date of the poker player with the lowest earnings?",
    "hardness": "hard",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
    "query": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
    "query": "What are the names of the singers that have more than one songs?",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT grade , count(*) FROM Highschooler GROUP BY grade",
    "query": "How many high schoolers are in each grade?",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the name of the course with the most students enrolled?",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1",
    "query": "What is the total ticket expense of the visitors whose membership level is 1?",
    "hardness": "medium",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
    "query": "Who owns the youngest dog? Give me his or her last name.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "query": "What are the names of singers ordered by ascending net worth?",
    "hardness": "easy",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_id , version_number , template_type_code FROM Templates",
    "query": "Show template ids, version numbers, and template type codes for all templates.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT count(*) FROM singer",
    "query": "What is the total number of singers?",
    "hardness": "easy",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "query": "What is the number of cartoones written by Joseph Kuhr?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
    "query": "Count the number of high schoolers in grades 9 or 10.",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
    "query": "What is the document id, template id and description for document named \"Robbin CV\"?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
    "query": "Count the number of documents that use the PPT template type.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
    "query": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
    "query": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
    "hardness": "hard",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
    "query": "What are the codes of countries with more than 50 players?",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
    "query": "What is the abbreviation of Airline \"JetBlue Airways\"?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT count(DISTINCT Nationality) FROM people",
    "query": "How many distinct nationalities are there?",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the name of the breed with the most dogs?",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
    "query": "What is the number of car models created by the car maker American Motor Company?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "query": "What are the names of conductors, sorted descending by the number of years they have worked?",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
    "query": "List all airline names and their abbreviations in \"USA\".",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
    "query": "Show all template type codes and the number of documents using each type.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(DISTINCT country_code) FROM players",
    "query": "How many distinct countries do players come from?",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
    "query": "Show all template type codes with less than three templates.",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "query": "Find the name, population and expected life length of asian country with the largest area?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT count(*) FROM poker_player",
    "query": "How many poker players are there?",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
    "query": "What is the number of distinct continents where Chinese is spoken?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
    "query": "Which cities do more than one employee under age 30 come from?",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "query": "What are the names of conductors whose nationalities are not \"USA\"?",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
    "query": "How many total tours were there for each ranking date?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT avg(transcript_date) FROM Transcripts",
    "query": "On average, when were the transcripts printed?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "query": "What is the name of the semester with no students enrolled?",
    "hardness": "hard",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
    "query": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
    "hardness": "hard",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
    "query": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "query": "Find the average age of the dogs who went through treatments.",
    "hardness": "hard",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT count(*) FROM employee",
    "query": "Count the number of employees",
    "hardness": "easy",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
    "query": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
    "query": "Count the number of orchestras that have CD or DVD as their record format.",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
    "query": "Return the maximum final tables made across all poker players who have earnings below 200000.",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT Count(*) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id;",
    "query": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
    "query": "Return the version numbers and template type codes of templates with a version number greater than 5.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
    "query": "How many cartoons did each director create?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
    "query": "Show distinct names of singers that have songs with sales more than 300000.",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010)",
    "query": "Find the number of visitors who did not visit any museum opened after 2010.",
    "hardness": "extra",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
    "query": "Find the id of students who do not have a cat pet.",
    "hardness": "hard",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
    "query": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
    "hardness": "hard",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "select production_code , channel from cartoon order by original_air_date desc limit 1",
    "query": "What is the produdction code and channel of the most recent cartoon ?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "query": "Return the number of flights arriving in Aberdeen.",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "query": "List the section_name in reversed lexicographical order.",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES",
    "query": "How many airlines do we have?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
    "query": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT count(DISTINCT LOCATION) FROM shop",
    "query": "Count the number of distinct store locations.",
    "hardness": "easy",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
    "query": "What are the names of the stadiums without any concerts?",
    "hardness": "hard",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
    "query": "Count the number of countries for which Spanish is the predominantly spoken language.",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION",
    "query": "How many shops are there in each location?",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
    "query": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "query": "How many TV Channels use the English language?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
    "query": "Show the name of singers whose birth year is either 1948 or 1949?",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "query": "What is the first name of the student whose permanent address is different from his or her current one?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT avg(age) FROM Dogs",
    "query": "What is the average age of all the dogs?",
    "hardness": "easy",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
    "query": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(DISTINCT country_code) FROM players",
    "query": "find the number of distinct country codes of all players.",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(*) FROM country WHERE continent = \"Asia\"",
    "query": "how many countries are in Asia?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "query": "What are the names of airports in Aberdeen?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
    "query": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
    "query": "How many paragraphs for the document with name 'Summer Show'?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "select sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
    "query": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
    "query": "What is the zip code of the address in the city Port Chelsea?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT grade FROM Highschooler",
    "query": "What is the grade of each high schooler?",
    "hardness": "easy",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
    "query": "What are the names of high schoolers who both have friends and are liked?",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
    "query": "Which language is the most popular on the Asian continent?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "query": "List the name of singers in ascending order of net worth.",
    "hardness": "easy",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT count(*) FROM conductor",
    "query": "Count the number of conductors.",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "query": "Find the year that has the most number of matches.",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"english\" and isofficial = \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"dutch\" and isofficial = \"t\"",
    "query": "What are the countries where either English or Dutch is the official language ?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
    "query": "What is the airport name for airport 'AKO'?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "query": "What are the earnings of poker players, ordered descending by value?",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Templates",
    "query": "How many templates do we have?",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
    "query": "List the final tables made and the best finishes of poker players.",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_id , count(*) FROM Documents GROUP BY template_id",
    "query": "What are all different template ids used for documents, and how many times were each of them used?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT avg(injured) FROM death",
    "query": "What is the average number of injuries caused each time?",
    "hardness": "easy",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
    "query": "What are the name of the countries where there is not a single car maker?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
    "query": "How many dogs have not gone through any treatment?",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "query": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT count(*) FROM employee",
    "query": "How many employees are there?",
    "hardness": "easy",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
    "query": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
    "query": "Find all airlines that have at least 10 flights.",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
    "query": "Find the average ranking for each player and their first name.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
    "query": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT sum(bonus) FROM evaluation",
    "query": "What is total bonus given in all evaluations?",
    "hardness": "easy",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(DISTINCT loser_name) FROM matches",
    "query": "Find the number of distinct name of losers.",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "query": "What is the first, middle, and last name of the first student to register?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
    "query": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
    "query": "What are the airline names and abbreviations for airlines in the USA?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
    "query": "What region is Kabul in?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "query": "How many different departments offer degrees?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
    "query": "Count the number of United Airlines flights arriving in ASY Airport.",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
    "query": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
    "hardness": "extra",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
    "query": "What are the names of poker players in descending order of earnings?",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
    "query": "What is the model for the car with a weight smaller than the average?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT student_id , count(*) FROM Likes GROUP BY student_id",
    "query": "How many likes correspond to each student id?",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
    "query": "Which dogs are of the rarest breed? Show their names and treatment dates.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "query": "What is the hometown of the youngest teacher?",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
    "query": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "hardness": "extra",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
    "query": "Which semesters do not have any student enrolled? List the semester name.",
    "hardness": "hard",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(DISTINCT current_address_id) FROM Students",
    "query": "What are the different addresses that have students living there?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "query": "What is the model of the car with the smallest amount of horsepower?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
    "query": "Show names of teachers that teach at least two courses.",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
    "query": "How many models does each car maker produce? List maker full name, id and the number.",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT course_description FROM Courses WHERE course_name = 'math'",
    "query": "What are the descriptions for all the math courses?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT section_description FROM Sections WHERE section_name = 'h'",
    "query": "What is the description for the section named h?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
    "query": "What are the names and ids of all makers with more than 3 models?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the name of the high schooler who has the greatest number of friends?",
    "hardness": "extra",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
    "query": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
    "query": "What is the average edispl for all volvos?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
    "query": "Find the name of the makers that produced some cars in the year of 1970?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
    "query": "Which airlines have at least 10 flights?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
    "query": "What is the car model with the highest mpg ?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
    "query": "What are the first names and birth dates of players from the USA?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
    "query": "Which country does Airline \"JetBlue Airways\" belong to?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
    "query": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
    "query": "What is the template type code of the template used by document with the name \"Data base\"?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "query": "How many unique languages are spoken in the world?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS",
    "query": "How many flights do we have?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
    "query": "What are the names of students who have 2 or more likes?",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
    "query": "What is the name of each continent and how many car makers are there in each one?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
    "query": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
    "query": "Which city has most number of departing flights?",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
    "query": "What are the names of students who have no friends?",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
    "query": "What is the number of countries with more than 2 car makers ?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
    "query": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "hardness": "extra",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
    "query": "How many likes does Kyle have?",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
    "query": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
    "query": "List the names of teachers who have not been arranged to teach courses.",
    "hardness": "hard",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT avg(Earnings) FROM poker_player",
    "query": "What is the average earnings of poker players?",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
    "query": "What is the lowest grade of students who do not have any friends?",
    "hardness": "extra",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "select name from teacher where hometown != \"little lever urban district\"",
    "query": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
    "hardness": "easy",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "query": "What are the names of people who do not play poker?",
    "hardness": "hard",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
    "query": "What is the total number of people living in the nations that do not use English?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "query": "What is the name of the singer with the largest net worth?",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*) > 2",
    "query": "find id of the tv channels that from the countries where have more than two tv channels.",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Templates",
    "query": "Count the number of templates.",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
    "query": "Show different hometown of teachers and the number of teachers from each hometown.",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Give the name of the student with the most likes.",
    "hardness": "extra",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT sum(bonus) FROM evaluation",
    "query": "Find the total amount of bonus given in all the evaluations.",
    "hardness": "easy",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT min(loser_rank) FROM matches",
    "query": "What is the best rank of losers across all matches?",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
    "query": "Count the number of flights departing from 'APG'.",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
    "query": "What are the names of conductors who have conducted at more than one orchestra?",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "query": "Return the names and surface areas of the 5 largest countries.",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
    "query": "How many high schoolers are there in grade 9 or 10?",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
    "query": "Find the number of pets for each student who has any pet and student id.",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
    "query": "Find the package choice and series name of the TV channel that has high definition TV.",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "query": "List the most common hometown of teachers.",
    "hardness": "hard",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
    "query": "What is the number of carsw ith over 6 cylinders?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "query": "What are the names of the sections in reverse alphabetical order?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
    "query": "List the contestant numbers and names, ordered by contestant name descending.",
    "hardness": "medium",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT max(charge_amount) FROM Charges",
    "query": "How much does the most expensive charge type costs?",
    "hardness": "easy",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
    "query": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
    "hardness": "extra",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
    "query": "Show the name of teachers aged either 32 or 33?",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
    "query": "Which flight numbers correspond to United Airlines flights?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
    "query": "Show all document names using templates with template type code BK.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
    "query": "What are the names of nations where both English and French are official languages?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
    "query": "Return the names of all the poker players.",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS",
    "query": "Return the number of flights.",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
    "query": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
    "query": "Which cities are in European countries where English is not the official language?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
    "query": "Return the different descriptions for templates that have been used in a document.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the year that had the most concerts?",
    "hardness": "hard",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "query": "How much does the most recent treatment cost?",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
    "query": "How many cars has over 6 cylinders?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT * FROM hiring",
    "query": "What is all the information about hiring?",
    "hardness": "easy",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
    "query": "Find the number of concerts happened in the stadium with the highest capacity .",
    "hardness": "hard",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
    "query": "Which airline has most number of flights?",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
    "query": "Find the names of stores whose number products is more than the average number of products.",
    "hardness": "hard",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
    "query": "Which continent has the most diverse languages?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
    "query": "What are the ids of students who both have friends and are liked?",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
    "query": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "query": "Where is the youngest teacher from?",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Episode FROM TV_series ORDER BY rating",
    "query": "List the Episode of all TV series sorted by rating.",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "query": "Find the first name and country code of the player who did the most number of tours.",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
    "query": "Give the name, year of independence, and surface area of the country that has the lowest population.",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT DISTINCT country FROM singer WHERE age > 20",
    "query": "What are all distinct countries where singers above age 20 are from?",
    "hardness": "easy",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "select production_code , channel from cartoon order by original_air_date desc limit 1",
    "query": "Find the production code and channel of the most recently aired cartoon .",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
    "query": "Show ids for all templates that are used by more than one document.",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
    "query": "Find all airlines that have fewer than 200 flights.",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
    "query": "Which airports do not have departing or arriving flights?",
    "hardness": "hard",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "query": "For each citizenship, how many singers are from that country?",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
    "query": "Show all document ids, names and the number of paragraphs in each document.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM AIRPORTS",
    "query": "Return the number of  airports.",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
    "query": "Show all template type codes that are not used by any document.",
    "hardness": "hard",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
    "query": "List the last name of the owner owning the youngest dog.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
    "query": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
    "hardness": "extra",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
    "query": "Find the first names of owners living in Virginia and the names of dogs they own.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
    "query": "What are the names and release years for all the songs of the youngest singer?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
    "query": "Which airlines have departures from CVO but not from APG airports?",
    "hardness": "extra",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND IsOfficial = \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\" AND IsOfficial = \"T\"",
    "query": "Which countries have either English or Dutch as an official language?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT avg(Earnings) FROM poker_player",
    "query": "Return the average earnings across all poker players.",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "query": "Which template type code has most number of templates?",
    "hardness": "hard",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
    "query": "Find the total ranking points for each player and their first name.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(*) , country_code FROM players GROUP BY country_code",
    "query": "How many players are from each country?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "query": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "query": "List the record company shared by the most number of orchestras.",
    "hardness": "hard",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "query": "What is the maximum accelerate for all the different cylinders?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
    "query": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT avg(num_of_ticket) , max(num_of_ticket) FROM visit",
    "query": "What are the average and maximum number of tickets bought in all visits?",
    "hardness": "medium",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count(*) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat';",
    "query": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
    "query": "What is the maker of the carr produced in the earliest year and what year was it?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT count(*) , city FROM employee GROUP BY city",
    "query": "Count the number of employees for each city.",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
    "query": "How many cities in each district have a population that is above the average population across all cities?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
    "query": "What are the names of cities in Europe for which English is not the official language?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "query": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
    "query": "What is the last name of the student who has a cat that is 3 years old?",
    "hardness": "hard",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "query": "What are the names of the singers who are not French citizens?",
    "hardness": "easy",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
    "query": "find the name of employee who was awarded the most times in the evaluation.",
    "hardness": "extra",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
    "query": "What is the first name and country code of the player with the most tours?",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
    "query": "What is the official language used in the country the name of whose head of state is Beatrix.",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT line_1 , line_2 FROM addresses",
    "query": "what are all the addresses including line 1 and line 2?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "query": "What is the most commmon hometowns for teachers?",
    "hardness": "hard",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code , template_type_description FROM Ref_template_types",
    "query": "Show all template type codes and descriptions.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
    "query": "What is the name of the different car makers who produced a car in 1970?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
    "query": "What are the names of documents that use templates with the code BK?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
    "query": "What is the total number of languages used in Aruba?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
    "query": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "real_estate_properties",
    "gold": "SELECT count(*) FROM Other_Available_Features",
    "query": "How many available features are there in total?",
    "hardness": "easy",
    "db_tables": {
      "Ref_Feature_Types": [
        "feature_type_code",
        "feature_type_name"
      ],
      "Ref_Property_Types": [
        "property_type_code",
        "property_type_description"
      ],
      "Other_Available_Features": [
        "feature_id",
        "feature_type_code",
        "feature_name",
        "feature_description"
      ],
      "Properties": [
        "property_id",
        "property_type_code",
        "date_on_market",
        "date_sold",
        "property_name",
        "property_address",
        "room_count",
        "vendor_requested_price",
        "buyer_offered_price",
        "agreed_selling_price",
        "apt_feature_1",
        "apt_feature_2",
        "apt_feature_3",
        "fld_feature_1",
        "fld_feature_2",
        "fld_feature_3",
        "hse_feature_1",
        "hse_feature_2",
        "hse_feature_3",
        "oth_feature_1",
        "oth_feature_2",
        "oth_feature_3",
        "shp_feature_1",
        "shp_feature_2",
        "shp_feature_3",
        "other_property_details"
      ],
      "Other_Property_Features": [
        "property_id",
        "feature_id",
        "property_feature_description"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
    "query": "What are the codes of template types that have fewer than 3 templates?",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT min(Version_Number) , template_type_code FROM Templates",
    "query": "Return the lowest version number, along with its corresponding template type code.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
    "query": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Documents",
    "query": "How many documents do we have?",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(*) FROM Courses",
    "query": "How many courses in total are listed?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT avg(Attendance) FROM SHOW",
    "query": "What is the average attendance of shows?",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "select max(capacity), average from stadium",
    "query": "What is the maximum capacity and the average of all stadiums ?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT count(*) FROM area_code_state",
    "query": "How many states are there?",
    "hardness": "easy",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
    "query": "What are the countries that have greater surface area than any country in Europe?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
    "query": "Show names for all stadiums except for stadiums having a concert in year 2014.",
    "hardness": "hard",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
    "query": "what are the different names of the singers that have sales more than 300000?",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT course_description FROM Courses WHERE course_name = 'math'",
    "query": "How is the math course described?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
    "query": "Which languages are spoken by only one country in republic governments?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
    "query": "For each continent, list its id, name, and how many countries it has?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "query": "What is the document id with least number of paragraphs?",
    "hardness": "hard",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT name , grade FROM Highschooler",
    "query": "What are the names and grades for each high schooler?",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
    "query": "How many car models are produced in the usa?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "query": "What are the names of the contestants whose names are not 'Jessie Alloway'",
    "hardness": "easy",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "query": "What is the record company used by the greatest number of orchestras?",
    "hardness": "hard",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "query": "What is the last transcript release date?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "select sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
    "query": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
    "query": "Give the number of Jetblue Airways flights.",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
    "query": "Return the number of likes that the high schooler named Kyle has.",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
    "query": "What are the cost and treatment type description of each treatment?",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
    "query": "Which first names are used for professionals or owners but are not used as dog names?",
    "hardness": "hard",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
    "query": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "query": "find the names of loser and winner who played in the match with greatest number of minutes.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "query": "Which model has the most version(make) of cars?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM COUNTRIES;",
    "query": "How many countries are listed?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
    "query": "For each stadium, how many concerts play there?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
    "query": "Show the names of singers that have more than one song.",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "query": "How many cars have a larger accelerate than the car with the largest horsepower?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "query": "How many professionals did not operate any treatment on dogs?",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
    "query": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
    "hardness": "hard",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "query": "List the name of the conductor with the most years of work.",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the program id and the summary of the degree that has the most students enrolled?",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
    "query": "Find the name of tourney that has more than 10 matches.",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "query": "List all cartoon directed by \"Ben Jones\".",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT country , count(*) FROM singer GROUP BY country",
    "query": "How many singers are from each country?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "query": "What are the population, name and leader of the country with the largest area?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT count(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
    "query": "What are the number of votes from state 'NY' or 'CA'?",
    "hardness": "medium",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
    "query": "What is the first name of every student who has a dog but does not have a cat?",
    "hardness": "extra",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype",
    "query": "Find the average weight for each pet type.",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
    "query": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "query": "Show the name of the conductor that has conducted the most number of orchestras.",
    "hardness": "extra",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
    "query": "Which airline has abbreviation 'UAL'?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
    "query": "How many flights depart from 'APG'?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT count(*) FROM singer",
    "query": "What is the count of singers?",
    "hardness": "easy",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Title FROM Cartoon ORDER BY title",
    "query": "What are the titles of the cartoons sorted alphabetically?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "select count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
    "query": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
    "query": "List the number of different series names and contents in the TV Channel table.",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
    "query": "Which shops' number products is above the average? Give me the shop names.",
    "hardness": "hard",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "query": "What is the language spoken by the largest percentage of people in each country?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
    "query": "What is the full name of each car maker, along with its id and how many models it produces?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Which owner owns the most dogs? List the owner id, first name and last name.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
    "query": "What are airlines that have some flight departing from airport 'AHD'?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
    "query": "What are all the song names by singers who are older than average?",
    "hardness": "hard",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
    "query": "How many official languages does Afghanistan have?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
    "query": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
    "query": "What is average life expectancy in the countries where English is not the official language?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
    "query": "List singer names and number of concerts for each singer.",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT section_name , section_description FROM Sections",
    "query": "What are the names and descriptions of all the sections?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
    "query": "Return the names of poker players sorted by their earnings descending.",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "query": "What is the content of the series Sky Radio?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
    "query": "What is the official language spoken in the country whose head of state is Beatrix?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "query": "What is the document id with 1 to 2 paragraphs?",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
    "query": "What are the names of poker players whose earnings is higher than 300000?",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "real_estate_properties",
    "gold": "SELECT property_name FROM Properties WHERE property_type_code = \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code = \"Apartment\" AND room_count > 1",
    "query": "What are the names of properties that are either houses or apartments with more than 1 room?",
    "hardness": "hard",
    "db_tables": {
      "Ref_Feature_Types": [
        "feature_type_code",
        "feature_type_name"
      ],
      "Ref_Property_Types": [
        "property_type_code",
        "property_type_description"
      ],
      "Other_Available_Features": [
        "feature_id",
        "feature_type_code",
        "feature_name",
        "feature_description"
      ],
      "Properties": [
        "property_id",
        "property_type_code",
        "date_on_market",
        "date_sold",
        "property_name",
        "property_address",
        "room_count",
        "vendor_requested_price",
        "buyer_offered_price",
        "agreed_selling_price",
        "apt_feature_1",
        "apt_feature_2",
        "apt_feature_3",
        "fld_feature_1",
        "fld_feature_2",
        "fld_feature_3",
        "hse_feature_1",
        "hse_feature_2",
        "hse_feature_3",
        "oth_feature_1",
        "oth_feature_2",
        "oth_feature_3",
        "shp_feature_1",
        "shp_feature_2",
        "shp_feature_3",
        "other_property_details"
      ],
      "Other_Property_Features": [
        "property_id",
        "feature_id",
        "property_feature_description"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "query": "What are the record companies of orchestras in descending order of years in which they were founded?",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(DISTINCT loser_name) FROM matches",
    "query": "How many different loser names are there?",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT avg(winner_rank) FROM matches",
    "query": "What is the average rank for winners in all matches?",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "query": "What are the major record formats of orchestras, sorted by their frequency?",
    "hardness": "medium",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "query": "Find the number of owners who do not own any dogs at this moment.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "query": "Give the name of the nation that uses the greatest amount of languages.",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
    "query": "What are the country codes for countries that do not speak English?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count(*) > 3;",
    "query": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
    "query": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "hardness": "extra",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
    "query": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
    "hardness": "hard",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
    "query": "What are the countries that are not playing cartoons written by Todd Casey?",
    "hardness": "hard",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
    "query": "Find the number of professionals who have not treated any dogs.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(Population) FROM city WHERE District = \"Gelderland\"",
    "query": "How many people live in Gelderland district?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
    "query": "How many dogs have an age below the average?",
    "hardness": "hard",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
    "query": "What is the name of the country with the most car makers?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
    "query": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "query": "Return the type code of the template type that the most templates belong to.",
    "hardness": "hard",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT count(*) FROM conductor",
    "query": "How many conductors are there?",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Templates WHERE template_type_code = \"CV\"",
    "query": "How many templates have template type code CV?",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
    "query": "What are the names of the teachers and how many courses do they teach?",
    "hardness": "medium",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT min(population) FROM country WHERE Continent = \"Africa\")",
    "query": "What are the Asian countries which have a population larger than that of any country in Africa?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
    "query": "How many concerts occurred in 2014 or 2015?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
    "query": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT name , date FROM battle",
    "query": "List the name, date and result of each battle.",
    "hardness": "medium",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
    "query": "Which African countries have a smaller population than that of any country in Asia?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
    "query": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "hardness": "extra",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "query": "Find the name and rank of the 3 youngest winners across all matches.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
    "query": "Find the cities that have more than one employee under age 30.",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009",
    "query": "Find the average number of staff working for the museums that were open before 2009.",
    "hardness": "easy",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "query": "How many different degree names are offered?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(*) FROM matches",
    "query": "Count the number of matches.",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
    "query": "Which shops run with no employees? Find the shop names",
    "hardness": "hard",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT count(*) , country_code FROM players GROUP BY country_code",
    "query": "find the number of players for each country.",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
    "query": "For each shop, return the number of employees working there and the name of the shop.",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
    "query": "Give the names of nations that speak both English and French.",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "query": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
    "query": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
    "query": "How much surface area do the countires in the Carribean cover together?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "select t2.concert_name , t2.theme , count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
    "query": "What are the names , themes , and number of singers for every concert ?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT max(killed) , min(killed) FROM death",
    "query": "What is maximum and minimum death toll caused each time?",
    "hardness": "medium",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query": "What is the episode for the TV series named \"Sky Radio\"?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
    "query": "What are the names of nations speak both English and French?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT note FROM death WHERE note LIKE '%East%'",
    "query": "What are the notes of the death events which has substring 'East'?",
    "hardness": "medium",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders <= 3;",
    "query": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT student_id , count(*) FROM Friend GROUP BY student_id",
    "query": "How many friends does each student have?",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
    "query": "What is the average expected life expectancy for countries in the region of Central Africa?",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT count(*) FROM Highschooler",
    "query": "Count the number of high schoolers.",
    "hardness": "easy",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
    "query": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
    "query": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT DISTINCT template_type_code FROM Templates",
    "query": "What are the different template type codes?",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
    "query": "What is name of the country that speaks the largest number of languages?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
    "query": "What is the first name and country code of the oldest player?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "query": "List the earnings of poker players in descending order.",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "query": "Who is the first student to register? List the first name, middle name and last name.",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "query": "What are the locations and names of all stations with capacity between 5000 and 10000?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
    "query": "What are flight numbers of flights arriving at Airport \"APG\"?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "query": "How many professionals have performed any treatment to dogs?",
    "hardness": "easy",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
    "query": "List the names of people that are not poker players.",
    "hardness": "hard",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
    "query": "How many car makers are there in france?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
    "query": "What are the ids and names of each document, as well as the number of paragraphs in each?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
    "query": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT max(population) FROM country WHERE Continent = \"Africa\")",
    "query": "Which Asian countries have a population that is larger than any country in Africa?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
    "query": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "select name from teacher where hometown != \"little lever urban district\"",
    "query": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
    "hardness": "easy",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT name , tonnage FROM ship ORDER BY name DESC",
    "query": "List the name and tonnage ordered by in descending alphaetical order for the names.",
    "hardness": "medium",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT DISTINCT country FROM singer WHERE age > 20",
    "query": "What are  the different countries with singers above age 20?",
    "hardness": "easy",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
    "query": "Find the average and maximum age for each type of pet.",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "battle_death",
    "gold": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
    "query": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
    "hardness": "medium",
    "db_tables": {
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander",
        "latin_commander",
        "result"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage",
        "ship_type",
        "location",
        "disposition_of_ship"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed",
        "injured"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "query": "Show ids for all templates not used by any document.",
    "hardness": "hard",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
    "query": "Which grades have 4 or more high schoolers?",
    "hardness": "easy",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "query": "What are the names of the nations with the 3 lowest populations?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "query": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "hardness": "hard",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
    "query": "Show the date and id of the transcript with at least 2 course results.",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "query": "How many TV Channel using language English?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
    "query": "What are the paragraph texts for the document with the name 'Customer reviews'?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
    "query": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "query": "What are the names and ranks of the three youngest winners across all matches?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
    "query": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "query": "What are the names of the winner and loser who played in the longest match?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
    "query": "Show the hometowns shared by at least two teachers.",
    "hardness": "easy",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT max(age) FROM Dogs",
    "query": "Tell me the age of the oldest dog.",
    "hardness": "easy",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
    "query": "Show different citizenship of singers and the number of singers of each citizenship.",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
    "query": "Which city and country is the Alton airport at?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Return the name of the high school student with the most friends.",
    "hardness": "extra",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "query": "How many flights depart from City Aberdeen?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
    "query": "Return the ids corresponding to templates with the description 'Presentation'.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
    "query": "What are the names of the employees who never received any evaluation?",
    "hardness": "hard",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT t1.id , t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count(*) > 1",
    "query": "find the id, name and age for visitors who visited some museums more than once.",
    "hardness": "medium",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
    "query": "What are the first names of every student who has a cat or dog as a pet?",
    "hardness": "extra",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT name , country , age FROM singer ORDER BY age DESC",
    "query": "What are the names, countries, and ages for every singer in descending order of age?",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
    "query": "Return the ids of templates that have the code PP or PPT.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "query": "Return the names of conductors that do not have the nationality \"USA\".",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT Maker , Model FROM MODEL_LIST;",
    "query": "What are the makers and models?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
    "query": "Which model of the car has the minimum horsepower?",
    "hardness": "hard",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
    "query": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "hardness": "extra",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
    "query": "What are the ids of the students who do not own cats as pets?",
    "hardness": "hard",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT charge_type , charge_amount FROM Charges",
    "query": "How much does each charge type costs? List both charge type and amount.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
    "query": "Show the ID of the high schooler named Kyle.",
    "hardness": "easy",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
    "query": "Show the date of the transcript which shows the least number of results, also list the id.",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
    "query": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
    "hardness": "medium",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
    "query": "Give the mean life expectancy of countries in which English is not the official language.",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*) > 2",
    "query": "What are the ids of all tv channels that have more than 2 TV channels?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
    "query": "Count the number of friends Kyle has.",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the document id and name with greatest number of paragraphs?",
    "hardness": "extra",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT T2.concert_name , T2.theme , count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
    "query": "Show the name and theme for all concerts and the number of singers in each concert.",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
    "query": "Show name of all students who have some friends and also are liked by someone else.",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
    "query": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name FROM country WHERE IndepYear > 1950",
    "query": "Give the names of the nations that were founded after 1950.",
    "hardness": "easy",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM AIRPORTS",
    "query": "How many airports do we have?",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
    "query": "What are the towns from which at least two teachers come from?",
    "hardness": "easy",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
    "query": "Show the name of the teacher for the math course.",
    "hardness": "hard",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Birth_Year , Citizenship FROM singer",
    "query": "What are the birth years and citizenships of the singers?",
    "hardness": "medium",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
    "query": "What is the id and type code for the template used by the most documents?",
    "hardness": "extra",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
    "query": "How many people are there of each nationality?",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
    "query": "Find the kind of program which most number of students are enrolled in?",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
    "query": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "concert_singer",
    "gold": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
    "query": "Show the name and the release year of the song by the youngest singer.",
    "hardness": "medium",
    "db_tables": {
      "stadium": [
        "Stadium_ID",
        "Location",
        "Name",
        "Capacity",
        "Highest",
        "Lowest",
        "Average"
      ],
      "singer": [
        "Singer_ID",
        "Name",
        "Country",
        "Song_Name",
        "Song_release_year",
        "Age",
        "Is_male"
      ],
      "concert": [
        "concert_ID",
        "concert_Name",
        "Theme",
        "Stadium_ID",
        "Year"
      ],
      "singer_in_concert": [
        "concert_ID",
        "Singer_ID"
      ]
    }
  },
  {
    "db": "singer",
    "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "query": "List the name of singers whose citizenship is not \"France\".",
    "hardness": "easy",
    "db_tables": {
      "singer": [
        "Singer_ID",
        "Name",
        "Birth_Year",
        "Net_Worth_Millions",
        "Citizenship"
      ],
      "song": [
        "Song_ID",
        "Title",
        "Singer_ID",
        "Sales",
        "Highest_Position"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
    "query": "Find the name of the employee who got the highest one time bonus.",
    "hardness": "hard",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
    "query": "What are the names and id of courses having at most 2 sections?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
    "query": "Give the flight numbers of flights leaving from APG.",
    "hardness": "easy",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
    "query": "What are the name, independence year, and surface area of the country with the smallest population?",
    "hardness": "medium",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code",
    "query": "Show all template type codes and number of templates for each.",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
    "query": "What is the average earnings of poker players with height higher than 200?",
    "hardness": "medium",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM CARS_DATA WHERE horsepower > 150;",
    "query": "What is the number of cars with a horsepower greater than 150?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
    "query": "Return the id and name of the document with the most paragraphs.",
    "hardness": "extra",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
    "query": "How many people live in countries that do not speak English?",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
    "query": "Find the type and weight of the youngest pet.",
    "hardness": "medium",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
    "query": "Which states have both owners and professionals living there?",
    "hardness": "hard",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
    "query": "Return the number of United Airlines flights leaving from AHD Airport.",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT * FROM hiring",
    "query": "Give me all the information about hiring.",
    "hardness": "easy",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
    "query": "Show the names of students who have at least 2 likes.",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT count(*) FROM Templates WHERE template_type_code = \"CV\"",
    "query": "Count the number of templates of the type CV.",
    "hardness": "easy",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
    "query": "Find the first name of students who have cat or dog pet.",
    "hardness": "extra",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
    "query": "What are the names of the high schoolers and how many friends does each have?",
    "hardness": "medium",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
    "query": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
    "hardness": "medium",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "flight_2",
    "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
    "query": "What are flight numbers of flights departing from City \"Aberdeen \"?",
    "hardness": "medium",
    "db_tables": {
      "airlines": [
        "uid",
        "Airline",
        "Abbreviation",
        "Country"
      ],
      "airports": [
        "City",
        "AirportCode",
        "AirportName",
        "Country",
        "CountryAbbrev"
      ],
      "flights": [
        "Airline",
        "FlightNo",
        "SourceAirport",
        "DestAirport"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
    "query": "How many contestants did not get voted?",
    "hardness": "extra",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
    "query": "Return the codes of countries that do not speak English and do not have Republics for governments.",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(*) FROM Transcripts",
    "query": "How many transcripts are listed?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
    "query": "What is the version number and template type code for the template with version number later than 5?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
    "query": "List each owner's first name, last name, and the size of his for her dog.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "employee_hire_evaluation",
    "gold": "SELECT count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
    "query": "Find the number of employees hired in each shop; show the shop name as well.",
    "hardness": "medium",
    "db_tables": {
      "employee": [
        "Employee_ID",
        "Name",
        "Age",
        "City"
      ],
      "shop": [
        "Shop_ID",
        "Name",
        "Location",
        "District",
        "Number_products",
        "Manager_name"
      ],
      "hiring": [
        "Shop_ID",
        "Employee_ID",
        "Start_from",
        "Is_full_time"
      ],
      "evaluation": [
        "Employee_ID",
        "Year_awarded",
        "Bonus"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT grade FROM Highschooler",
    "query": "Show all the grades of the high schoolers.",
    "hardness": "easy",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "orchestra",
    "gold": "SELECT count(DISTINCT Nationality) FROM conductor",
    "query": "How many different nationalities do conductors have?",
    "hardness": "easy",
    "db_tables": {
      "conductor": [
        "Conductor_ID",
        "Name",
        "Age",
        "Nationality",
        "Year_of_Work"
      ],
      "orchestra": [
        "Orchestra_ID",
        "Orchestra",
        "Conductor_ID",
        "Record_Company",
        "Year_of_Founded",
        "Major_Record_Format"
      ],
      "performance": [
        "Performance_ID",
        "Orchestra_ID",
        "Type",
        "Date",
        "Official_ratings_(millions)",
        "Weekly_rank",
        "Share"
      ],
      "show": [
        "Show_ID",
        "Performance_ID",
        "If_first_show",
        "Result",
        "Attendance"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT avg(loser_age) , avg(winner_age) FROM matches",
    "query": "What are the average ages of losers and winners across matches?",
    "hardness": "medium",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "voter_1",
    "gold": "SELECT DISTINCT state , created FROM votes",
    "query": "What are the distinct states and create time of all votes?",
    "hardness": "medium",
    "db_tables": {
      "AREA_CODE_STATE": [
        "area_code",
        "state"
      ],
      "CONTESTANTS": [
        "contestant_number",
        "contestant_name"
      ],
      "VOTES": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number",
        "created"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
    "query": "Which regions speak Dutch or English?",
    "hardness": "hard",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
    "query": "Show me all grades that have at least 4 students.",
    "hardness": "easy",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "query": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
    "hardness": "easy",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "world_1",
    "gold": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
    "query": "Find the city with the largest population that uses English.",
    "hardness": "extra",
    "db_tables": {
      "city": [
        "ID",
        "Name",
        "CountryCode",
        "District",
        "Population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "country": [
        "Code",
        "Name",
        "Continent",
        "Region",
        "SurfaceArea",
        "IndepYear",
        "Population",
        "LifeExpectancy",
        "GNP",
        "GNPOld",
        "LocalName",
        "GovernmentForm",
        "HeadOfState",
        "Capital",
        "Code2"
      ],
      "countrylanguage": [
        "CountryCode",
        "Language",
        "IsOfficial",
        "Percentage"
      ]
    }
  },
  {
    "db": "pets_1",
    "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
    "query": "Find the number of dog pets that are raised by female students (with sex F).",
    "hardness": "hard",
    "db_tables": {
      "Student": [
        "StuID",
        "LName",
        "Fname",
        "Age",
        "Sex",
        "Major",
        "Advisor",
        "city_code"
      ],
      "Has_Pet": [
        "StuID",
        "PetID"
      ],
      "Pets": [
        "PetID",
        "PetType",
        "pet_age",
        "weight"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
    "query": "What is the average age of the dogs who have gone through any treatments?",
    "hardness": "hard",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT line_1 , line_2 FROM addresses",
    "query": "What is the first and second line for all addresses?",
    "hardness": "medium",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
    "query": "For each semester, what is the name and id of the one with the most students registered?",
    "hardness": "extra",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
    "query": "What are the ids for templates that are not used in any documents?",
    "hardness": "hard",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  },
  {
    "db": "museum_visit",
    "gold": "SELECT t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
    "query": "Find the name and age of the visitor who bought the most tickets at once.",
    "hardness": "hard",
    "db_tables": {
      "museum": [
        "Museum_ID",
        "Name",
        "Num_of_Staff",
        "Open_Year"
      ],
      "visitor": [
        "ID",
        "Name",
        "Level_of_membership",
        "Age"
      ],
      "visit": [
        "Museum_ID",
        "visitor_ID",
        "Num_of_Ticket",
        "Total_spent"
      ]
    }
  },
  {
    "db": "tvshow",
    "gold": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "query": "What is minimum and maximum share of TV series?",
    "hardness": "medium",
    "db_tables": {
      "TV_Channel": [
        "id",
        "series_name",
        "Country",
        "Language",
        "Content",
        "Pixel_aspect_ratio_PAR",
        "Hight_definition_TV",
        "Pay_per_view_PPV",
        "Package_Option"
      ],
      "TV_series": [
        "id",
        "Episode",
        "Air_Date",
        "Rating",
        "Share",
        "18_49_Rating_Share",
        "Viewers_m",
        "Weekly_Rank",
        "Channel"
      ],
      "Cartoon": [
        "id",
        "Title",
        "Directed_by",
        "Written_by",
        "Original_air_date",
        "Production_code",
        "Channel"
      ]
    }
  },
  {
    "db": "car_1",
    "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders > 4;",
    "query": "What is the number of cars with more than 4 cylinders?",
    "hardness": "easy",
    "db_tables": {
      "continents": [
        "ContId",
        "Continent"
      ],
      "countries": [
        "CountryId",
        "CountryName",
        "Continent"
      ],
      "car_makers": [
        "Id",
        "Maker",
        "FullName",
        "Country"
      ],
      "model_list": [
        "ModelId",
        "Maker",
        "Model"
      ],
      "car_names": [
        "MakeId",
        "Model",
        "Make"
      ],
      "cars_data": [
        "Id",
        "MPG",
        "Cylinders",
        "Edispl",
        "Horsepower",
        "Weight",
        "Accelerate",
        "Year"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(DISTINCT current_address_id) FROM Students",
    "query": "How many different addresses do the students currently live?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "network_1",
    "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
    "query": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
    "hardness": "hard",
    "db_tables": {
      "Highschooler": [
        "ID",
        "name",
        "grade"
      ],
      "Friend": [
        "student_id",
        "friend_id"
      ],
      "Likes": [
        "student_id",
        "liked_id"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
    "query": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
    "hardness": "medium",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "poker_player",
    "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
    "query": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
    "hardness": "easy",
    "db_tables": {
      "poker_player": [
        "Poker_Player_ID",
        "People_ID",
        "Final_Table_Made",
        "Best_Finish",
        "Money_Rank",
        "Earnings"
      ],
      "people": [
        "People_ID",
        "Nationality",
        "Name",
        "Birth_Date",
        "Height"
      ]
    }
  },
  {
    "db": "course_teach",
    "gold": "SELECT count(*) FROM teacher",
    "query": "How many teachers are there?",
    "hardness": "easy",
    "db_tables": {
      "course": [
        "Course_ID",
        "Staring_Date",
        "Course"
      ],
      "teacher": [
        "Teacher_ID",
        "Name",
        "Age",
        "Hometown"
      ],
      "course_arrange": [
        "Course_ID",
        "Teacher_ID",
        "Grade"
      ]
    }
  },
  {
    "db": "dog_kennels",
    "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
    "query": "How many owners temporarily do not have any dogs?",
    "hardness": "extra",
    "db_tables": {
      "Breeds": [
        "breed_code",
        "breed_name"
      ],
      "Charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "Sizes": [
        "size_code",
        "size_description"
      ],
      "Treatment_Types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "Owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street",
        "city",
        "state",
        "zip_code",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code",
        "size_code",
        "name",
        "age",
        "date_of_birth",
        "gender",
        "weight",
        "date_arrived",
        "date_adopted",
        "date_departed"
      ],
      "Professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street",
        "city",
        "state",
        "zip_code",
        "last_name",
        "email_address",
        "home_phone",
        "cell_number"
      ],
      "Treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment",
        "cost_of_treatment"
      ]
    }
  },
  {
    "db": "student_transcripts_tracking",
    "gold": "SELECT count(*) FROM Transcripts",
    "query": "How many transcripts are released?",
    "hardness": "easy",
    "db_tables": {
      "Addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3",
        "city",
        "zip_postcode",
        "state_province_county",
        "country",
        "other_address_details"
      ],
      "Courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "Departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "Degree_Programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "Sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description",
        "other_details"
      ],
      "Semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "Students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "middle_name",
        "last_name",
        "cell_mobile_number",
        "email_address",
        "ssn",
        "date_first_registered",
        "date_left",
        "other_student_details"
      ],
      "Student_Enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id",
        "other_details"
      ],
      "Student_Enrolment_Courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "Transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "Transcript_Contents": [
        "student_course_id",
        "transcript_id"
      ]
    }
  },
  {
    "db": "wta_1",
    "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
    "query": "Find the codes of countries that have more than 50 players.",
    "hardness": "easy",
    "db_tables": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "country_code"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "loser_hand",
        "loser_ht",
        "loser_id",
        "loser_ioc",
        "loser_name",
        "loser_rank",
        "loser_rank_points",
        "loser_seed",
        "match_num",
        "minutes",
        "round",
        "score",
        "surface",
        "tourney_date",
        "tourney_id",
        "tourney_level",
        "tourney_name",
        "winner_age",
        "winner_entry",
        "winner_hand",
        "winner_ht",
        "winner_id",
        "winner_ioc",
        "winner_name",
        "winner_rank",
        "winner_rank_points",
        "winner_seed",
        "year"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points",
        "tours"
      ]
    }
  },
  {
    "db": "cre_Doc_Template_Mgt",
    "gold": "SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
    "query": "What are the different template type codes, and how many documents use each type?",
    "hardness": "medium",
    "db_tables": {
      "Ref_Template_Types": [
        "Template_Type_Code",
        "Template_Type_Description"
      ],
      "Templates": [
        "Template_ID",
        "Version_Number",
        "Template_Type_Code",
        "Date_Effective_From",
        "Date_Effective_To",
        "Template_Details"
      ],
      "Documents": [
        "Document_ID",
        "Template_ID",
        "Document_Name",
        "Document_Description",
        "Other_Details"
      ],
      "Paragraphs": [
        "Paragraph_ID",
        "Document_ID",
        "Paragraph_Text",
        "Other_Details"
      ]
    }
  }
]